
Entregable2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c838  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001900  0800c948  0800c948  0000d948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e248  0800e248  00011090  2**0
                  CONTENTS
  4 .ARM          00000000  0800e248  0800e248  00011090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e248  0800e248  00011090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e248  0800e248  0000f248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e24c  0800e24c  0000f24c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001090  20000000  0800e250  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fcc  20001090  0800f2e0  00011090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000405c  0800f2e0  0001205c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e4ce  00000000  00000000  000110b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043d4  00000000  00000000  0002f587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00033960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001455  00000000  00000000  00035348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad97  00000000  00000000  0003679d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f98b  00000000  00000000  00051534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d264  00000000  00000000  00070ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e123  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076e4  00000000  00000000  0010e168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0011584c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20001090 	.word	0x20001090
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c930 	.word	0x0800c930

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20001094 	.word	0x20001094
 800014c:	0800c930 	.word	0x0800c930

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <FFT>:
#include "twid256.h" /*header file with twiddle constants*/
#include "fft.h"


void FFT(struct cmpx *Y, int N) /*FFT de vector de N puntos*/
{
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	b090      	sub	sp, #64	@ 0x40
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
	struct cmpx temp1, temp2; /*temporary storage variables */
	int i, j, k; /*loop counter variables */
	int upper_leg, lower_leg; /*index of upper/lower butterfly leg*/
	int leg_diff; /*difference between upper/lower leg*/
	int num_stages = 0; /*number of FFT stages, or iterations*/
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	@ 0x28
	int index, step; /*index and step between twiddle factor*/
	/* log(base 2) de N puntos = M fases o estados */
	i = 1;
 8001022:	2301      	movs	r3, #1
 8001024:	63fb      	str	r3, [r7, #60]	@ 0x3c
	do {
		num_stages += 1;
 8001026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001028:	3301      	adds	r3, #1
 800102a:	62bb      	str	r3, [r7, #40]	@ 0x28
		i = i * 2;
 800102c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	63fb      	str	r3, [r7, #60]	@ 0x3c
	} while (i != N);
 8001032:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	d1f5      	bne.n	8001026 <FFT+0x12>
	/* starting difference between upper and lower butterfly legs*/
	leg_diff = N / 2;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	0fda      	lsrs	r2, r3, #31
 800103e:	4413      	add	r3, r2
 8001040:	105b      	asrs	r3, r3, #1
 8001042:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* step between values in twiddle factor array twid256.h */
	step = 512 / N;
 8001044:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	fb92 f3f3 	sdiv	r3, r2, r3
 800104e:	623b      	str	r3, [r7, #32]
	/* For N-point FFT */
	for (i = 0; i < num_stages; i++) /*tantas iteraciones como fases*/
 8001050:	2300      	movs	r3, #0
 8001052:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001054:	e0d2      	b.n	80011fc <FFT+0x1e8>
	{
		index = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
		for (j = 0; j < leg_diff; j++) /*tantas iteraciones como transfor-*/
 800105a:	2300      	movs	r3, #0
 800105c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800105e:	e0bd      	b.n	80011dc <FFT+0x1c8>
		{ /*madas en cada fase*/
			for (upper_leg = j; upper_leg < N; upper_leg += (2 * leg_diff)) { /*tantas iteraciones como puntos en cada transformada*/
 8001060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001062:	633b      	str	r3, [r7, #48]	@ 0x30
 8001064:	e0ae      	b.n	80011c4 <FFT+0x1b0>
				lower_leg = upper_leg + leg_diff;
 8001066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800106a:	4413      	add	r3, r2
 800106c:	61fb      	str	r3, [r7, #28]
				temp1.real = (Y[upper_leg]).real + (Y[lower_leg]).real;
 800106e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	4413      	add	r3, r2
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fd6e 	bl	8000b64 <__addsf3>
 8001088:	4603      	mov	r3, r0
 800108a:	617b      	str	r3, [r7, #20]
				temp1.imag = (Y[upper_leg]).imag + (Y[lower_leg]).imag;
 800108c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	4413      	add	r3, r2
 8001094:	6858      	ldr	r0, [r3, #4]
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fd5f 	bl	8000b64 <__addsf3>
 80010a6:	4603      	mov	r3, r0
 80010a8:	61bb      	str	r3, [r7, #24]
				temp2.real = (Y[upper_leg]).real - (Y[lower_leg]).real;
 80010aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	6818      	ldr	r0, [r3, #0]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fd4e 	bl	8000b60 <__aeabi_fsub>
 80010c4:	4603      	mov	r3, r0
 80010c6:	60fb      	str	r3, [r7, #12]
				temp2.imag = (Y[upper_leg]).imag - (Y[lower_leg]).imag;
 80010c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	6858      	ldr	r0, [r3, #4]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fd3f 	bl	8000b60 <__aeabi_fsub>
 80010e2:	4603      	mov	r3, r0
 80010e4:	613b      	str	r3, [r7, #16]
				(Y[lower_leg]).real = temp2.real * (w[index]).real
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff f995 	bl	8000418 <__aeabi_f2d>
 80010ee:	4a72      	ldr	r2, [pc, #456]	@ (80012b8 <FFT+0x2a4>)
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	4413      	add	r3, r2
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	f7ff f9e5 	bl	80004c8 <__aeabi_dmul>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4614      	mov	r4, r2
 8001104:	461d      	mov	r5, r3
						- temp2.imag * (w[index]).imag;
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f985 	bl	8000418 <__aeabi_f2d>
 800110e:	4a6a      	ldr	r2, [pc, #424]	@ (80012b8 <FFT+0x2a4>)
 8001110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001112:	011b      	lsls	r3, r3, #4
 8001114:	4413      	add	r3, r2
 8001116:	3308      	adds	r3, #8
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff f9d4 	bl	80004c8 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4620      	mov	r0, r4
 8001126:	4629      	mov	r1, r5
 8001128:	f7ff f816 	bl	8000158 <__aeabi_dsub>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
				(Y[lower_leg]).real = temp2.real * (w[index]).real
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	18d4      	adds	r4, r2, r3
						- temp2.imag * (w[index]).imag;
 800113c:	f7ff fcbc 	bl	8000ab8 <__aeabi_d2f>
 8001140:	4603      	mov	r3, r0
				(Y[lower_leg]).real = temp2.real * (w[index]).real
 8001142:	6023      	str	r3, [r4, #0]
				(Y[lower_leg]).imag = temp2.real * (w[index]).imag
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f966 	bl	8000418 <__aeabi_f2d>
 800114c:	4a5a      	ldr	r2, [pc, #360]	@ (80012b8 <FFT+0x2a4>)
 800114e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	4413      	add	r3, r2
 8001154:	3308      	adds	r3, #8
 8001156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115a:	f7ff f9b5 	bl	80004c8 <__aeabi_dmul>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4614      	mov	r4, r2
 8001164:	461d      	mov	r5, r3
						+ temp2.imag * (w[index]).real;
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f955 	bl	8000418 <__aeabi_f2d>
 800116e:	4a52      	ldr	r2, [pc, #328]	@ (80012b8 <FFT+0x2a4>)
 8001170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001172:	011b      	lsls	r3, r3, #4
 8001174:	4413      	add	r3, r2
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff f9a5 	bl	80004c8 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4620      	mov	r0, r4
 8001184:	4629      	mov	r1, r5
 8001186:	f7fe ffe9 	bl	800015c <__adddf3>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
				(Y[lower_leg]).imag = temp2.real * (w[index]).imag
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	18d4      	adds	r4, r2, r3
						+ temp2.imag * (w[index]).real;
 800119a:	f7ff fc8d 	bl	8000ab8 <__aeabi_d2f>
 800119e:	4603      	mov	r3, r0
				(Y[lower_leg]).imag = temp2.real * (w[index]).imag
 80011a0:	6063      	str	r3, [r4, #4]
				(Y[upper_leg]).real = temp1.real;
 80011a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	601a      	str	r2, [r3, #0]
				(Y[upper_leg]).imag = temp1.imag;
 80011ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	605a      	str	r2, [r3, #4]
			for (upper_leg = j; upper_leg < N; upper_leg += (2 * leg_diff)) { /*tantas iteraciones como puntos en cada transformada*/
 80011ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011c0:	4413      	add	r3, r2
 80011c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80011c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f6ff af4c 	blt.w	8001066 <FFT+0x52>
			}
			index += step;
 80011ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	4413      	add	r3, r2
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
		for (j = 0; j < leg_diff; j++) /*tantas iteraciones como transfor-*/
 80011d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011d8:	3301      	adds	r3, #1
 80011da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80011dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011e0:	429a      	cmp	r2, r3
 80011e2:	f6ff af3d 	blt.w	8001060 <FFT+0x4c>
		}
		leg_diff = leg_diff / 2;
 80011e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011e8:	0fda      	lsrs	r2, r3, #31
 80011ea:	4413      	add	r3, r2
 80011ec:	105b      	asrs	r3, r3, #1
 80011ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
		step *= 2;
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	623b      	str	r3, [r7, #32]
	for (i = 0; i < num_stages; i++) /*tantas iteraciones como fases*/
 80011f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011f8:	3301      	adds	r3, #1
 80011fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80011fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001200:	429a      	cmp	r2, r3
 8001202:	f6ff af28 	blt.w	8001056 <FFT+0x42>
	}
	/* bit reversal for resequencing data */
	j = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	63bb      	str	r3, [r7, #56]	@ 0x38
	for (i = 1; i < (N - 1); i++) {
 800120a:	2301      	movs	r3, #1
 800120c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800120e:	e049      	b.n	80012a4 <FFT+0x290>
		k = N / 2;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	0fda      	lsrs	r2, r3, #31
 8001214:	4413      	add	r3, r2
 8001216:	105b      	asrs	r3, r3, #1
 8001218:	637b      	str	r3, [r7, #52]	@ 0x34
		while (k <= j) {
 800121a:	e008      	b.n	800122e <FFT+0x21a>
			j = j - k;
 800121c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800121e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	63bb      	str	r3, [r7, #56]	@ 0x38
			k = k / 2;
 8001224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001226:	0fda      	lsrs	r2, r3, #31
 8001228:	4413      	add	r3, r2
 800122a:	105b      	asrs	r3, r3, #1
 800122c:	637b      	str	r3, [r7, #52]	@ 0x34
		while (k <= j) {
 800122e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001232:	429a      	cmp	r2, r3
 8001234:	ddf2      	ble.n	800121c <FFT+0x208>
		}
		j = j + k;
 8001236:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800123a:	4413      	add	r3, r2
 800123c:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (i < j) {
 800123e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001242:	429a      	cmp	r2, r3
 8001244:	da2b      	bge.n	800129e <FFT+0x28a>
			temp1.real = (Y[j]).real;
 8001246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	617b      	str	r3, [r7, #20]
			temp1.imag = (Y[j]).imag;
 8001252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	61bb      	str	r3, [r7, #24]
			(Y[j]).real = (Y[i]).real;
 800125e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	441a      	add	r2, r3
 8001266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	440b      	add	r3, r1
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	601a      	str	r2, [r3, #0]
			(Y[j]).imag = (Y[i]).imag;
 8001272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	441a      	add	r2, r3
 800127a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	440b      	add	r3, r1
 8001282:	6852      	ldr	r2, [r2, #4]
 8001284:	605a      	str	r2, [r3, #4]
			(Y[i]).real = temp1.real;
 8001286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	601a      	str	r2, [r3, #0]
			(Y[i]).imag = temp1.imag;
 8001292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	605a      	str	r2, [r3, #4]
	for (i = 1; i < (N - 1); i++) {
 800129e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012a0:	3301      	adds	r3, #1
 80012a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012aa:	429a      	cmp	r2, r3
 80012ac:	dbb0      	blt.n	8001210 <FFT+0x1fc>
		}
	}

	return;
 80012ae:	bf00      	nop
}
 80012b0:	3740      	adds	r7, #64	@ 0x40
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bdb0      	pop	{r4, r5, r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000000 	.word	0x20000000

080012bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c0:	f002 fa42 	bl	8003748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c4:	f000 f868 	bl	8001398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c8:	f000 fa40 	bl	800174c <MX_GPIO_Init>
  MX_DMA_Init();
 80012cc:	f000 fa18 	bl	8001700 <MX_DMA_Init>
  MX_I2C1_Init();
 80012d0:	f000 f8fc 	bl	80014cc <MX_I2C1_Init>
  MX_TIM3_Init();
 80012d4:	f000 f974 	bl	80015c0 <MX_TIM3_Init>
  MX_ADC1_Init();
 80012d8:	f000 f8ba 	bl	8001450 <MX_ADC1_Init>
  MX_TIM2_Init();
 80012dc:	f000 f924 	bl	8001528 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80012e0:	f000 f9e4 	bl	80016ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED, 1);
 80012e4:	2201      	movs	r2, #1
 80012e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012ea:	481b      	ldr	r0, [pc, #108]	@ (8001358 <main+0x9c>)
 80012ec:	f003 fc45 	bl	8004b7a <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 80012f0:	481a      	ldr	r0, [pc, #104]	@ (800135c <main+0xa0>)
 80012f2:	f005 f821 	bl	8006338 <HAL_TIM_Base_Start_IT>

  SSD1306_Init();
 80012f6:	f001 f99d 	bl	8002634 <SSD1306_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012fa:	f006 fbd9 	bl	8007ab0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of eventa2 */
  eventa2Handle = osMessageQueueNew (7, sizeof(event_t), &eventa2_attributes);
 80012fe:	4a18      	ldr	r2, [pc, #96]	@ (8001360 <main+0xa4>)
 8001300:	2101      	movs	r1, #1
 8001302:	2007      	movs	r0, #7
 8001304:	f006 fd40 	bl	8007d88 <osMessageQueueNew>
 8001308:	4603      	mov	r3, r0
 800130a:	4a16      	ldr	r2, [pc, #88]	@ (8001364 <main+0xa8>)
 800130c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SignalGenerator */
  SignalGeneratorHandle = osThreadNew(SignalGeneratorTask, NULL, &SignalGenerator_attributes);
 800130e:	4a16      	ldr	r2, [pc, #88]	@ (8001368 <main+0xac>)
 8001310:	2100      	movs	r1, #0
 8001312:	4816      	ldr	r0, [pc, #88]	@ (800136c <main+0xb0>)
 8001314:	f006 fc32 	bl	8007b7c <osThreadNew>
 8001318:	4603      	mov	r3, r0
 800131a:	4a15      	ldr	r2, [pc, #84]	@ (8001370 <main+0xb4>)
 800131c:	6013      	str	r3, [r2, #0]

  /* creation of ScreenControler */
  ScreenControlerHandle = osThreadNew(ScreenControlerTask, NULL, &ScreenControler_attributes);
 800131e:	4a15      	ldr	r2, [pc, #84]	@ (8001374 <main+0xb8>)
 8001320:	2100      	movs	r1, #0
 8001322:	4815      	ldr	r0, [pc, #84]	@ (8001378 <main+0xbc>)
 8001324:	f006 fc2a 	bl	8007b7c <osThreadNew>
 8001328:	4603      	mov	r3, r0
 800132a:	4a14      	ldr	r2, [pc, #80]	@ (800137c <main+0xc0>)
 800132c:	6013      	str	r3, [r2, #0]

  /* creation of InputControler */
  InputControlerHandle = osThreadNew(InputControlerTask, NULL, &InputControler_attributes);
 800132e:	4a14      	ldr	r2, [pc, #80]	@ (8001380 <main+0xc4>)
 8001330:	2100      	movs	r1, #0
 8001332:	4814      	ldr	r0, [pc, #80]	@ (8001384 <main+0xc8>)
 8001334:	f006 fc22 	bl	8007b7c <osThreadNew>
 8001338:	4603      	mov	r3, r0
 800133a:	4a13      	ldr	r2, [pc, #76]	@ (8001388 <main+0xcc>)
 800133c:	6013      	str	r3, [r2, #0]

  /* creation of DataControler */
  DataControlerHandle = osThreadNew(DataControlerTask, NULL, &DataControler_attributes);
 800133e:	4a13      	ldr	r2, [pc, #76]	@ (800138c <main+0xd0>)
 8001340:	2100      	movs	r1, #0
 8001342:	4813      	ldr	r0, [pc, #76]	@ (8001390 <main+0xd4>)
 8001344:	f006 fc1a 	bl	8007b7c <osThreadNew>
 8001348:	4603      	mov	r3, r0
 800134a:	4a12      	ldr	r2, [pc, #72]	@ (8001394 <main+0xd8>)
 800134c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800134e:	f006 fbe1 	bl	8007b14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001352:	bf00      	nop
 8001354:	e7fd      	b.n	8001352 <main+0x96>
 8001356:	bf00      	nop
 8001358:	40011000 	.word	0x40011000
 800135c:	20001130 	.word	0x20001130
 8001360:	0800dfe4 	.word	0x0800dfe4
 8001364:	200012a0 	.word	0x200012a0
 8001368:	0800df54 	.word	0x0800df54
 800136c:	08002189 	.word	0x08002189
 8001370:	20001290 	.word	0x20001290
 8001374:	0800df78 	.word	0x0800df78
 8001378:	08002345 	.word	0x08002345
 800137c:	20001294 	.word	0x20001294
 8001380:	0800df9c 	.word	0x0800df9c
 8001384:	080023dd 	.word	0x080023dd
 8001388:	20001298 	.word	0x20001298
 800138c:	0800dfc0 	.word	0x0800dfc0
 8001390:	080024a9 	.word	0x080024a9
 8001394:	2000129c 	.word	0x2000129c

08001398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b094      	sub	sp, #80	@ 0x50
 800139c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013a2:	2228      	movs	r2, #40	@ 0x28
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f009 fd0a 	bl	800adc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013c8:	2301      	movs	r3, #1
 80013ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d6:	2301      	movs	r3, #1
 80013d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013da:	2302      	movs	r3, #2
 80013dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013e4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80013e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ee:	4618      	mov	r0, r3
 80013f0:	f004 f9a6 	bl	8005740 <HAL_RCC_OscConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013fa:	f001 f915 	bl	8002628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fe:	230f      	movs	r3, #15
 8001400:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001402:	2302      	movs	r3, #2
 8001404:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800140a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800140e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2102      	movs	r1, #2
 800141a:	4618      	mov	r0, r3
 800141c:	f004 fc12 	bl	8005c44 <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001426:	f001 f8ff 	bl	8002628 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800142a:	2302      	movs	r3, #2
 800142c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800142e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001432:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	4618      	mov	r0, r3
 8001438:	f004 fdc2 	bl	8005fc0 <HAL_RCCEx_PeriphCLKConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001442:	f001 f8f1 	bl	8002628 <Error_Handler>
  }
}
 8001446:	bf00      	nop
 8001448:	3750      	adds	r7, #80	@ 0x50
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001460:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <MX_ADC1_Init+0x74>)
 8001462:	4a19      	ldr	r2, [pc, #100]	@ (80014c8 <MX_ADC1_Init+0x78>)
 8001464:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001466:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <MX_ADC1_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <MX_ADC1_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001472:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <MX_ADC1_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <MX_ADC1_Init+0x74>)
 800147a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800147e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001480:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <MX_ADC1_Init+0x74>)
 8001482:	2200      	movs	r2, #0
 8001484:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001486:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <MX_ADC1_Init+0x74>)
 8001488:	2201      	movs	r2, #1
 800148a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800148c:	480d      	ldr	r0, [pc, #52]	@ (80014c4 <MX_ADC1_Init+0x74>)
 800148e:	f002 f98d 	bl	80037ac <HAL_ADC_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001498:	f001 f8c6 	bl	8002628 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800149c:	2302      	movs	r3, #2
 800149e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014a0:	2301      	movs	r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_ADC1_Init+0x74>)
 80014ae:	f002 fce7 	bl	8003e80 <HAL_ADC_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80014b8:	f001 f8b6 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200010ac 	.word	0x200010ac
 80014c8:	40012400 	.word	0x40012400

080014cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d0:	4b12      	ldr	r3, [pc, #72]	@ (800151c <MX_I2C1_Init+0x50>)
 80014d2:	4a13      	ldr	r2, [pc, #76]	@ (8001520 <MX_I2C1_Init+0x54>)
 80014d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80014d6:	4b11      	ldr	r3, [pc, #68]	@ (800151c <MX_I2C1_Init+0x50>)
 80014d8:	4a12      	ldr	r2, [pc, #72]	@ (8001524 <MX_I2C1_Init+0x58>)
 80014da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <MX_I2C1_Init+0x50>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <MX_I2C1_Init+0x50>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <MX_I2C1_Init+0x50>)
 80014ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f0:	4b0a      	ldr	r3, [pc, #40]	@ (800151c <MX_I2C1_Init+0x50>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014f6:	4b09      	ldr	r3, [pc, #36]	@ (800151c <MX_I2C1_Init+0x50>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014fc:	4b07      	ldr	r3, [pc, #28]	@ (800151c <MX_I2C1_Init+0x50>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001502:	4b06      	ldr	r3, [pc, #24]	@ (800151c <MX_I2C1_Init+0x50>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001508:	4804      	ldr	r0, [pc, #16]	@ (800151c <MX_I2C1_Init+0x50>)
 800150a:	f003 fb4f 	bl	8004bac <HAL_I2C_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001514:	f001 f888 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200010dc 	.word	0x200010dc
 8001520:	40005400 	.word	0x40005400
 8001524:	00061a80 	.word	0x00061a80

08001528 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152e:	f107 0308 	add.w	r3, r7, #8
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153c:	463b      	mov	r3, r7
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001544:	4b1d      	ldr	r3, [pc, #116]	@ (80015bc <MX_TIM2_Init+0x94>)
 8001546:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800154a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 800154c:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <MX_TIM2_Init+0x94>)
 800154e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8001552:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001554:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <MX_TIM2_Init+0x94>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800155a:	4b18      	ldr	r3, [pc, #96]	@ (80015bc <MX_TIM2_Init+0x94>)
 800155c:	2263      	movs	r2, #99	@ 0x63
 800155e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001560:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <MX_TIM2_Init+0x94>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001566:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <MX_TIM2_Init+0x94>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800156c:	4813      	ldr	r0, [pc, #76]	@ (80015bc <MX_TIM2_Init+0x94>)
 800156e:	f004 fe93 	bl	8006298 <HAL_TIM_Base_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001578:	f001 f856 	bl	8002628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001580:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001582:	f107 0308 	add.w	r3, r7, #8
 8001586:	4619      	mov	r1, r3
 8001588:	480c      	ldr	r0, [pc, #48]	@ (80015bc <MX_TIM2_Init+0x94>)
 800158a:	f005 fbdf 	bl	8006d4c <HAL_TIM_ConfigClockSource>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001594:	f001 f848 	bl	8002628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015a0:	463b      	mov	r3, r7
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	@ (80015bc <MX_TIM2_Init+0x94>)
 80015a6:	f006 f843 	bl	8007630 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015b0:	f001 f83a 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20001130 	.word	0x20001130

080015c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08e      	sub	sp, #56	@ 0x38
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d4:	f107 0320 	add.w	r3, r7, #32
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	615a      	str	r2, [r3, #20]
 80015ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015f0:	4b2c      	ldr	r3, [pc, #176]	@ (80016a4 <MX_TIM3_Init+0xe4>)
 80015f2:	4a2d      	ldr	r2, [pc, #180]	@ (80016a8 <MX_TIM3_Init+0xe8>)
 80015f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200;
 80015f6:	4b2b      	ldr	r3, [pc, #172]	@ (80016a4 <MX_TIM3_Init+0xe4>)
 80015f8:	22c8      	movs	r2, #200	@ 0xc8
 80015fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fc:	4b29      	ldr	r3, [pc, #164]	@ (80016a4 <MX_TIM3_Init+0xe4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7;
 8001602:	4b28      	ldr	r3, [pc, #160]	@ (80016a4 <MX_TIM3_Init+0xe4>)
 8001604:	2207      	movs	r2, #7
 8001606:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001608:	4b26      	ldr	r3, [pc, #152]	@ (80016a4 <MX_TIM3_Init+0xe4>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160e:	4b25      	ldr	r3, [pc, #148]	@ (80016a4 <MX_TIM3_Init+0xe4>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001614:	4823      	ldr	r0, [pc, #140]	@ (80016a4 <MX_TIM3_Init+0xe4>)
 8001616:	f004 fe3f 	bl	8006298 <HAL_TIM_Base_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001620:	f001 f802 	bl	8002628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001624:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001628:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800162a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800162e:	4619      	mov	r1, r3
 8001630:	481c      	ldr	r0, [pc, #112]	@ (80016a4 <MX_TIM3_Init+0xe4>)
 8001632:	f005 fb8b 	bl	8006d4c <HAL_TIM_ConfigClockSource>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800163c:	f000 fff4 	bl	8002628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001640:	4818      	ldr	r0, [pc, #96]	@ (80016a4 <MX_TIM3_Init+0xe4>)
 8001642:	f004 fef9 	bl	8006438 <HAL_TIM_PWM_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800164c:	f000 ffec 	bl	8002628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001658:	f107 0320 	add.w	r3, r7, #32
 800165c:	4619      	mov	r1, r3
 800165e:	4811      	ldr	r0, [pc, #68]	@ (80016a4 <MX_TIM3_Init+0xe4>)
 8001660:	f005 ffe6 	bl	8007630 <HAL_TIMEx_MasterConfigSynchronization>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800166a:	f000 ffdd 	bl	8002628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166e:	2360      	movs	r3, #96	@ 0x60
 8001670:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	4619      	mov	r1, r3
 8001684:	4807      	ldr	r0, [pc, #28]	@ (80016a4 <MX_TIM3_Init+0xe4>)
 8001686:	f005 fa9f 	bl	8006bc8 <HAL_TIM_PWM_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001690:	f000 ffca 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001694:	4803      	ldr	r0, [pc, #12]	@ (80016a4 <MX_TIM3_Init+0xe4>)
 8001696:	f001 fcfb 	bl	8003090 <HAL_TIM_MspPostInit>

}
 800169a:	bf00      	nop
 800169c:	3738      	adds	r7, #56	@ 0x38
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20001178 	.word	0x20001178
 80016a8:	40000400 	.word	0x40000400

080016ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016b0:	4b11      	ldr	r3, [pc, #68]	@ (80016f8 <MX_USART1_UART_Init+0x4c>)
 80016b2:	4a12      	ldr	r2, [pc, #72]	@ (80016fc <MX_USART1_UART_Init+0x50>)
 80016b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016b6:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <MX_USART1_UART_Init+0x4c>)
 80016b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016be:	4b0e      	ldr	r3, [pc, #56]	@ (80016f8 <MX_USART1_UART_Init+0x4c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <MX_USART1_UART_Init+0x4c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ca:	4b0b      	ldr	r3, [pc, #44]	@ (80016f8 <MX_USART1_UART_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016d0:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <MX_USART1_UART_Init+0x4c>)
 80016d2:	220c      	movs	r2, #12
 80016d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d6:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <MX_USART1_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <MX_USART1_UART_Init+0x4c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016e2:	4805      	ldr	r0, [pc, #20]	@ (80016f8 <MX_USART1_UART_Init+0x4c>)
 80016e4:	f006 f814 	bl	8007710 <HAL_UART_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016ee:	f000 ff9b 	bl	8002628 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20001204 	.word	0x20001204
 80016fc:	40013800 	.word	0x40013800

08001700 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <MX_DMA_Init+0x48>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	4a0f      	ldr	r2, [pc, #60]	@ (8001748 <MX_DMA_Init+0x48>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6153      	str	r3, [r2, #20]
 8001712:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <MX_DMA_Init+0x48>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2105      	movs	r1, #5
 8001722:	200e      	movs	r0, #14
 8001724:	f002 fdfd 	bl	8004322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001728:	200e      	movs	r0, #14
 800172a:	f002 fe16 	bl	800435a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2105      	movs	r1, #5
 8001732:	2010      	movs	r0, #16
 8001734:	f002 fdf5 	bl	8004322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001738:	2010      	movs	r0, #16
 800173a:	f002 fe0e 	bl	800435a <HAL_NVIC_EnableIRQ>

}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000

0800174c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001752:	f107 0310 	add.w	r3, r7, #16
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001760:	4b4c      	ldr	r3, [pc, #304]	@ (8001894 <MX_GPIO_Init+0x148>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4a4b      	ldr	r2, [pc, #300]	@ (8001894 <MX_GPIO_Init+0x148>)
 8001766:	f043 0310 	orr.w	r3, r3, #16
 800176a:	6193      	str	r3, [r2, #24]
 800176c:	4b49      	ldr	r3, [pc, #292]	@ (8001894 <MX_GPIO_Init+0x148>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001778:	4b46      	ldr	r3, [pc, #280]	@ (8001894 <MX_GPIO_Init+0x148>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a45      	ldr	r2, [pc, #276]	@ (8001894 <MX_GPIO_Init+0x148>)
 800177e:	f043 0320 	orr.w	r3, r3, #32
 8001782:	6193      	str	r3, [r2, #24]
 8001784:	4b43      	ldr	r3, [pc, #268]	@ (8001894 <MX_GPIO_Init+0x148>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f003 0320 	and.w	r3, r3, #32
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001790:	4b40      	ldr	r3, [pc, #256]	@ (8001894 <MX_GPIO_Init+0x148>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	4a3f      	ldr	r2, [pc, #252]	@ (8001894 <MX_GPIO_Init+0x148>)
 8001796:	f043 0304 	orr.w	r3, r3, #4
 800179a:	6193      	str	r3, [r2, #24]
 800179c:	4b3d      	ldr	r3, [pc, #244]	@ (8001894 <MX_GPIO_Init+0x148>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001894 <MX_GPIO_Init+0x148>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a39      	ldr	r2, [pc, #228]	@ (8001894 <MX_GPIO_Init+0x148>)
 80017ae:	f043 0308 	orr.w	r3, r3, #8
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b37      	ldr	r3, [pc, #220]	@ (8001894 <MX_GPIO_Init+0x148>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	603b      	str	r3, [r7, #0]
 80017be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017c6:	4834      	ldr	r0, [pc, #208]	@ (8001898 <MX_GPIO_Init+0x14c>)
 80017c8:	f003 f9d7 	bl	8004b7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80017cc:	2200      	movs	r2, #0
 80017ce:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 80017d2:	4832      	ldr	r0, [pc, #200]	@ (800189c <MX_GPIO_Init+0x150>)
 80017d4:	f003 f9d1 	bl	8004b7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	f44f 4118 	mov.w	r1, #38912	@ 0x9800
 80017de:	4830      	ldr	r0, [pc, #192]	@ (80018a0 <MX_GPIO_Init+0x154>)
 80017e0:	f003 f9cb 	bl	8004b7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2302      	movs	r3, #2
 80017f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f6:	f107 0310 	add.w	r3, r7, #16
 80017fa:	4619      	mov	r1, r3
 80017fc:	4826      	ldr	r0, [pc, #152]	@ (8001898 <MX_GPIO_Init+0x14c>)
 80017fe:	f003 f821 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001802:	2303      	movs	r3, #3
 8001804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800180a:	2301      	movs	r3, #1
 800180c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 0310 	add.w	r3, r7, #16
 8001812:	4619      	mov	r1, r3
 8001814:	4822      	ldr	r0, [pc, #136]	@ (80018a0 <MX_GPIO_Init+0x154>)
 8001816:	f003 f815 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800181a:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 800181e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	2301      	movs	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2302      	movs	r3, #2
 800182a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	4619      	mov	r1, r3
 8001832:	481a      	ldr	r0, [pc, #104]	@ (800189c <MX_GPIO_Init+0x150>)
 8001834:	f003 f806 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001838:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800183c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001842:	2302      	movs	r3, #2
 8001844:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	4619      	mov	r1, r3
 800184c:	4813      	ldr	r0, [pc, #76]	@ (800189c <MX_GPIO_Init+0x150>)
 800184e:	f002 fff9 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001852:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800185c:	2301      	movs	r3, #1
 800185e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	4619      	mov	r1, r3
 8001866:	480d      	ldr	r0, [pc, #52]	@ (800189c <MX_GPIO_Init+0x150>)
 8001868:	f002 ffec 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 800186c:	f44f 4318 	mov.w	r3, #38912	@ 0x9800
 8001870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2302      	movs	r3, #2
 800187c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	4619      	mov	r1, r3
 8001884:	4806      	ldr	r0, [pc, #24]	@ (80018a0 <MX_GPIO_Init+0x154>)
 8001886:	f002 ffdd 	bl	8004844 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800188a:	bf00      	nop
 800188c:	3720      	adds	r7, #32
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000
 8001898:	40011000 	.word	0x40011000
 800189c:	40010c00 	.word	0x40010c00
 80018a0:	40010800 	.word	0x40010800

080018a4 <callback_in>:

/* USER CODE BEGIN 4 */


void callback_in(int tag) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	switch (tag) {
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d82d      	bhi.n	800190e <callback_in+0x6a>
 80018b2:	a201      	add	r2, pc, #4	@ (adr r2, 80018b8 <callback_in+0x14>)
 80018b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b8:	080018cd 	.word	0x080018cd
 80018bc:	080018db 	.word	0x080018db
 80018c0:	080018e9 	.word	0x080018e9
 80018c4:	080018f7 	.word	0x080018f7
 80018c8:	08001903 	.word	0x08001903
	case 0:
		HAL_GPIO_WritePin(PIN0, GPIO_PIN_SET);
 80018cc:	2201      	movs	r2, #1
 80018ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018d2:	4814      	ldr	r0, [pc, #80]	@ (8001924 <callback_in+0x80>)
 80018d4:	f003 f951 	bl	8004b7a <HAL_GPIO_WritePin>
		break;
 80018d8:	e020      	b.n	800191c <callback_in+0x78>
	case 1:
		HAL_GPIO_WritePin(PIN1, GPIO_PIN_SET);
 80018da:	2201      	movs	r2, #1
 80018dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018e0:	4810      	ldr	r0, [pc, #64]	@ (8001924 <callback_in+0x80>)
 80018e2:	f003 f94a 	bl	8004b7a <HAL_GPIO_WritePin>
		break;
 80018e6:	e019      	b.n	800191c <callback_in+0x78>
	case 2:
		HAL_GPIO_WritePin(PIN2, GPIO_PIN_SET);
 80018e8:	2201      	movs	r2, #1
 80018ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018ee:	480d      	ldr	r0, [pc, #52]	@ (8001924 <callback_in+0x80>)
 80018f0:	f003 f943 	bl	8004b7a <HAL_GPIO_WritePin>
		break;
 80018f4:	e012      	b.n	800191c <callback_in+0x78>
	case 3:
		HAL_GPIO_WritePin(PIN3, GPIO_PIN_SET);
 80018f6:	2201      	movs	r2, #1
 80018f8:	2108      	movs	r1, #8
 80018fa:	480b      	ldr	r0, [pc, #44]	@ (8001928 <callback_in+0x84>)
 80018fc:	f003 f93d 	bl	8004b7a <HAL_GPIO_WritePin>
		break;
 8001900:	e00c      	b.n	800191c <callback_in+0x78>
	case 4:
		HAL_GPIO_WritePin(PIN4, GPIO_PIN_SET);
 8001902:	2201      	movs	r2, #1
 8001904:	2110      	movs	r1, #16
 8001906:	4808      	ldr	r0, [pc, #32]	@ (8001928 <callback_in+0x84>)
 8001908:	f003 f937 	bl	8004b7a <HAL_GPIO_WritePin>
		break;
 800190c:	e006      	b.n	800191c <callback_in+0x78>
	default:
		HAL_GPIO_WritePin(PIN0, GPIO_PIN_SET);
 800190e:	2201      	movs	r2, #1
 8001910:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001914:	4803      	ldr	r0, [pc, #12]	@ (8001924 <callback_in+0x80>)
 8001916:	f003 f930 	bl	8004b7a <HAL_GPIO_WritePin>
		break;
 800191a:	bf00      	nop
	}
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40010800 	.word	0x40010800
 8001928:	40010c00 	.word	0x40010c00

0800192c <callback_out>:

void callback_out(int tag) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	switch (tag) {
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b04      	cmp	r3, #4
 8001938:	d82d      	bhi.n	8001996 <callback_out+0x6a>
 800193a:	a201      	add	r2, pc, #4	@ (adr r2, 8001940 <callback_out+0x14>)
 800193c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001940:	08001955 	.word	0x08001955
 8001944:	08001963 	.word	0x08001963
 8001948:	08001971 	.word	0x08001971
 800194c:	0800197f 	.word	0x0800197f
 8001950:	0800198b 	.word	0x0800198b
	case 0:
		HAL_GPIO_WritePin(PIN0, GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800195a:	4814      	ldr	r0, [pc, #80]	@ (80019ac <callback_out+0x80>)
 800195c:	f003 f90d 	bl	8004b7a <HAL_GPIO_WritePin>
		break;
 8001960:	e020      	b.n	80019a4 <callback_out+0x78>
	case 1:
		HAL_GPIO_WritePin(PIN1, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001968:	4810      	ldr	r0, [pc, #64]	@ (80019ac <callback_out+0x80>)
 800196a:	f003 f906 	bl	8004b7a <HAL_GPIO_WritePin>
		break;
 800196e:	e019      	b.n	80019a4 <callback_out+0x78>
	case 2:
		HAL_GPIO_WritePin(PIN2, GPIO_PIN_RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001976:	480d      	ldr	r0, [pc, #52]	@ (80019ac <callback_out+0x80>)
 8001978:	f003 f8ff 	bl	8004b7a <HAL_GPIO_WritePin>
		break;
 800197c:	e012      	b.n	80019a4 <callback_out+0x78>
	case 3:
		HAL_GPIO_WritePin(PIN3, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	2108      	movs	r1, #8
 8001982:	480b      	ldr	r0, [pc, #44]	@ (80019b0 <callback_out+0x84>)
 8001984:	f003 f8f9 	bl	8004b7a <HAL_GPIO_WritePin>
		break;
 8001988:	e00c      	b.n	80019a4 <callback_out+0x78>
	case 4:
		HAL_GPIO_WritePin(PIN4, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	2110      	movs	r1, #16
 800198e:	4808      	ldr	r0, [pc, #32]	@ (80019b0 <callback_out+0x84>)
 8001990:	f003 f8f3 	bl	8004b7a <HAL_GPIO_WritePin>
		break;
 8001994:	e006      	b.n	80019a4 <callback_out+0x78>
	default:
		HAL_GPIO_WritePin(PIN0, GPIO_PIN_RESET);
 8001996:	2200      	movs	r2, #0
 8001998:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800199c:	4803      	ldr	r0, [pc, #12]	@ (80019ac <callback_out+0x80>)
 800199e:	f003 f8ec 	bl	8004b7a <HAL_GPIO_WritePin>
		break;
 80019a2:	bf00      	nop
	}
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40010800 	.word	0x40010800
 80019b0:	40010c00 	.word	0x40010c00

080019b4 <action>:
		}
	//}
	//muestra_vieja=adc_buffer[250];
}*/

void action(state_t dsp){
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b095      	sub	sp, #84	@ 0x54
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
	int AMPL_ONDA=0;
 80019be:	2300      	movs	r3, #0
 80019c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int AMPL_CURSOR=0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	63bb      	str	r3, [r7, #56]	@ 0x38
	int FREC_ONDA=0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	637b      	str	r3, [r7, #52]	@ 0x34
	int FREC_CURSOR=0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	633b      	str	r3, [r7, #48]	@ 0x30
	char buffer_char[10];
	switch(dsp){
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2b06      	cmp	r3, #6
 80019d2:	f200 8275 	bhi.w	8001ec0 <action+0x50c>
 80019d6:	a201      	add	r2, pc, #4	@ (adr r2, 80019dc <action+0x28>)
 80019d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019dc:	080019f9 	.word	0x080019f9
 80019e0:	08001a5d 	.word	0x08001a5d
 80019e4:	08001b4f 	.word	0x08001b4f
 80019e8:	08001ba9 	.word	0x08001ba9
 80019ec:	08001c03 	.word	0x08001c03
 80019f0:	08001c95 	.word	0x08001c95
 80019f4:	08001ddf 	.word	0x08001ddf
	case display_init:
		SSD1306_GotoXY(0,0);
 80019f8:	2100      	movs	r1, #0
 80019fa:	2000      	movs	r0, #0
 80019fc:	f000 ff82 	bl	8002904 <SSD1306_GotoXY>
		SSD1306_DrawFilledRectangle(2, 2, 124, 60, SSD1306_COLOR_WHITE);
 8001a00:	2301      	movs	r3, #1
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	233c      	movs	r3, #60	@ 0x3c
 8001a06:	227c      	movs	r2, #124	@ 0x7c
 8001a08:	2102      	movs	r1, #2
 8001a0a:	2002      	movs	r0, #2
 8001a0c:	f001 f92e 	bl	8002c6c <SSD1306_DrawFilledRectangle>
		SSD1306_DrawFilledRectangle(4, 4, 120, 56, SSD1306_COLOR_BLACK);
 8001a10:	2300      	movs	r3, #0
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2338      	movs	r3, #56	@ 0x38
 8001a16:	2278      	movs	r2, #120	@ 0x78
 8001a18:	2104      	movs	r1, #4
 8001a1a:	2004      	movs	r0, #4
 8001a1c:	f001 f926 	bl	8002c6c <SSD1306_DrawFilledRectangle>
		SSD1306_GotoXY(6, 9);
 8001a20:	2109      	movs	r1, #9
 8001a22:	2006      	movs	r0, #6
 8001a24:	f000 ff6e 	bl	8002904 <SSD1306_GotoXY>
		SSD1306_Puts("Analizador", &Font_11x18, SSD1306_COLOR_WHITE);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	498c      	ldr	r1, [pc, #560]	@ (8001c5c <action+0x2a8>)
 8001a2c:	488c      	ldr	r0, [pc, #560]	@ (8001c60 <action+0x2ac>)
 8001a2e:	f000 fffd 	bl	8002a2c <SSD1306_Puts>
		SSD1306_GotoXY(20, 25);
 8001a32:	2119      	movs	r1, #25
 8001a34:	2014      	movs	r0, #20
 8001a36:	f000 ff65 	bl	8002904 <SSD1306_GotoXY>
		SSD1306_Puts("espectral", &Font_11x18, SSD1306_COLOR_WHITE);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4987      	ldr	r1, [pc, #540]	@ (8001c5c <action+0x2a8>)
 8001a3e:	4889      	ldr	r0, [pc, #548]	@ (8001c64 <action+0x2b0>)
 8001a40:	f000 fff4 	bl	8002a2c <SSD1306_Puts>
		SSD1306_GotoXY(6, 50);
 8001a44:	2132      	movs	r1, #50	@ 0x32
 8001a46:	2006      	movs	r0, #6
 8001a48:	f000 ff5c 	bl	8002904 <SSD1306_GotoXY>
		SSD1306_Puts("->Ir a display 1", &Font_7x10, SSD1306_COLOR_WHITE);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4986      	ldr	r1, [pc, #536]	@ (8001c68 <action+0x2b4>)
 8001a50:	4886      	ldr	r0, [pc, #536]	@ (8001c6c <action+0x2b8>)
 8001a52:	f000 ffeb 	bl	8002a2c <SSD1306_Puts>

		SSD1306_UpdateScreen();
 8001a56:	f000 feb1 	bl	80027bc <SSD1306_UpdateScreen>
		break;
 8001a5a:	e232      	b.n	8001ec2 <action+0x50e>
	case display1:
		for(uint16_t i=0;i<ADC_BUFFER_SIZE;i++){
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001a62:	e03f      	b.n	8001ae4 <action+0x130>
			p_buffer[i]=(uint32_t)(sqrt((FFT_buffer[i].real*FFT_buffer[i].real)+(FFT_buffer[i].imag*FFT_buffer[i].imag)));
 8001a64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001a68:	4a81      	ldr	r2, [pc, #516]	@ (8001c70 <action+0x2bc>)
 8001a6a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001a6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001a72:	497f      	ldr	r1, [pc, #508]	@ (8001c70 <action+0x2bc>)
 8001a74:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	f7ff f97a 	bl	8000d74 <__aeabi_fmul>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461c      	mov	r4, r3
 8001a84:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001a88:	4a79      	ldr	r2, [pc, #484]	@ (8001c70 <action+0x2bc>)
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001a94:	4976      	ldr	r1, [pc, #472]	@ (8001c70 <action+0x2bc>)
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	440b      	add	r3, r1
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	f7ff f968 	bl	8000d74 <__aeabi_fmul>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7ff f85b 	bl	8000b64 <__addsf3>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fcb1 	bl	8000418 <__aeabi_f2d>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f009 fe65 	bl	800b78c <sqrt>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	f8b7 4046 	ldrh.w	r4, [r7, #70]	@ 0x46
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7fe ffd3 	bl	8000a78 <__aeabi_d2uiz>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4a67      	ldr	r2, [pc, #412]	@ (8001c74 <action+0x2c0>)
 8001ad6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		for(uint16_t i=0;i<ADC_BUFFER_SIZE;i++){
 8001ada:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001ae4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001ae8:	2bff      	cmp	r3, #255	@ 0xff
 8001aea:	d9bb      	bls.n	8001a64 <action+0xb0>
		}
		FREC_CURSOR=500*x/128;
 8001aec:	4b62      	ldr	r3, [pc, #392]	@ (8001c78 <action+0x2c4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001af4:	fb02 f303 	mul.w	r3, r2, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	da00      	bge.n	8001afe <action+0x14a>
 8001afc:	337f      	adds	r3, #127	@ 0x7f
 8001afe:	11db      	asrs	r3, r3, #7
 8001b00:	633b      	str	r3, [r7, #48]	@ 0x30
		AMPL_CURSOR=1650*p_buffer[x]/350;
 8001b02:	4b5d      	ldr	r3, [pc, #372]	@ (8001c78 <action+0x2c4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a5b      	ldr	r2, [pc, #364]	@ (8001c74 <action+0x2c0>)
 8001b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0c:	f240 6272 	movw	r2, #1650	@ 0x672
 8001b10:	fb02 f303 	mul.w	r3, r2, r3
 8001b14:	4a59      	ldr	r2, [pc, #356]	@ (8001c7c <action+0x2c8>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	09db      	lsrs	r3, r3, #7
 8001b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
		PrintBufferAsGraph(p_buffer,ADC_BUFFER_SIZE,AMPL_CURSOR,FREC_CURSOR,&xmax);
 8001b1e:	4b58      	ldr	r3, [pc, #352]	@ (8001c80 <action+0x2cc>)
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b2a:	4852      	ldr	r0, [pc, #328]	@ (8001c74 <action+0x2c0>)
 8001b2c:	f001 fc9c 	bl	8003468 <PrintBufferAsGraph>
		SSD1306_DrawLine(x,0,x,63,SSD1306_COLOR_WHITE);
 8001b30:	4b51      	ldr	r3, [pc, #324]	@ (8001c78 <action+0x2c4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	b298      	uxth	r0, r3
 8001b36:	4b50      	ldr	r3, [pc, #320]	@ (8001c78 <action+0x2c4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	233f      	movs	r3, #63	@ 0x3f
 8001b42:	2100      	movs	r1, #0
 8001b44:	f000 ff97 	bl	8002a76 <SSD1306_DrawLine>
		SSD1306_UpdateScreen();
 8001b48:	f000 fe38 	bl	80027bc <SSD1306_UpdateScreen>

	break;
 8001b4c:	e1b9      	b.n	8001ec2 <action+0x50e>
	case display2A:
			  SSD1306_GotoXY(0, 0);
 8001b4e:	2100      	movs	r1, #0
 8001b50:	2000      	movs	r0, #0
 8001b52:	f000 fed7 	bl	8002904 <SSD1306_GotoXY>
			  SSD1306_Puts("pantalla2", &Font_7x10, SSD1306_COLOR_WHITE);
 8001b56:	2201      	movs	r2, #1
 8001b58:	4943      	ldr	r1, [pc, #268]	@ (8001c68 <action+0x2b4>)
 8001b5a:	484a      	ldr	r0, [pc, #296]	@ (8001c84 <action+0x2d0>)
 8001b5c:	f000 ff66 	bl	8002a2c <SSD1306_Puts>

			  SSD1306_DrawFilledRectangle(0, 20, 100, 10, SSD1306_COLOR_WHITE);
 8001b60:	2301      	movs	r3, #1
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	230a      	movs	r3, #10
 8001b66:	2264      	movs	r2, #100	@ 0x64
 8001b68:	2114      	movs	r1, #20
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f001 f87e 	bl	8002c6c <SSD1306_DrawFilledRectangle>
			  SSD1306_GotoXY(0, 20);
 8001b70:	2114      	movs	r1, #20
 8001b72:	2000      	movs	r0, #0
 8001b74:	f000 fec6 	bl	8002904 <SSD1306_GotoXY>
			  SSD1306_Puts("Amplitud", &Font_7x10, SSD1306_COLOR_BLACK);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	493b      	ldr	r1, [pc, #236]	@ (8001c68 <action+0x2b4>)
 8001b7c:	4842      	ldr	r0, [pc, #264]	@ (8001c88 <action+0x2d4>)
 8001b7e:	f000 ff55 	bl	8002a2c <SSD1306_Puts>
			  SSD1306_GotoXY(0, 30);
 8001b82:	211e      	movs	r1, #30
 8001b84:	2000      	movs	r0, #0
 8001b86:	f000 febd 	bl	8002904 <SSD1306_GotoXY>
			  SSD1306_Puts("Frecuencia", &Font_7x10, SSD1306_COLOR_WHITE);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4936      	ldr	r1, [pc, #216]	@ (8001c68 <action+0x2b4>)
 8001b8e:	483f      	ldr	r0, [pc, #252]	@ (8001c8c <action+0x2d8>)
 8001b90:	f000 ff4c 	bl	8002a2c <SSD1306_Puts>
			  SSD1306_GotoXY(0, 40);
 8001b94:	2128      	movs	r1, #40	@ 0x28
 8001b96:	2000      	movs	r0, #0
 8001b98:	f000 feb4 	bl	8002904 <SSD1306_GotoXY>
			  SSD1306_Puts("Cursor", &Font_7x10, SSD1306_COLOR_WHITE);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4932      	ldr	r1, [pc, #200]	@ (8001c68 <action+0x2b4>)
 8001ba0:	483b      	ldr	r0, [pc, #236]	@ (8001c90 <action+0x2dc>)
 8001ba2:	f000 ff43 	bl	8002a2c <SSD1306_Puts>
			  break;
 8001ba6:	e18c      	b.n	8001ec2 <action+0x50e>
	case display2B:
			  SSD1306_GotoXY(0, 0);
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2000      	movs	r0, #0
 8001bac:	f000 feaa 	bl	8002904 <SSD1306_GotoXY>
			  SSD1306_Puts("pantalla2", &Font_7x10, SSD1306_COLOR_WHITE);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	492d      	ldr	r1, [pc, #180]	@ (8001c68 <action+0x2b4>)
 8001bb4:	4833      	ldr	r0, [pc, #204]	@ (8001c84 <action+0x2d0>)
 8001bb6:	f000 ff39 	bl	8002a2c <SSD1306_Puts>

			  SSD1306_DrawFilledRectangle(0, 30, 100, 10, SSD1306_COLOR_WHITE);
 8001bba:	2301      	movs	r3, #1
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	2264      	movs	r2, #100	@ 0x64
 8001bc2:	211e      	movs	r1, #30
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f001 f851 	bl	8002c6c <SSD1306_DrawFilledRectangle>
			  SSD1306_GotoXY(0, 20);
 8001bca:	2114      	movs	r1, #20
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f000 fe99 	bl	8002904 <SSD1306_GotoXY>
			  SSD1306_Puts("Amplitud", &Font_7x10, SSD1306_COLOR_WHITE);
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	4924      	ldr	r1, [pc, #144]	@ (8001c68 <action+0x2b4>)
 8001bd6:	482c      	ldr	r0, [pc, #176]	@ (8001c88 <action+0x2d4>)
 8001bd8:	f000 ff28 	bl	8002a2c <SSD1306_Puts>
			  SSD1306_GotoXY(0, 30);
 8001bdc:	211e      	movs	r1, #30
 8001bde:	2000      	movs	r0, #0
 8001be0:	f000 fe90 	bl	8002904 <SSD1306_GotoXY>
			  SSD1306_Puts("Frecuencia", &Font_7x10, SSD1306_COLOR_BLACK);
 8001be4:	2200      	movs	r2, #0
 8001be6:	4920      	ldr	r1, [pc, #128]	@ (8001c68 <action+0x2b4>)
 8001be8:	4828      	ldr	r0, [pc, #160]	@ (8001c8c <action+0x2d8>)
 8001bea:	f000 ff1f 	bl	8002a2c <SSD1306_Puts>
			  SSD1306_GotoXY(0, 40);
 8001bee:	2128      	movs	r1, #40	@ 0x28
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f000 fe87 	bl	8002904 <SSD1306_GotoXY>
			  SSD1306_Puts("Cursor", &Font_7x10, SSD1306_COLOR_WHITE);
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	491b      	ldr	r1, [pc, #108]	@ (8001c68 <action+0x2b4>)
 8001bfa:	4825      	ldr	r0, [pc, #148]	@ (8001c90 <action+0x2dc>)
 8001bfc:	f000 ff16 	bl	8002a2c <SSD1306_Puts>
			  break;
 8001c00:	e15f      	b.n	8001ec2 <action+0x50e>
	case display2C:
			  SSD1306_GotoXY(0, 0);
 8001c02:	2100      	movs	r1, #0
 8001c04:	2000      	movs	r0, #0
 8001c06:	f000 fe7d 	bl	8002904 <SSD1306_GotoXY>
			  SSD1306_Puts("pantalla2", &Font_7x10, SSD1306_COLOR_WHITE);
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	4916      	ldr	r1, [pc, #88]	@ (8001c68 <action+0x2b4>)
 8001c0e:	481d      	ldr	r0, [pc, #116]	@ (8001c84 <action+0x2d0>)
 8001c10:	f000 ff0c 	bl	8002a2c <SSD1306_Puts>
			  SSD1306_DrawFilledRectangle(0, 40, 100, 10, SSD1306_COLOR_WHITE);
 8001c14:	2301      	movs	r3, #1
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	230a      	movs	r3, #10
 8001c1a:	2264      	movs	r2, #100	@ 0x64
 8001c1c:	2128      	movs	r1, #40	@ 0x28
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f001 f824 	bl	8002c6c <SSD1306_DrawFilledRectangle>
			  SSD1306_GotoXY(0, 20);
 8001c24:	2114      	movs	r1, #20
 8001c26:	2000      	movs	r0, #0
 8001c28:	f000 fe6c 	bl	8002904 <SSD1306_GotoXY>
			  SSD1306_Puts("Amplitud", &Font_7x10, SSD1306_COLOR_WHITE);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	490e      	ldr	r1, [pc, #56]	@ (8001c68 <action+0x2b4>)
 8001c30:	4815      	ldr	r0, [pc, #84]	@ (8001c88 <action+0x2d4>)
 8001c32:	f000 fefb 	bl	8002a2c <SSD1306_Puts>
			  SSD1306_GotoXY(0, 30);
 8001c36:	211e      	movs	r1, #30
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f000 fe63 	bl	8002904 <SSD1306_GotoXY>
			  SSD1306_Puts("Frecuencia", &Font_7x10, SSD1306_COLOR_WHITE);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4909      	ldr	r1, [pc, #36]	@ (8001c68 <action+0x2b4>)
 8001c42:	4812      	ldr	r0, [pc, #72]	@ (8001c8c <action+0x2d8>)
 8001c44:	f000 fef2 	bl	8002a2c <SSD1306_Puts>
			  SSD1306_GotoXY(0, 40);
 8001c48:	2128      	movs	r1, #40	@ 0x28
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f000 fe5a 	bl	8002904 <SSD1306_GotoXY>
			  SSD1306_Puts("Cursor", &Font_7x10, SSD1306_COLOR_BLACK);
 8001c50:	2200      	movs	r2, #0
 8001c52:	4905      	ldr	r1, [pc, #20]	@ (8001c68 <action+0x2b4>)
 8001c54:	480e      	ldr	r0, [pc, #56]	@ (8001c90 <action+0x2dc>)
 8001c56:	f000 fee9 	bl	8002a2c <SSD1306_Puts>
			  break;
 8001c5a:	e132      	b.n	8001ec2 <action+0x50e>
 8001c5c:	20001008 	.word	0x20001008
 8001c60:	0800c990 	.word	0x0800c990
 8001c64:	0800c99c 	.word	0x0800c99c
 8001c68:	20001000 	.word	0x20001000
 8001c6c:	0800c9a8 	.word	0x0800c9a8
 8001c70:	200018b4 	.word	0x200018b4
 8001c74:	200014b4 	.word	0x200014b4
 8001c78:	200012a4 	.word	0x200012a4
 8001c7c:	5d9f7391 	.word	0x5d9f7391
 8001c80:	200012a8 	.word	0x200012a8
 8001c84:	0800c9bc 	.word	0x0800c9bc
 8001c88:	0800c9c8 	.word	0x0800c9c8
 8001c8c:	0800c9d4 	.word	0x0800c9d4
 8001c90:	0800c9e0 	.word	0x0800c9e0
	case display3:
		FREC_CURSOR=500*x/128;
 8001c94:	4b8d      	ldr	r3, [pc, #564]	@ (8001ecc <action+0x518>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001c9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	da00      	bge.n	8001ca6 <action+0x2f2>
 8001ca4:	337f      	adds	r3, #127	@ 0x7f
 8001ca6:	11db      	asrs	r3, r3, #7
 8001ca8:	633b      	str	r3, [r7, #48]	@ 0x30
		AMPL_CURSOR=1650*p_buffer[x]/350;
 8001caa:	4b88      	ldr	r3, [pc, #544]	@ (8001ecc <action+0x518>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a88      	ldr	r2, [pc, #544]	@ (8001ed0 <action+0x51c>)
 8001cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb4:	f240 6272 	movw	r2, #1650	@ 0x672
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	4a85      	ldr	r2, [pc, #532]	@ (8001ed4 <action+0x520>)
 8001cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc2:	09db      	lsrs	r3, r3, #7
 8001cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
		AMPL_ONDA=1650*p_buffer[xmax]/350;
 8001cc6:	4b84      	ldr	r3, [pc, #528]	@ (8001ed8 <action+0x524>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b80      	ldr	r3, [pc, #512]	@ (8001ed0 <action+0x51c>)
 8001cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd2:	f240 6272 	movw	r2, #1650	@ 0x672
 8001cd6:	fb02 f303 	mul.w	r3, r2, r3
 8001cda:	4a7e      	ldr	r2, [pc, #504]	@ (8001ed4 <action+0x520>)
 8001cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce0:	09db      	lsrs	r3, r3, #7
 8001ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		FREC_ONDA=500*xmax/128;
 8001ce4:	4b7c      	ldr	r3, [pc, #496]	@ (8001ed8 <action+0x524>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	da00      	bge.n	8001cf8 <action+0x344>
 8001cf6:	337f      	adds	r3, #127	@ 0x7f
 8001cf8:	11db      	asrs	r3, r3, #7
 8001cfa:	637b      	str	r3, [r7, #52]	@ 0x34

		ImprimirLinea("display 3:",1);
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	4877      	ldr	r0, [pc, #476]	@ (8001edc <action+0x528>)
 8001d00:	f001 fc3e 	bl	8003580 <ImprimirLinea>
		SSD1306_GotoXY(0, 20);
 8001d04:	2114      	movs	r1, #20
 8001d06:	2000      	movs	r0, #0
 8001d08:	f000 fdfc 	bl	8002904 <SSD1306_GotoXY>
		SSD1306_Puts("AMPL Onda       ", &Font_7x10, SSD1306_COLOR_WHITE);
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4974      	ldr	r1, [pc, #464]	@ (8001ee0 <action+0x52c>)
 8001d10:	4874      	ldr	r0, [pc, #464]	@ (8001ee4 <action+0x530>)
 8001d12:	f000 fe8b 	bl	8002a2c <SSD1306_Puts>
		SSD1306_GotoXY(80, 20);
 8001d16:	2114      	movs	r1, #20
 8001d18:	2050      	movs	r0, #80	@ 0x50
 8001d1a:	f000 fdf3 	bl	8002904 <SSD1306_GotoXY>
		sprintf(buffer_char, "%dmV ", AMPL_ONDA);
 8001d1e:	f107 0320 	add.w	r3, r7, #32
 8001d22:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d24:	4970      	ldr	r1, [pc, #448]	@ (8001ee8 <action+0x534>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f009 f82a 	bl	800ad80 <siprintf>
		SSD1306_Puts(buffer_char, &Font_7x10, SSD1306_COLOR_BLACK);
 8001d2c:	f107 0320 	add.w	r3, r7, #32
 8001d30:	2200      	movs	r2, #0
 8001d32:	496b      	ldr	r1, [pc, #428]	@ (8001ee0 <action+0x52c>)
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 fe79 	bl	8002a2c <SSD1306_Puts>

		SSD1306_GotoXY(0, 30);
 8001d3a:	211e      	movs	r1, #30
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f000 fde1 	bl	8002904 <SSD1306_GotoXY>
		SSD1306_Puts("FREC Onda     ", &Font_7x10, SSD1306_COLOR_WHITE);
 8001d42:	2201      	movs	r2, #1
 8001d44:	4966      	ldr	r1, [pc, #408]	@ (8001ee0 <action+0x52c>)
 8001d46:	4869      	ldr	r0, [pc, #420]	@ (8001eec <action+0x538>)
 8001d48:	f000 fe70 	bl	8002a2c <SSD1306_Puts>
		SSD1306_GotoXY(80, 30);
 8001d4c:	211e      	movs	r1, #30
 8001d4e:	2050      	movs	r0, #80	@ 0x50
 8001d50:	f000 fdd8 	bl	8002904 <SSD1306_GotoXY>
		sprintf(buffer_char, "%d Hz",FREC_ONDA);
 8001d54:	f107 0320 	add.w	r3, r7, #32
 8001d58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d5a:	4965      	ldr	r1, [pc, #404]	@ (8001ef0 <action+0x53c>)
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f009 f80f 	bl	800ad80 <siprintf>
		SSD1306_Puts(buffer_char, &Font_7x10, SSD1306_COLOR_BLACK);
 8001d62:	f107 0320 	add.w	r3, r7, #32
 8001d66:	2200      	movs	r2, #0
 8001d68:	495d      	ldr	r1, [pc, #372]	@ (8001ee0 <action+0x52c>)
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 fe5e 	bl	8002a2c <SSD1306_Puts>

		SSD1306_GotoXY(0, 40);
 8001d70:	2128      	movs	r1, #40	@ 0x28
 8001d72:	2000      	movs	r0, #0
 8001d74:	f000 fdc6 	bl	8002904 <SSD1306_GotoXY>
		SSD1306_Puts("AMPL Cursor  ", &Font_7x10, SSD1306_COLOR_WHITE);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4959      	ldr	r1, [pc, #356]	@ (8001ee0 <action+0x52c>)
 8001d7c:	485d      	ldr	r0, [pc, #372]	@ (8001ef4 <action+0x540>)
 8001d7e:	f000 fe55 	bl	8002a2c <SSD1306_Puts>
		SSD1306_GotoXY(80, 40);
 8001d82:	2128      	movs	r1, #40	@ 0x28
 8001d84:	2050      	movs	r0, #80	@ 0x50
 8001d86:	f000 fdbd 	bl	8002904 <SSD1306_GotoXY>
		sprintf(buffer_char, "%dmV ", AMPL_CURSOR);
 8001d8a:	f107 0320 	add.w	r3, r7, #32
 8001d8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d90:	4955      	ldr	r1, [pc, #340]	@ (8001ee8 <action+0x534>)
 8001d92:	4618      	mov	r0, r3
 8001d94:	f008 fff4 	bl	800ad80 <siprintf>
		SSD1306_Puts(buffer_char, &Font_7x10, SSD1306_COLOR_BLACK);
 8001d98:	f107 0320 	add.w	r3, r7, #32
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	4950      	ldr	r1, [pc, #320]	@ (8001ee0 <action+0x52c>)
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fe43 	bl	8002a2c <SSD1306_Puts>

		SSD1306_GotoXY(0, 50);
 8001da6:	2132      	movs	r1, #50	@ 0x32
 8001da8:	2000      	movs	r0, #0
 8001daa:	f000 fdab 	bl	8002904 <SSD1306_GotoXY>
		SSD1306_Puts("FREC Cursor  ", &Font_7x10, SSD1306_COLOR_WHITE);
 8001dae:	2201      	movs	r2, #1
 8001db0:	494b      	ldr	r1, [pc, #300]	@ (8001ee0 <action+0x52c>)
 8001db2:	4851      	ldr	r0, [pc, #324]	@ (8001ef8 <action+0x544>)
 8001db4:	f000 fe3a 	bl	8002a2c <SSD1306_Puts>
		SSD1306_GotoXY(80, 50);
 8001db8:	2132      	movs	r1, #50	@ 0x32
 8001dba:	2050      	movs	r0, #80	@ 0x50
 8001dbc:	f000 fda2 	bl	8002904 <SSD1306_GotoXY>
		sprintf(buffer_char, "%d Hz", FREC_CURSOR);
 8001dc0:	f107 0320 	add.w	r3, r7, #32
 8001dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dc6:	494a      	ldr	r1, [pc, #296]	@ (8001ef0 <action+0x53c>)
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f008 ffd9 	bl	800ad80 <siprintf>
		SSD1306_Puts(buffer_char, &Font_7x10, SSD1306_COLOR_BLACK);
 8001dce:	f107 0320 	add.w	r3, r7, #32
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	4942      	ldr	r1, [pc, #264]	@ (8001ee0 <action+0x52c>)
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 fe28 	bl	8002a2c <SSD1306_Puts>
		break;
 8001ddc:	e071      	b.n	8001ec2 <action+0x50e>

	case displayUART:
		taskENTER_CRITICAL();
 8001dde:	f008 fce5 	bl	800a7ac <vPortEnterCritical>
		HAL_TIM_Base_Stop_IT(&htim2);
 8001de2:	4846      	ldr	r0, [pc, #280]	@ (8001efc <action+0x548>)
 8001de4:	f004 fafa 	bl	80063dc <HAL_TIM_Base_Stop_IT>
		for(int i=0;i<ADC_BUFFER_SIZE;i++){
 8001de8:	2300      	movs	r3, #0
 8001dea:	643b      	str	r3, [r7, #64]	@ 0x40
 8001dec:	e05f      	b.n	8001eae <action+0x4fa>
			char datac1[5];
			char datac2[4];
			char datac3[3];
			char datac4[2];
			int datai=(int)1650*p_buffer[i]/350;
 8001dee:	4a38      	ldr	r2, [pc, #224]	@ (8001ed0 <action+0x51c>)
 8001df0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df6:	f240 6272 	movw	r2, #1650	@ 0x672
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	4a35      	ldr	r2, [pc, #212]	@ (8001ed4 <action+0x520>)
 8001e00:	fba2 2303 	umull	r2, r3, r2, r3
 8001e04:	09db      	lsrs	r3, r3, #7
 8001e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(datai>999){
 8001e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e0e:	db0e      	blt.n	8001e2e <action+0x47a>
				sprintf(datac1,"%d,",datai);
 8001e10:	f107 0318 	add.w	r3, r7, #24
 8001e14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e16:	493a      	ldr	r1, [pc, #232]	@ (8001f00 <action+0x54c>)
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f008 ffb1 	bl	800ad80 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)&datac1, sizeof(datac1),HAL_MAX_DELAY);
 8001e1e:	f107 0118 	add.w	r1, r7, #24
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295
 8001e26:	2205      	movs	r2, #5
 8001e28:	4836      	ldr	r0, [pc, #216]	@ (8001f04 <action+0x550>)
 8001e2a:	f005 fcc1 	bl	80077b0 <HAL_UART_Transmit>
			}
			if(datai<1000 && datai>99){
 8001e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e34:	da11      	bge.n	8001e5a <action+0x4a6>
 8001e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e38:	2b63      	cmp	r3, #99	@ 0x63
 8001e3a:	dd0e      	ble.n	8001e5a <action+0x4a6>
				sprintf(datac2,"%d,",datai);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e42:	492f      	ldr	r1, [pc, #188]	@ (8001f00 <action+0x54c>)
 8001e44:	4618      	mov	r0, r3
 8001e46:	f008 ff9b 	bl	800ad80 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)&datac2, sizeof(datac2),HAL_MAX_DELAY);
 8001e4a:	f107 0114 	add.w	r1, r7, #20
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e52:	2204      	movs	r2, #4
 8001e54:	482b      	ldr	r0, [pc, #172]	@ (8001f04 <action+0x550>)
 8001e56:	f005 fcab 	bl	80077b0 <HAL_UART_Transmit>
			}
			if(datai<100 && datai>9){
 8001e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e5c:	2b63      	cmp	r3, #99	@ 0x63
 8001e5e:	dc11      	bgt.n	8001e84 <action+0x4d0>
 8001e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e62:	2b09      	cmp	r3, #9
 8001e64:	dd0e      	ble.n	8001e84 <action+0x4d0>
				sprintf(datac3,"%d,",datai);
 8001e66:	f107 0310 	add.w	r3, r7, #16
 8001e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e6c:	4924      	ldr	r1, [pc, #144]	@ (8001f00 <action+0x54c>)
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f008 ff86 	bl	800ad80 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)&datac3, sizeof(datac3),HAL_MAX_DELAY);
 8001e74:	f107 0110 	add.w	r1, r7, #16
 8001e78:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	4821      	ldr	r0, [pc, #132]	@ (8001f04 <action+0x550>)
 8001e80:	f005 fc96 	bl	80077b0 <HAL_UART_Transmit>
			}
			if(datai<10){
 8001e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e86:	2b09      	cmp	r3, #9
 8001e88:	dc0e      	bgt.n	8001ea8 <action+0x4f4>
				sprintf(datac4,"%d,",datai);
 8001e8a:	f107 030c 	add.w	r3, r7, #12
 8001e8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e90:	491b      	ldr	r1, [pc, #108]	@ (8001f00 <action+0x54c>)
 8001e92:	4618      	mov	r0, r3
 8001e94:	f008 ff74 	bl	800ad80 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)&datac4, sizeof(datac4),HAL_MAX_DELAY);
 8001e98:	f107 010c 	add.w	r1, r7, #12
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	4818      	ldr	r0, [pc, #96]	@ (8001f04 <action+0x550>)
 8001ea4:	f005 fc84 	bl	80077b0 <HAL_UART_Transmit>
		for(int i=0;i<ADC_BUFFER_SIZE;i++){
 8001ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eaa:	3301      	adds	r3, #1
 8001eac:	643b      	str	r3, [r7, #64]	@ 0x40
 8001eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eb0:	2bff      	cmp	r3, #255	@ 0xff
 8001eb2:	dd9c      	ble.n	8001dee <action+0x43a>
			}
		}
		HAL_TIM_Base_Start_IT(&htim2);
 8001eb4:	4811      	ldr	r0, [pc, #68]	@ (8001efc <action+0x548>)
 8001eb6:	f004 fa3f 	bl	8006338 <HAL_TIM_Base_Start_IT>
		taskEXIT_CRITICAL();
 8001eba:	f008 fca7 	bl	800a80c <vPortExitCritical>
		break;
 8001ebe:	e000      	b.n	8001ec2 <action+0x50e>
	default:
		break;
 8001ec0:	bf00      	nop
	}
}
 8001ec2:	bf00      	nop
 8001ec4:	374c      	adds	r7, #76	@ 0x4c
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd90      	pop	{r4, r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200012a4 	.word	0x200012a4
 8001ed0:	200014b4 	.word	0x200014b4
 8001ed4:	5d9f7391 	.word	0x5d9f7391
 8001ed8:	200012a8 	.word	0x200012a8
 8001edc:	0800c9e8 	.word	0x0800c9e8
 8001ee0:	20001000 	.word	0x20001000
 8001ee4:	0800c9f4 	.word	0x0800c9f4
 8001ee8:	0800ca08 	.word	0x0800ca08
 8001eec:	0800ca10 	.word	0x0800ca10
 8001ef0:	0800ca20 	.word	0x0800ca20
 8001ef4:	0800ca28 	.word	0x0800ca28
 8001ef8:	0800ca38 	.word	0x0800ca38
 8001efc:	20001130 	.word	0x20001130
 8001f00:	0800ca48 	.word	0x0800ca48
 8001f04:	20001204 	.word	0x20001204

08001f08 <display>:

void display(state_t *actual, event_t evt){
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	70fb      	strb	r3, [r7, #3]
	switch(*actual){
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b06      	cmp	r3, #6
 8001f1a:	f200 811f 	bhi.w	800215c <display+0x254>
 8001f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f24 <display+0x1c>)
 8001f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f24:	08001f41 	.word	0x08001f41
 8001f28:	08001f57 	.word	0x08001f57
 8001f2c:	08002045 	.word	0x08002045
 8001f30:	0800215d 	.word	0x0800215d
 8001f34:	0800215d 	.word	0x0800215d
 8001f38:	0800211d 	.word	0x0800211d
 8001f3c:	0800214f 	.word	0x0800214f
	case display_init:
		if(evt==button){
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	f040 810c 	bne.w	8002160 <display+0x258>
			action(display1);
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f7ff fd33 	bl	80019b4 <action>
			*actual=display1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001f54:	e104      	b.n	8002160 <display+0x258>
	case display1:
		switch(evt){
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d86d      	bhi.n	800203a <display+0x132>
 8001f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f64 <display+0x5c>)
 8001f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f64:	08001f75 	.word	0x08001f75
 8001f68:	08001f89 	.word	0x08001f89
 8001f6c:	08001ff3 	.word	0x08001ff3
 8001f70:	08001f97 	.word	0x08001f97
		case button:
			button_flag_counter_ant=4;
 8001f74:	4b7e      	ldr	r3, [pc, #504]	@ (8002170 <display+0x268>)
 8001f76:	2204      	movs	r2, #4
 8001f78:	601a      	str	r2, [r3, #0]
			action(display2A);
 8001f7a:	2002      	movs	r0, #2
 8001f7c:	f7ff fd1a 	bl	80019b4 <action>
			*actual=display2A;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	701a      	strb	r2, [r3, #0]
			break;
 8001f86:	e05c      	b.n	8002042 <display+0x13a>
		case button2:
			action(displayUART);
 8001f88:	2006      	movs	r0, #6
 8001f8a:	f7ff fd13 	bl	80019b4 <action>
			*actual=displayUART;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2206      	movs	r2, #6
 8001f92:	701a      	strb	r2, [r3, #0]
			break;
 8001f94:	e055      	b.n	8002042 <display+0x13a>
		case inc:
			switch(button_flag_counter_ant){
 8001f96:	4b76      	ldr	r3, [pc, #472]	@ (8002170 <display+0x268>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d01c      	beq.n	8001fd8 <display+0xd0>
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	dc20      	bgt.n	8001fe4 <display+0xdc>
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <display+0xa4>
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d010      	beq.n	8001fcc <display+0xc4>
				break;
			case 2:
				x++;
				break;
			default:
				break;
 8001faa:	e01b      	b.n	8001fe4 <display+0xdc>
				amplitud++;
 8001fac:	4b71      	ldr	r3, [pc, #452]	@ (8002174 <display+0x26c>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4b6f      	ldr	r3, [pc, #444]	@ (8002174 <display+0x26c>)
 8001fb8:	701a      	strb	r2, [r3, #0]
				if(amplitud>100){
 8001fba:	4b6e      	ldr	r3, [pc, #440]	@ (8002174 <display+0x26c>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b64      	cmp	r3, #100	@ 0x64
 8001fc2:	d911      	bls.n	8001fe8 <display+0xe0>
					amplitud=100;
 8001fc4:	4b6b      	ldr	r3, [pc, #428]	@ (8002174 <display+0x26c>)
 8001fc6:	2264      	movs	r2, #100	@ 0x64
 8001fc8:	701a      	strb	r2, [r3, #0]
				break;
 8001fca:	e00d      	b.n	8001fe8 <display+0xe0>
				period++;
 8001fcc:	4b6a      	ldr	r3, [pc, #424]	@ (8002178 <display+0x270>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	4a69      	ldr	r2, [pc, #420]	@ (8002178 <display+0x270>)
 8001fd4:	6013      	str	r3, [r2, #0]
				break;
 8001fd6:	e008      	b.n	8001fea <display+0xe2>
				x++;
 8001fd8:	4b68      	ldr	r3, [pc, #416]	@ (800217c <display+0x274>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	4a67      	ldr	r2, [pc, #412]	@ (800217c <display+0x274>)
 8001fe0:	6013      	str	r3, [r2, #0]
				break;
 8001fe2:	e002      	b.n	8001fea <display+0xe2>
				break;
 8001fe4:	bf00      	nop
 8001fe6:	e000      	b.n	8001fea <display+0xe2>
				break;
 8001fe8:	bf00      	nop
			}
			action(display1);
 8001fea:	2001      	movs	r0, #1
 8001fec:	f7ff fce2 	bl	80019b4 <action>
			break;
 8001ff0:	e027      	b.n	8002042 <display+0x13a>
		case dec:
			switch(button_flag_counter_ant){
 8001ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8002170 <display+0x268>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d014      	beq.n	8002024 <display+0x11c>
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	dc18      	bgt.n	8002030 <display+0x128>
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <display+0x100>
 8002002:	2b01      	cmp	r3, #1
 8002004:	d008      	beq.n	8002018 <display+0x110>
				break;
			case 2:
				x--;
				break;
			default:
				break;
 8002006:	e013      	b.n	8002030 <display+0x128>
				amplitud--;
 8002008:	4b5a      	ldr	r3, [pc, #360]	@ (8002174 <display+0x26c>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	3b01      	subs	r3, #1
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4b58      	ldr	r3, [pc, #352]	@ (8002174 <display+0x26c>)
 8002014:	701a      	strb	r2, [r3, #0]
				break;
 8002016:	e00c      	b.n	8002032 <display+0x12a>
				period--;
 8002018:	4b57      	ldr	r3, [pc, #348]	@ (8002178 <display+0x270>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	3b01      	subs	r3, #1
 800201e:	4a56      	ldr	r2, [pc, #344]	@ (8002178 <display+0x270>)
 8002020:	6013      	str	r3, [r2, #0]
				break;
 8002022:	e006      	b.n	8002032 <display+0x12a>
				x--;
 8002024:	4b55      	ldr	r3, [pc, #340]	@ (800217c <display+0x274>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3b01      	subs	r3, #1
 800202a:	4a54      	ldr	r2, [pc, #336]	@ (800217c <display+0x274>)
 800202c:	6013      	str	r3, [r2, #0]
				break;
 800202e:	e000      	b.n	8002032 <display+0x12a>
				break;
 8002030:	bf00      	nop
			}
			action(display1);
 8002032:	2001      	movs	r0, #1
 8002034:	f7ff fcbe 	bl	80019b4 <action>
			break;
 8002038:	e003      	b.n	8002042 <display+0x13a>
		default:
			action(display1);
 800203a:	2001      	movs	r0, #1
 800203c:	f7ff fcba 	bl	80019b4 <action>
			break;
 8002040:	bf00      	nop
		}

	break;
 8002042:	e090      	b.n	8002166 <display+0x25e>
	case display2A:
		button_flag_counter=button_flag_counter_ant;
 8002044:	4b4a      	ldr	r3, [pc, #296]	@ (8002170 <display+0x268>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a4d      	ldr	r2, [pc, #308]	@ (8002180 <display+0x278>)
 800204a:	6013      	str	r3, [r2, #0]
		switch(evt){
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	3b01      	subs	r3, #1
 8002050:	2b03      	cmp	r3, #3
 8002052:	d827      	bhi.n	80020a4 <display+0x19c>
 8002054:	a201      	add	r2, pc, #4	@ (adr r2, 800205c <display+0x154>)
 8002056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205a:	bf00      	nop
 800205c:	0800206d 	.word	0x0800206d
 8002060:	0800207f 	.word	0x0800207f
 8002064:	08002099 	.word	0x08002099
 8002068:	0800208d 	.word	0x0800208d
		case button:
			SSD1306_Clear();
 800206c:	f000 fe4b 	bl	8002d06 <SSD1306_Clear>
			action(display3);
 8002070:	2005      	movs	r0, #5
 8002072:	f7ff fc9f 	bl	80019b4 <action>
			*actual=display3;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2205      	movs	r2, #5
 800207a:	701a      	strb	r2, [r3, #0]
			break;
 800207c:	e013      	b.n	80020a6 <display+0x19e>
		case button2:
			action(displayUART);
 800207e:	2006      	movs	r0, #6
 8002080:	f7ff fc98 	bl	80019b4 <action>
			*actual=displayUART;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2206      	movs	r2, #6
 8002088:	701a      	strb	r2, [r3, #0]
			break;
 800208a:	e00c      	b.n	80020a6 <display+0x19e>
		case inc:
			button_flag_counter++;
 800208c:	4b3c      	ldr	r3, [pc, #240]	@ (8002180 <display+0x278>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	3301      	adds	r3, #1
 8002092:	4a3b      	ldr	r2, [pc, #236]	@ (8002180 <display+0x278>)
 8002094:	6013      	str	r3, [r2, #0]
			break;
 8002096:	e006      	b.n	80020a6 <display+0x19e>
		case dec:
			button_flag_counter--;
 8002098:	4b39      	ldr	r3, [pc, #228]	@ (8002180 <display+0x278>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	3b01      	subs	r3, #1
 800209e:	4a38      	ldr	r2, [pc, #224]	@ (8002180 <display+0x278>)
 80020a0:	6013      	str	r3, [r2, #0]
			break;
 80020a2:	e000      	b.n	80020a6 <display+0x19e>
		default:
			break;
 80020a4:	bf00      	nop
		}

		if (button_flag_counter < 0) {
 80020a6:	4b36      	ldr	r3, [pc, #216]	@ (8002180 <display+0x278>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	da02      	bge.n	80020b4 <display+0x1ac>
			button_flag_counter = 2;
 80020ae:	4b34      	ldr	r3, [pc, #208]	@ (8002180 <display+0x278>)
 80020b0:	2202      	movs	r2, #2
 80020b2:	601a      	str	r2, [r3, #0]
		}

		if (button_flag_counter > 2) {
 80020b4:	4b32      	ldr	r3, [pc, #200]	@ (8002180 <display+0x278>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	dd02      	ble.n	80020c2 <display+0x1ba>
				button_flag_counter = 0;
 80020bc:	4b30      	ldr	r3, [pc, #192]	@ (8002180 <display+0x278>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
			}
		if(button_flag_counter_ant!=button_flag_counter){
 80020c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002170 <display+0x268>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002180 <display+0x278>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d001      	beq.n	80020d2 <display+0x1ca>
			SSD1306_Clear();
 80020ce:	f000 fe1a 	bl	8002d06 <SSD1306_Clear>
		}

		switch(button_flag_counter){
 80020d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002180 <display+0x278>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d00e      	beq.n	80020f8 <display+0x1f0>
 80020da:	2b02      	cmp	r3, #2
 80020dc:	dc10      	bgt.n	8002100 <display+0x1f8>
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <display+0x1e0>
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d004      	beq.n	80020f0 <display+0x1e8>
			break;
		case 2:
			action(display2C);
			break;
		default:
			break;
 80020e6:	e00b      	b.n	8002100 <display+0x1f8>
			action(display2A);
 80020e8:	2002      	movs	r0, #2
 80020ea:	f7ff fc63 	bl	80019b4 <action>
			break;
 80020ee:	e008      	b.n	8002102 <display+0x1fa>
			action(display2B);
 80020f0:	2003      	movs	r0, #3
 80020f2:	f7ff fc5f 	bl	80019b4 <action>
			break;
 80020f6:	e004      	b.n	8002102 <display+0x1fa>
			action(display2C);
 80020f8:	2004      	movs	r0, #4
 80020fa:	f7ff fc5b 	bl	80019b4 <action>
			break;
 80020fe:	e000      	b.n	8002102 <display+0x1fa>
			break;
 8002100:	bf00      	nop
		}
		if(button_flag_counter_ant!=button_flag_counter){
 8002102:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <display+0x268>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4b1e      	ldr	r3, [pc, #120]	@ (8002180 <display+0x278>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d02a      	beq.n	8002164 <display+0x25c>
					SSD1306_UpdateScreen();
 800210e:	f000 fb55 	bl	80027bc <SSD1306_UpdateScreen>
					button_flag_counter_ant=button_flag_counter;
 8002112:	4b1b      	ldr	r3, [pc, #108]	@ (8002180 <display+0x278>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a16      	ldr	r2, [pc, #88]	@ (8002170 <display+0x268>)
 8002118:	6013      	str	r3, [r2, #0]
				}
	break;
 800211a:	e023      	b.n	8002164 <display+0x25c>
	case display3:
		switch(evt){
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d002      	beq.n	8002128 <display+0x220>
 8002122:	2b02      	cmp	r3, #2
 8002124:	d007      	beq.n	8002136 <display+0x22e>
 8002126:	e00d      	b.n	8002144 <display+0x23c>
		case button:
			action(display1);
 8002128:	2001      	movs	r0, #1
 800212a:	f7ff fc43 	bl	80019b4 <action>
			*actual=display1;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]
			break;
 8002134:	e00a      	b.n	800214c <display+0x244>
		case button2:
			action(displayUART);
 8002136:	2006      	movs	r0, #6
 8002138:	f7ff fc3c 	bl	80019b4 <action>
			*actual=displayUART;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2206      	movs	r2, #6
 8002140:	701a      	strb	r2, [r3, #0]
			break;
 8002142:	e003      	b.n	800214c <display+0x244>
		default:
			action(display3);
 8002144:	2005      	movs	r0, #5
 8002146:	f7ff fc35 	bl	80019b4 <action>
			break;
 800214a:	bf00      	nop
		}
	break;
 800214c:	e00b      	b.n	8002166 <display+0x25e>
	case displayUART:
		action(display1);
 800214e:	2001      	movs	r0, #1
 8002150:	f7ff fc30 	bl	80019b4 <action>
		*actual=display1;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	701a      	strb	r2, [r3, #0]
		break;
 800215a:	e004      	b.n	8002166 <display+0x25e>
	default:
		break;
 800215c:	bf00      	nop
 800215e:	e002      	b.n	8002166 <display+0x25e>
		break;
 8002160:	bf00      	nop
 8002162:	e000      	b.n	8002166 <display+0x25e>
	break;
 8002164:	bf00      	nop
	}
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20001018 	.word	0x20001018
 8002174:	20001014 	.word	0x20001014
 8002178:	20001010 	.word	0x20001010
 800217c:	200012a4 	.word	0x200012a4
 8002180:	200020b4 	.word	0x200020b4
 8002184:	00000000 	.word	0x00000000

08002188 <SignalGeneratorTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_SignalGeneratorTask */
void SignalGeneratorTask(void *argument)
{
 8002188:	b5b0      	push	{r4, r5, r7, lr}
 800218a:	b0c8      	sub	sp, #288	@ 0x120
 800218c:	af00      	add	r7, sp, #0
 800218e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002192:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002196:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	vTaskSetApplicationTaskTag(NULL, (void*)1);
 8002198:	2101      	movs	r1, #1
 800219a:	2000      	movs	r0, #0
 800219c:	f007 fa3a 	bl	8009614 <vTaskSetApplicationTaskTag>
	uint16_t onda[NSEN] = {0};
 80021a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80021a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80021a8:	4618      	mov	r0, r3
 80021aa:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80021ae:	461a      	mov	r2, r3
 80021b0:	2100      	movs	r1, #0
 80021b2:	f008 fe05 	bl	800adc0 <memset>
	int idx = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	uint32_t period_anterior=0;
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	uint8_t amplitud_anterior=0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	uint32_t period_PWM=0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  /* Infinite loop */
  for(;;)
  {
	  uint32_t stack_SGT=4*osThreadGetStackSpace(SignalGeneratorHandle);
 80021ce:	4b56      	ldr	r3, [pc, #344]	@ (8002328 <SignalGeneratorTask+0x1a0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f005 fd7c 	bl	8007cd0 <osThreadGetStackSpace>
 80021d8:	4603      	mov	r3, r0
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	  if(period_anterior!=period || amplitud_anterior!=amplitud){
 80021e0:	4b52      	ldr	r3, [pc, #328]	@ (800232c <SignalGeneratorTask+0x1a4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d107      	bne.n	80021fe <SignalGeneratorTask+0x76>
 80021ee:	4b50      	ldr	r3, [pc, #320]	@ (8002330 <SignalGeneratorTask+0x1a8>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 80021f8:	429a      	cmp	r2, r3
 80021fa:	f000 808d 	beq.w	8002318 <SignalGeneratorTask+0x190>
		  period_anterior=period;
 80021fe:	4b4b      	ldr	r3, [pc, #300]	@ (800232c <SignalGeneratorTask+0x1a4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
		  amplitud_anterior=amplitud;
 8002206:	4b4a      	ldr	r3, [pc, #296]	@ (8002330 <SignalGeneratorTask+0x1a8>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
		  HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 800220e:	2100      	movs	r1, #0
 8002210:	4848      	ldr	r0, [pc, #288]	@ (8002334 <SignalGeneratorTask+0x1ac>)
 8002212:	f004 fb0b 	bl	800682c <HAL_TIM_PWM_Stop_DMA>
		  period_PWM=set_PWM_period(period);
 8002216:	4b45      	ldr	r3, [pc, #276]	@ (800232c <SignalGeneratorTask+0x1a4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f001 f9f8 	bl	8003610 <set_PWM_period>
 8002220:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

		  __HAL_TIM_SET_AUTORELOAD(&htim3, period_PWM);
 8002224:	4b43      	ldr	r3, [pc, #268]	@ (8002334 <SignalGeneratorTask+0x1ac>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800222c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800222e:	4a41      	ldr	r2, [pc, #260]	@ (8002334 <SignalGeneratorTask+0x1ac>)
 8002230:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002234:	60d3      	str	r3, [r2, #12]
		  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8002236:	4b3f      	ldr	r3, [pc, #252]	@ (8002334 <SignalGeneratorTask+0x1ac>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2200      	movs	r2, #0
 800223c:	625a      	str	r2, [r3, #36]	@ 0x24

		    for (idx = 0; idx < NSEN; idx++) {
 800223e:	2300      	movs	r3, #0
 8002240:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002244:	e05d      	b.n	8002302 <SignalGeneratorTask+0x17a>
		        onda[idx] = (uint16_t)((float)((float)amplitud/100)*(period_PWM+1)/ 2.0 * (sin(2.0 * M_PI * idx / (float)NSEN) + 1.0));
 8002246:	4b3a      	ldr	r3, [pc, #232]	@ (8002330 <SignalGeneratorTask+0x1a8>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe fd39 	bl	8000cc4 <__aeabi_ui2f>
 8002252:	4603      	mov	r3, r0
 8002254:	4938      	ldr	r1, [pc, #224]	@ (8002338 <SignalGeneratorTask+0x1b0>)
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe fe40 	bl	8000edc <__aeabi_fdiv>
 800225c:	4603      	mov	r3, r0
 800225e:	461c      	mov	r4, r3
 8002260:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002264:	3301      	adds	r3, #1
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe fd2c 	bl	8000cc4 <__aeabi_ui2f>
 800226c:	4603      	mov	r3, r0
 800226e:	4619      	mov	r1, r3
 8002270:	4620      	mov	r0, r4
 8002272:	f7fe fd7f 	bl	8000d74 <__aeabi_fmul>
 8002276:	4603      	mov	r3, r0
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f8cd 	bl	8000418 <__aeabi_f2d>
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002286:	f7fe fa49 	bl	800071c <__aeabi_ddiv>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4614      	mov	r4, r2
 8002290:	461d      	mov	r5, r3
 8002292:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8002296:	f7fe f8ad 	bl	80003f4 <__aeabi_i2d>
 800229a:	a321      	add	r3, pc, #132	@ (adr r3, 8002320 <SignalGeneratorTask+0x198>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe f912 	bl	80004c8 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	4b22      	ldr	r3, [pc, #136]	@ (800233c <SignalGeneratorTask+0x1b4>)
 80022b2:	f7fe fa33 	bl	800071c <__aeabi_ddiv>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	f009 fa89 	bl	800b7d4 <sin>
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002340 <SignalGeneratorTask+0x1b8>)
 80022c8:	f7fd ff48 	bl	800015c <__adddf3>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4620      	mov	r0, r4
 80022d2:	4629      	mov	r1, r5
 80022d4:	f7fe f8f8 	bl	80004c8 <__aeabi_dmul>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	f7fe fbca 	bl	8000a78 <__aeabi_d2uiz>
 80022e4:	4603      	mov	r3, r0
 80022e6:	b299      	uxth	r1, r3
 80022e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80022ec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022f0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80022f4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		    for (idx = 0; idx < NSEN; idx++) {
 80022f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80022fc:	3301      	adds	r3, #1
 80022fe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002302:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002306:	2b81      	cmp	r3, #129	@ 0x81
 8002308:	dd9d      	ble.n	8002246 <SignalGeneratorTask+0xbe>
		    }

		    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)onda, NSEN);
 800230a:	f107 0208 	add.w	r2, r7, #8
 800230e:	2382      	movs	r3, #130	@ 0x82
 8002310:	2100      	movs	r1, #0
 8002312:	4808      	ldr	r0, [pc, #32]	@ (8002334 <SignalGeneratorTask+0x1ac>)
 8002314:	f004 f8e8 	bl	80064e8 <HAL_TIM_PWM_Start_DMA>
	  }
	  osDelay(250);
 8002318:	20fa      	movs	r0, #250	@ 0xfa
 800231a:	f005 fd07 	bl	8007d2c <osDelay>
  {
 800231e:	e756      	b.n	80021ce <SignalGeneratorTask+0x46>
 8002320:	54442d18 	.word	0x54442d18
 8002324:	401921fb 	.word	0x401921fb
 8002328:	20001290 	.word	0x20001290
 800232c:	20001010 	.word	0x20001010
 8002330:	20001014 	.word	0x20001014
 8002334:	20001178 	.word	0x20001178
 8002338:	42c80000 	.word	0x42c80000
 800233c:	40604000 	.word	0x40604000
 8002340:	3ff00000 	.word	0x3ff00000

08002344 <ScreenControlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ScreenControlerTask */
void ScreenControlerTask(void *argument)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ScreenControlerTask */
	vTaskSetApplicationTaskTag(NULL, (void*)2);
 800234c:	2102      	movs	r1, #2
 800234e:	2000      	movs	r0, #0
 8002350:	f007 f960 	bl	8009614 <vTaskSetApplicationTaskTag>
	uint32_t flag_SCT=0;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
	event_t eventSCT=null;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
	state_t estado=display_init;
 800235c:	2300      	movs	r3, #0
 800235e:	73bb      	strb	r3, [r7, #14]
	action(display_init);
 8002360:	2000      	movs	r0, #0
 8002362:	f7ff fb27 	bl	80019b4 <action>
	/* Infinite loop */
	for(;;){
		uint32_t stack_SCT=4*osThreadGetStackSpace(ScreenControlerHandle);
 8002366:	4b1a      	ldr	r3, [pc, #104]	@ (80023d0 <ScreenControlerTask+0x8c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f005 fcb0 	bl	8007cd0 <osThreadGetStackSpace>
 8002370:	4603      	mov	r3, r0
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	613b      	str	r3, [r7, #16]
		flag_SCT=ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002376:	f04f 31ff 	mov.w	r1, #4294967295
 800237a:	2001      	movs	r0, #1
 800237c:	f007 fcb8 	bl	8009cf0 <ulTaskNotifyTake>
 8002380:	6178      	str	r0, [r7, #20]
		if(flag_SCT==1){
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d11e      	bne.n	80023c6 <ScreenControlerTask+0x82>
			flag_SCT=0;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
			if(osMessageQueueGetSpace(eventa2Handle)<7){
 800238c:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <ScreenControlerTask+0x90>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f005 fe65 	bl	8008060 <osMessageQueueGetSpace>
 8002396:	4603      	mov	r3, r0
 8002398:	2b06      	cmp	r3, #6
 800239a:	d808      	bhi.n	80023ae <ScreenControlerTask+0x6a>
				osMessageQueueGet(eventa2Handle, &eventSCT, 0, 100);
 800239c:	4b0d      	ldr	r3, [pc, #52]	@ (80023d4 <ScreenControlerTask+0x90>)
 800239e:	6818      	ldr	r0, [r3, #0]
 80023a0:	f107 010f 	add.w	r1, r7, #15
 80023a4:	2364      	movs	r3, #100	@ 0x64
 80023a6:	2200      	movs	r2, #0
 80023a8:	f005 fde8 	bl	8007f7c <osMessageQueueGet>
 80023ac:	e001      	b.n	80023b2 <ScreenControlerTask+0x6e>
			}
			else{
				eventSCT=null;
 80023ae:	2300      	movs	r3, #0
 80023b0:	73fb      	strb	r3, [r7, #15]
			}
			display(&estado,eventSCT);
 80023b2:	7bfa      	ldrb	r2, [r7, #15]
 80023b4:	f107 030e 	add.w	r3, r7, #14
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fda4 	bl	8001f08 <display>
			HAL_TIM_Base_Start_IT(&htim2);
 80023c0:	4805      	ldr	r0, [pc, #20]	@ (80023d8 <ScreenControlerTask+0x94>)
 80023c2:	f003 ffb9 	bl	8006338 <HAL_TIM_Base_Start_IT>
		}
	osDelay(100);
 80023c6:	2064      	movs	r0, #100	@ 0x64
 80023c8:	f005 fcb0 	bl	8007d2c <osDelay>
	for(;;){
 80023cc:	e7cb      	b.n	8002366 <ScreenControlerTask+0x22>
 80023ce:	bf00      	nop
 80023d0:	20001294 	.word	0x20001294
 80023d4:	200012a0 	.word	0x200012a0
 80023d8:	20001130 	.word	0x20001130

080023dc <InputControlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_InputControlerTask */
void InputControlerTask(void *argument)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN InputControlerTask */
  /* Infinite loop */
	vTaskSetApplicationTaskTag(NULL, (void*)3);
 80023e4:	2103      	movs	r1, #3
 80023e6:	2000      	movs	r0, #0
 80023e8:	f007 f914 	bl	8009614 <vTaskSetApplicationTaskTag>
	Encoder_Status St=Neutral;
 80023ec:	2302      	movs	r3, #2
 80023ee:	75fb      	strb	r3, [r7, #23]
	event_t event;
	uint32_t antirebote=0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
	uint32_t antirebote2=0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61bb      	str	r3, [r7, #24]
  for(;;)
  {
	uint32_t stack_ICT=4*osThreadGetStackSpace(InputControlerHandle);
 80023f8:	4b28      	ldr	r3, [pc, #160]	@ (800249c <InputControlerTask+0xc0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f005 fc67 	bl	8007cd0 <osThreadGetStackSpace>
 8002402:	4603      	mov	r3, r0
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	613b      	str	r3, [r7, #16]
	event=null;
 8002408:	2300      	movs	r3, #0
 800240a:	72fb      	strb	r3, [r7, #11]
	St=Encoder_Get_Status();
 800240c:	f000 ffee 	bl	80033ec <Encoder_Get_Status>
 8002410:	4603      	mov	r3, r0
 8002412:	75fb      	strb	r3, [r7, #23]
	if (St==Incremented){
 8002414:	7dfb      	ldrb	r3, [r7, #23]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <InputControlerTask+0x42>
		event=inc;
 800241a:	2304      	movs	r3, #4
 800241c:	72fb      	strb	r3, [r7, #11]
	}
	if(St==Decremented){
 800241e:	7dfb      	ldrb	r3, [r7, #23]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <InputControlerTask+0x4c>
		event=dec;
 8002424:	2303      	movs	r3, #3
 8002426:	72fb      	strb	r3, [r7, #11]
	}
	uint16_t SW_encoder = HAL_GPIO_ReadPin(ENCODER_BUTTON);
 8002428:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800242c:	481c      	ldr	r0, [pc, #112]	@ (80024a0 <InputControlerTask+0xc4>)
 800242e:	f002 fb8d 	bl	8004b4c <HAL_GPIO_ReadPin>
 8002432:	4603      	mov	r3, r0
 8002434:	81fb      	strh	r3, [r7, #14]
	if(antirebote==0){
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d106      	bne.n	800244a <InputControlerTask+0x6e>
	if(SW_encoder == 0){
 800243c:	89fb      	ldrh	r3, [r7, #14]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d103      	bne.n	800244a <InputControlerTask+0x6e>
		event=button;
 8002442:	2301      	movs	r3, #1
 8002444:	72fb      	strb	r3, [r7, #11]
		antirebote=1;
 8002446:	2301      	movs	r3, #1
 8002448:	61fb      	str	r3, [r7, #28]
	}
	}
	antirebote=antirebote_ftn(antirebote);
 800244a:	69f8      	ldr	r0, [r7, #28]
 800244c:	f001 f8ca 	bl	80035e4 <antirebote_ftn>
 8002450:	61f8      	str	r0, [r7, #28]

	uint16_t SW_button = HAL_GPIO_ReadPin(BUTTON);
 8002452:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002456:	4812      	ldr	r0, [pc, #72]	@ (80024a0 <InputControlerTask+0xc4>)
 8002458:	f002 fb78 	bl	8004b4c <HAL_GPIO_ReadPin>
 800245c:	4603      	mov	r3, r0
 800245e:	81bb      	strh	r3, [r7, #12]
	if(antirebote2==0){
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <InputControlerTask+0x98>
	if(SW_button == 1){
 8002466:	89bb      	ldrh	r3, [r7, #12]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d103      	bne.n	8002474 <InputControlerTask+0x98>
		antirebote2=1;
 800246c:	2301      	movs	r3, #1
 800246e:	61bb      	str	r3, [r7, #24]
		event=button2;
 8002470:	2302      	movs	r3, #2
 8002472:	72fb      	strb	r3, [r7, #11]
	}
	}
	antirebote2=antirebote_ftn(antirebote2);
 8002474:	69b8      	ldr	r0, [r7, #24]
 8002476:	f001 f8b5 	bl	80035e4 <antirebote_ftn>
 800247a:	61b8      	str	r0, [r7, #24]

	if(event!=null){
 800247c:	7afb      	ldrb	r3, [r7, #11]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <InputControlerTask+0xb6>
		osMessageQueuePut(eventa2Handle, &event, 0,100);
 8002482:	4b08      	ldr	r3, [pc, #32]	@ (80024a4 <InputControlerTask+0xc8>)
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	f107 010b 	add.w	r1, r7, #11
 800248a:	2364      	movs	r3, #100	@ 0x64
 800248c:	2200      	movs	r2, #0
 800248e:	f005 fd01 	bl	8007e94 <osMessageQueuePut>
	}
	osDelay(1);
 8002492:	2001      	movs	r0, #1
 8002494:	f005 fc4a 	bl	8007d2c <osDelay>
  {
 8002498:	e7ae      	b.n	80023f8 <InputControlerTask+0x1c>
 800249a:	bf00      	nop
 800249c:	20001298 	.word	0x20001298
 80024a0:	40010c00 	.word	0x40010c00
 80024a4:	200012a0 	.word	0x200012a0

080024a8 <DataControlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataControlerTask */
void DataControlerTask(void *argument)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DataControlerTask */
	vTaskSetApplicationTaskTag(NULL, (void*)4);
 80024b0:	2104      	movs	r1, #4
 80024b2:	2000      	movs	r0, #0
 80024b4:	f007 f8ae 	bl	8009614 <vTaskSetApplicationTaskTag>
  /* Infinite loop */
  for(;;){
	 if(Flag_muestras==1){
 80024b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002570 <DataControlerTask+0xc8>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d149      	bne.n	8002556 <DataControlerTask+0xae>
		 Flag_muestras=0;
 80024c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002570 <DataControlerTask+0xc8>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
		 uint32_t freeHeap = xPortGetFreeHeapSize();
 80024c8:	f008 fb96 	bl	800abf8 <xPortGetFreeHeapSize>
 80024cc:	6138      	str	r0, [r7, #16]
		 uint32_t stack_DCT=4*osThreadGetStackSpace(DataControlerHandle);
 80024ce:	4b29      	ldr	r3, [pc, #164]	@ (8002574 <DataControlerTask+0xcc>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f005 fbfc 	bl	8007cd0 <osThreadGetStackSpace>
 80024d8:	4603      	mov	r3, r0
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	60fb      	str	r3, [r7, #12]
			for(int j_fft=0;j_fft<ADC_BUFFER_SIZE;j_fft++){
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	e029      	b.n	8002538 <DataControlerTask+0x90>
				FFT_buffer[j_fft].real=(float)(3.3*adc_buffer[j_fft]/4095.0);
 80024e4:	4a24      	ldr	r2, [pc, #144]	@ (8002578 <DataControlerTask+0xd0>)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fd ff81 	bl	80003f4 <__aeabi_i2d>
 80024f2:	a31b      	add	r3, pc, #108	@ (adr r3, 8002560 <DataControlerTask+0xb8>)
 80024f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f8:	f7fd ffe6 	bl	80004c8 <__aeabi_dmul>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	a318      	add	r3, pc, #96	@ (adr r3, 8002568 <DataControlerTask+0xc0>)
 8002506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250a:	f7fe f907 	bl	800071c <__aeabi_ddiv>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	f7fe facf 	bl	8000ab8 <__aeabi_d2f>
 800251a:	4602      	mov	r2, r0
 800251c:	4917      	ldr	r1, [pc, #92]	@ (800257c <DataControlerTask+0xd4>)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				FFT_buffer[j_fft].imag=0;
 8002524:	4a15      	ldr	r2, [pc, #84]	@ (800257c <DataControlerTask+0xd4>)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4413      	add	r3, r2
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	605a      	str	r2, [r3, #4]
			for(int j_fft=0;j_fft<ADC_BUFFER_SIZE;j_fft++){
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	3301      	adds	r3, #1
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2bff      	cmp	r3, #255	@ 0xff
 800253c:	ddd2      	ble.n	80024e4 <DataControlerTask+0x3c>
			}
			FFT(FFT_buffer,ADC_BUFFER_SIZE);
 800253e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002542:	480e      	ldr	r0, [pc, #56]	@ (800257c <DataControlerTask+0xd4>)
 8002544:	f7fe fd66 	bl	8001014 <FFT>
			xTaskNotify(ScreenControlerHandle, 1,eSetValueWithOverwrite);
 8002548:	4b0d      	ldr	r3, [pc, #52]	@ (8002580 <DataControlerTask+0xd8>)
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	2300      	movs	r3, #0
 800254e:	2203      	movs	r2, #3
 8002550:	2101      	movs	r1, #1
 8002552:	f007 fc19 	bl	8009d88 <xTaskGenericNotify>
	 }
	  osDelay(1);
 8002556:	2001      	movs	r0, #1
 8002558:	f005 fbe8 	bl	8007d2c <osDelay>
	 if(Flag_muestras==1){
 800255c:	e7ac      	b.n	80024b8 <DataControlerTask+0x10>
 800255e:	bf00      	nop
 8002560:	66666666 	.word	0x66666666
 8002564:	400a6666 	.word	0x400a6666
 8002568:	00000000 	.word	0x00000000
 800256c:	40affe00 	.word	0x40affe00
 8002570:	200012b0 	.word	0x200012b0
 8002574:	2000129c 	.word	0x2000129c
 8002578:	200012b4 	.word	0x200012b4
 800257c:	200018b4 	.word	0x200018b4
 8002580:	20001294 	.word	0x20001294

08002584 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a1e      	ldr	r2, [pc, #120]	@ (800260c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d101      	bne.n	800259a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002596:	f001 f8ed 	bl	8003774 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2){
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025a2:	d12f      	bne.n	8002604 <HAL_TIM_PeriodElapsedCallback+0x80>
	  HAL_GPIO_WritePin(PIN5,1);
 80025a4:	2201      	movs	r2, #1
 80025a6:	2120      	movs	r1, #32
 80025a8:	4819      	ldr	r0, [pc, #100]	@ (8002610 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80025aa:	f002 fae6 	bl	8004b7a <HAL_GPIO_WritePin>
	  if(j_adc>=ADC_BUFFER_SIZE-1){
 80025ae:	4b19      	ldr	r3, [pc, #100]	@ (8002614 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2bfe      	cmp	r3, #254	@ 0xfe
 80025b4:	d909      	bls.n	80025ca <HAL_TIM_PeriodElapsedCallback+0x46>
		  j_adc=0;
 80025b6:	4b17      	ldr	r3, [pc, #92]	@ (8002614 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
		  Flag_muestras=1;
 80025bc:	4b16      	ldr	r3, [pc, #88]	@ (8002618 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop_IT(&htim2);
 80025c2:	4816      	ldr	r0, [pc, #88]	@ (800261c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80025c4:	f003 ff0a 	bl	80063dc <HAL_TIM_Base_Stop_IT>
 80025c8:	e017      	b.n	80025fa <HAL_TIM_PeriodElapsedCallback+0x76>
	  }
	  else{
		  HAL_ADC_Start(&hadc1);
 80025ca:	4815      	ldr	r0, [pc, #84]	@ (8002620 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80025cc:	f001 f9c6 	bl	800395c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295
 80025d4:	4812      	ldr	r0, [pc, #72]	@ (8002620 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80025d6:	f001 fa6f 	bl	8003ab8 <HAL_ADC_PollForConversion>
		  uint16_t ADC_value = HAL_ADC_GetValue(&hadc1);
 80025da:	4811      	ldr	r0, [pc, #68]	@ (8002620 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80025dc:	f001 fb72 	bl	8003cc4 <HAL_ADC_GetValue>
 80025e0:	4603      	mov	r3, r0
 80025e2:	81fb      	strh	r3, [r7, #14]
		  adc_buffer[j_adc]=ADC_value;
 80025e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	490e      	ldr	r1, [pc, #56]	@ (8002624 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80025ea:	89fa      	ldrh	r2, [r7, #14]
 80025ec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		  j_adc++;
 80025f0:	4b08      	ldr	r3, [pc, #32]	@ (8002614 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	3301      	adds	r3, #1
 80025f6:	4a07      	ldr	r2, [pc, #28]	@ (8002614 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80025f8:	6013      	str	r3, [r2, #0]
	  }
	  HAL_GPIO_WritePin(PIN5,0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2120      	movs	r1, #32
 80025fe:	4804      	ldr	r0, [pc, #16]	@ (8002610 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002600:	f002 fabb 	bl	8004b7a <HAL_GPIO_WritePin>
  }
  /* USER CODE END Callback 1 */
}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40000800 	.word	0x40000800
 8002610:	40010c00 	.word	0x40010c00
 8002614:	200012ac 	.word	0x200012ac
 8002618:	200012b0 	.word	0x200012b0
 800261c:	20001130 	.word	0x20001130
 8002620:	200010ac 	.word	0x200010ac
 8002624:	200012b4 	.word	0x200012b4

08002628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800262c:	b672      	cpsid	i
}
 800262e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002630:	bf00      	nop
 8002632:	e7fd      	b.n	8002630 <Error_Handler+0x8>

08002634 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800263a:	f000 fb6d 	bl	8002d18 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800263e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002642:	2201      	movs	r2, #1
 8002644:	2178      	movs	r1, #120	@ 0x78
 8002646:	485b      	ldr	r0, [pc, #364]	@ (80027b4 <SSD1306_Init+0x180>)
 8002648:	f002 fcf2 	bl	8005030 <HAL_I2C_IsDeviceReady>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002652:	2300      	movs	r3, #0
 8002654:	e0a9      	b.n	80027aa <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002656:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800265a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800265c:	e002      	b.n	8002664 <SSD1306_Init+0x30>
		p--;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3b01      	subs	r3, #1
 8002662:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f9      	bne.n	800265e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800266a:	22ae      	movs	r2, #174	@ 0xae
 800266c:	2100      	movs	r1, #0
 800266e:	2078      	movs	r0, #120	@ 0x78
 8002670:	f000 fbcc 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002674:	2220      	movs	r2, #32
 8002676:	2100      	movs	r1, #0
 8002678:	2078      	movs	r0, #120	@ 0x78
 800267a:	f000 fbc7 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800267e:	2210      	movs	r2, #16
 8002680:	2100      	movs	r1, #0
 8002682:	2078      	movs	r0, #120	@ 0x78
 8002684:	f000 fbc2 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002688:	22b0      	movs	r2, #176	@ 0xb0
 800268a:	2100      	movs	r1, #0
 800268c:	2078      	movs	r0, #120	@ 0x78
 800268e:	f000 fbbd 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002692:	22c8      	movs	r2, #200	@ 0xc8
 8002694:	2100      	movs	r1, #0
 8002696:	2078      	movs	r0, #120	@ 0x78
 8002698:	f000 fbb8 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800269c:	2200      	movs	r2, #0
 800269e:	2100      	movs	r1, #0
 80026a0:	2078      	movs	r0, #120	@ 0x78
 80026a2:	f000 fbb3 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80026a6:	2210      	movs	r2, #16
 80026a8:	2100      	movs	r1, #0
 80026aa:	2078      	movs	r0, #120	@ 0x78
 80026ac:	f000 fbae 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80026b0:	2240      	movs	r2, #64	@ 0x40
 80026b2:	2100      	movs	r1, #0
 80026b4:	2078      	movs	r0, #120	@ 0x78
 80026b6:	f000 fba9 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80026ba:	2281      	movs	r2, #129	@ 0x81
 80026bc:	2100      	movs	r1, #0
 80026be:	2078      	movs	r0, #120	@ 0x78
 80026c0:	f000 fba4 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80026c4:	22ff      	movs	r2, #255	@ 0xff
 80026c6:	2100      	movs	r1, #0
 80026c8:	2078      	movs	r0, #120	@ 0x78
 80026ca:	f000 fb9f 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80026ce:	22a1      	movs	r2, #161	@ 0xa1
 80026d0:	2100      	movs	r1, #0
 80026d2:	2078      	movs	r0, #120	@ 0x78
 80026d4:	f000 fb9a 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80026d8:	22a6      	movs	r2, #166	@ 0xa6
 80026da:	2100      	movs	r1, #0
 80026dc:	2078      	movs	r0, #120	@ 0x78
 80026de:	f000 fb95 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80026e2:	22a8      	movs	r2, #168	@ 0xa8
 80026e4:	2100      	movs	r1, #0
 80026e6:	2078      	movs	r0, #120	@ 0x78
 80026e8:	f000 fb90 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80026ec:	223f      	movs	r2, #63	@ 0x3f
 80026ee:	2100      	movs	r1, #0
 80026f0:	2078      	movs	r0, #120	@ 0x78
 80026f2:	f000 fb8b 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80026f6:	22a4      	movs	r2, #164	@ 0xa4
 80026f8:	2100      	movs	r1, #0
 80026fa:	2078      	movs	r0, #120	@ 0x78
 80026fc:	f000 fb86 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002700:	22d3      	movs	r2, #211	@ 0xd3
 8002702:	2100      	movs	r1, #0
 8002704:	2078      	movs	r0, #120	@ 0x78
 8002706:	f000 fb81 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800270a:	2200      	movs	r2, #0
 800270c:	2100      	movs	r1, #0
 800270e:	2078      	movs	r0, #120	@ 0x78
 8002710:	f000 fb7c 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002714:	22d5      	movs	r2, #213	@ 0xd5
 8002716:	2100      	movs	r1, #0
 8002718:	2078      	movs	r0, #120	@ 0x78
 800271a:	f000 fb77 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800271e:	22f0      	movs	r2, #240	@ 0xf0
 8002720:	2100      	movs	r1, #0
 8002722:	2078      	movs	r0, #120	@ 0x78
 8002724:	f000 fb72 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002728:	22d9      	movs	r2, #217	@ 0xd9
 800272a:	2100      	movs	r1, #0
 800272c:	2078      	movs	r0, #120	@ 0x78
 800272e:	f000 fb6d 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002732:	2222      	movs	r2, #34	@ 0x22
 8002734:	2100      	movs	r1, #0
 8002736:	2078      	movs	r0, #120	@ 0x78
 8002738:	f000 fb68 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800273c:	22da      	movs	r2, #218	@ 0xda
 800273e:	2100      	movs	r1, #0
 8002740:	2078      	movs	r0, #120	@ 0x78
 8002742:	f000 fb63 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002746:	2212      	movs	r2, #18
 8002748:	2100      	movs	r1, #0
 800274a:	2078      	movs	r0, #120	@ 0x78
 800274c:	f000 fb5e 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002750:	22db      	movs	r2, #219	@ 0xdb
 8002752:	2100      	movs	r1, #0
 8002754:	2078      	movs	r0, #120	@ 0x78
 8002756:	f000 fb59 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800275a:	2220      	movs	r2, #32
 800275c:	2100      	movs	r1, #0
 800275e:	2078      	movs	r0, #120	@ 0x78
 8002760:	f000 fb54 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002764:	228d      	movs	r2, #141	@ 0x8d
 8002766:	2100      	movs	r1, #0
 8002768:	2078      	movs	r0, #120	@ 0x78
 800276a:	f000 fb4f 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800276e:	2214      	movs	r2, #20
 8002770:	2100      	movs	r1, #0
 8002772:	2078      	movs	r0, #120	@ 0x78
 8002774:	f000 fb4a 	bl	8002e0c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002778:	22af      	movs	r2, #175	@ 0xaf
 800277a:	2100      	movs	r1, #0
 800277c:	2078      	movs	r0, #120	@ 0x78
 800277e:	f000 fb45 	bl	8002e0c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002782:	222e      	movs	r2, #46	@ 0x2e
 8002784:	2100      	movs	r1, #0
 8002786:	2078      	movs	r0, #120	@ 0x78
 8002788:	f000 fb40 	bl	8002e0c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800278c:	2000      	movs	r0, #0
 800278e:	f000 f843 	bl	8002818 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002792:	f000 f813 	bl	80027bc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002796:	4b08      	ldr	r3, [pc, #32]	@ (80027b8 <SSD1306_Init+0x184>)
 8002798:	2200      	movs	r2, #0
 800279a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800279c:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <SSD1306_Init+0x184>)
 800279e:	2200      	movs	r2, #0
 80027a0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80027a2:	4b05      	ldr	r3, [pc, #20]	@ (80027b8 <SSD1306_Init+0x184>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80027a8:	2301      	movs	r3, #1
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	200010dc 	.word	0x200010dc
 80027b8:	200024b8 	.word	0x200024b8

080027bc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80027c2:	2300      	movs	r3, #0
 80027c4:	71fb      	strb	r3, [r7, #7]
 80027c6:	e01d      	b.n	8002804 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	3b50      	subs	r3, #80	@ 0x50
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	2100      	movs	r1, #0
 80027d2:	2078      	movs	r0, #120	@ 0x78
 80027d4:	f000 fb1a 	bl	8002e0c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80027d8:	2200      	movs	r2, #0
 80027da:	2100      	movs	r1, #0
 80027dc:	2078      	movs	r0, #120	@ 0x78
 80027de:	f000 fb15 	bl	8002e0c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80027e2:	2210      	movs	r2, #16
 80027e4:	2100      	movs	r1, #0
 80027e6:	2078      	movs	r0, #120	@ 0x78
 80027e8:	f000 fb10 	bl	8002e0c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	01db      	lsls	r3, r3, #7
 80027f0:	4a08      	ldr	r2, [pc, #32]	@ (8002814 <SSD1306_UpdateScreen+0x58>)
 80027f2:	441a      	add	r2, r3
 80027f4:	2380      	movs	r3, #128	@ 0x80
 80027f6:	2140      	movs	r1, #64	@ 0x40
 80027f8:	2078      	movs	r0, #120	@ 0x78
 80027fa:	f000 faa1 	bl	8002d40 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	3301      	adds	r3, #1
 8002802:	71fb      	strb	r3, [r7, #7]
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	2b07      	cmp	r3, #7
 8002808:	d9de      	bls.n	80027c8 <SSD1306_UpdateScreen+0xc>
	}
}
 800280a:	bf00      	nop
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	200020b8 	.word	0x200020b8

08002818 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <SSD1306_Fill+0x14>
 8002828:	2300      	movs	r3, #0
 800282a:	e000      	b.n	800282e <SSD1306_Fill+0x16>
 800282c:	23ff      	movs	r3, #255	@ 0xff
 800282e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002832:	4619      	mov	r1, r3
 8002834:	4803      	ldr	r0, [pc, #12]	@ (8002844 <SSD1306_Fill+0x2c>)
 8002836:	f008 fac3 	bl	800adc0 <memset>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	200020b8 	.word	0x200020b8

08002848 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	80fb      	strh	r3, [r7, #6]
 8002852:	460b      	mov	r3, r1
 8002854:	80bb      	strh	r3, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	70fb      	strb	r3, [r7, #3]
	if (
 800285a:	88fb      	ldrh	r3, [r7, #6]
 800285c:	2b7f      	cmp	r3, #127	@ 0x7f
 800285e:	d848      	bhi.n	80028f2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002860:	88bb      	ldrh	r3, [r7, #4]
 8002862:	2b3f      	cmp	r3, #63	@ 0x3f
 8002864:	d845      	bhi.n	80028f2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002866:	4b25      	ldr	r3, [pc, #148]	@ (80028fc <SSD1306_DrawPixel+0xb4>)
 8002868:	791b      	ldrb	r3, [r3, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d006      	beq.n	800287c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d11a      	bne.n	80028b8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002882:	88fa      	ldrh	r2, [r7, #6]
 8002884:	88bb      	ldrh	r3, [r7, #4]
 8002886:	08db      	lsrs	r3, r3, #3
 8002888:	b298      	uxth	r0, r3
 800288a:	4603      	mov	r3, r0
 800288c:	01db      	lsls	r3, r3, #7
 800288e:	4413      	add	r3, r2
 8002890:	4a1b      	ldr	r2, [pc, #108]	@ (8002900 <SSD1306_DrawPixel+0xb8>)
 8002892:	5cd3      	ldrb	r3, [r2, r3]
 8002894:	b25a      	sxtb	r2, r3
 8002896:	88bb      	ldrh	r3, [r7, #4]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	2101      	movs	r1, #1
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	b25b      	sxtb	r3, r3
 80028a4:	4313      	orrs	r3, r2
 80028a6:	b259      	sxtb	r1, r3
 80028a8:	88fa      	ldrh	r2, [r7, #6]
 80028aa:	4603      	mov	r3, r0
 80028ac:	01db      	lsls	r3, r3, #7
 80028ae:	4413      	add	r3, r2
 80028b0:	b2c9      	uxtb	r1, r1
 80028b2:	4a13      	ldr	r2, [pc, #76]	@ (8002900 <SSD1306_DrawPixel+0xb8>)
 80028b4:	54d1      	strb	r1, [r2, r3]
 80028b6:	e01d      	b.n	80028f4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80028b8:	88fa      	ldrh	r2, [r7, #6]
 80028ba:	88bb      	ldrh	r3, [r7, #4]
 80028bc:	08db      	lsrs	r3, r3, #3
 80028be:	b298      	uxth	r0, r3
 80028c0:	4603      	mov	r3, r0
 80028c2:	01db      	lsls	r3, r3, #7
 80028c4:	4413      	add	r3, r2
 80028c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002900 <SSD1306_DrawPixel+0xb8>)
 80028c8:	5cd3      	ldrb	r3, [r2, r3]
 80028ca:	b25a      	sxtb	r2, r3
 80028cc:	88bb      	ldrh	r3, [r7, #4]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	2101      	movs	r1, #1
 80028d4:	fa01 f303 	lsl.w	r3, r1, r3
 80028d8:	b25b      	sxtb	r3, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	b25b      	sxtb	r3, r3
 80028de:	4013      	ands	r3, r2
 80028e0:	b259      	sxtb	r1, r3
 80028e2:	88fa      	ldrh	r2, [r7, #6]
 80028e4:	4603      	mov	r3, r0
 80028e6:	01db      	lsls	r3, r3, #7
 80028e8:	4413      	add	r3, r2
 80028ea:	b2c9      	uxtb	r1, r1
 80028ec:	4a04      	ldr	r2, [pc, #16]	@ (8002900 <SSD1306_DrawPixel+0xb8>)
 80028ee:	54d1      	strb	r1, [r2, r3]
 80028f0:	e000      	b.n	80028f4 <SSD1306_DrawPixel+0xac>
		return;
 80028f2:	bf00      	nop
	}
}
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	200024b8 	.word	0x200024b8
 8002900:	200020b8 	.word	0x200020b8

08002904 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	460a      	mov	r2, r1
 800290e:	80fb      	strh	r3, [r7, #6]
 8002910:	4613      	mov	r3, r2
 8002912:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002914:	4a05      	ldr	r2, [pc, #20]	@ (800292c <SSD1306_GotoXY+0x28>)
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800291a:	4a04      	ldr	r2, [pc, #16]	@ (800292c <SSD1306_GotoXY+0x28>)
 800291c:	88bb      	ldrh	r3, [r7, #4]
 800291e:	8053      	strh	r3, [r2, #2]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	200024b8 	.word	0x200024b8

08002930 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	71fb      	strb	r3, [r7, #7]
 800293c:	4613      	mov	r3, r2
 800293e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002940:	4b39      	ldr	r3, [pc, #228]	@ (8002a28 <SSD1306_Putc+0xf8>)
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	4413      	add	r3, r2
	if (
 800294c:	2b7f      	cmp	r3, #127	@ 0x7f
 800294e:	dc07      	bgt.n	8002960 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002950:	4b35      	ldr	r3, [pc, #212]	@ (8002a28 <SSD1306_Putc+0xf8>)
 8002952:	885b      	ldrh	r3, [r3, #2]
 8002954:	461a      	mov	r2, r3
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	785b      	ldrb	r3, [r3, #1]
 800295a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800295c:	2b3f      	cmp	r3, #63	@ 0x3f
 800295e:	dd01      	ble.n	8002964 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002960:	2300      	movs	r3, #0
 8002962:	e05d      	b.n	8002a20 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	e04b      	b.n	8002a02 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	3b20      	subs	r3, #32
 8002972:	6839      	ldr	r1, [r7, #0]
 8002974:	7849      	ldrb	r1, [r1, #1]
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4619      	mov	r1, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	440b      	add	r3, r1
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4413      	add	r3, r2
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002988:	2300      	movs	r3, #0
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	e030      	b.n	80029f0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d010      	beq.n	80029c0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800299e:	4b22      	ldr	r3, [pc, #136]	@ (8002a28 <SSD1306_Putc+0xf8>)
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	b298      	uxth	r0, r3
 80029aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002a28 <SSD1306_Putc+0xf8>)
 80029ac:	885a      	ldrh	r2, [r3, #2]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	79ba      	ldrb	r2, [r7, #6]
 80029b8:	4619      	mov	r1, r3
 80029ba:	f7ff ff45 	bl	8002848 <SSD1306_DrawPixel>
 80029be:	e014      	b.n	80029ea <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80029c0:	4b19      	ldr	r3, [pc, #100]	@ (8002a28 <SSD1306_Putc+0xf8>)
 80029c2:	881a      	ldrh	r2, [r3, #0]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	b298      	uxth	r0, r3
 80029cc:	4b16      	ldr	r3, [pc, #88]	@ (8002a28 <SSD1306_Putc+0xf8>)
 80029ce:	885a      	ldrh	r2, [r3, #2]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	b299      	uxth	r1, r3
 80029d8:	79bb      	ldrb	r3, [r7, #6]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	bf0c      	ite	eq
 80029de:	2301      	moveq	r3, #1
 80029e0:	2300      	movne	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	f7ff ff2f 	bl	8002848 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	3301      	adds	r3, #1
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d3c8      	bcc.n	800298e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3301      	adds	r3, #1
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	785b      	ldrb	r3, [r3, #1]
 8002a06:	461a      	mov	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d3ad      	bcc.n	800296a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002a0e:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <SSD1306_Putc+0xf8>)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	7812      	ldrb	r2, [r2, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	4b03      	ldr	r3, [pc, #12]	@ (8002a28 <SSD1306_Putc+0xf8>)
 8002a1c:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	200024b8 	.word	0x200024b8

08002a2c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	4613      	mov	r3, r2
 8002a38:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002a3a:	e012      	b.n	8002a62 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	79fa      	ldrb	r2, [r7, #7]
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff73 	bl	8002930 <SSD1306_Putc>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d002      	beq.n	8002a5c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	e008      	b.n	8002a6e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e8      	bne.n	8002a3c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8002a76:	b590      	push	{r4, r7, lr}
 8002a78:	b087      	sub	sp, #28
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	4608      	mov	r0, r1
 8002a80:	4611      	mov	r1, r2
 8002a82:	461a      	mov	r2, r3
 8002a84:	4623      	mov	r3, r4
 8002a86:	80fb      	strh	r3, [r7, #6]
 8002a88:	4603      	mov	r3, r0
 8002a8a:	80bb      	strh	r3, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	807b      	strh	r3, [r7, #2]
 8002a90:	4613      	mov	r3, r2
 8002a92:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a98:	d901      	bls.n	8002a9e <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8002a9a:	237f      	movs	r3, #127	@ 0x7f
 8002a9c:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8002a9e:	887b      	ldrh	r3, [r7, #2]
 8002aa0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002aa2:	d901      	bls.n	8002aa8 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8002aa4:	237f      	movs	r3, #127	@ 0x7f
 8002aa6:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8002aa8:	88bb      	ldrh	r3, [r7, #4]
 8002aaa:	2b3f      	cmp	r3, #63	@ 0x3f
 8002aac:	d901      	bls.n	8002ab2 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8002aae:	233f      	movs	r3, #63	@ 0x3f
 8002ab0:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8002ab2:	883b      	ldrh	r3, [r7, #0]
 8002ab4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ab6:	d901      	bls.n	8002abc <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8002ab8:	233f      	movs	r3, #63	@ 0x3f
 8002aba:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8002abc:	88fa      	ldrh	r2, [r7, #6]
 8002abe:	887b      	ldrh	r3, [r7, #2]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d205      	bcs.n	8002ad0 <SSD1306_DrawLine+0x5a>
 8002ac4:	887a      	ldrh	r2, [r7, #2]
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	b21b      	sxth	r3, r3
 8002ace:	e004      	b.n	8002ada <SSD1306_DrawLine+0x64>
 8002ad0:	88fa      	ldrh	r2, [r7, #6]
 8002ad2:	887b      	ldrh	r3, [r7, #2]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	b21b      	sxth	r3, r3
 8002ada:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8002adc:	88ba      	ldrh	r2, [r7, #4]
 8002ade:	883b      	ldrh	r3, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d205      	bcs.n	8002af0 <SSD1306_DrawLine+0x7a>
 8002ae4:	883a      	ldrh	r2, [r7, #0]
 8002ae6:	88bb      	ldrh	r3, [r7, #4]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	b21b      	sxth	r3, r3
 8002aee:	e004      	b.n	8002afa <SSD1306_DrawLine+0x84>
 8002af0:	88ba      	ldrh	r2, [r7, #4]
 8002af2:	883b      	ldrh	r3, [r7, #0]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	b21b      	sxth	r3, r3
 8002afa:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8002afc:	88fa      	ldrh	r2, [r7, #6]
 8002afe:	887b      	ldrh	r3, [r7, #2]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d201      	bcs.n	8002b08 <SSD1306_DrawLine+0x92>
 8002b04:	2301      	movs	r3, #1
 8002b06:	e001      	b.n	8002b0c <SSD1306_DrawLine+0x96>
 8002b08:	f04f 33ff 	mov.w	r3, #4294967295
 8002b0c:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8002b0e:	88ba      	ldrh	r2, [r7, #4]
 8002b10:	883b      	ldrh	r3, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d201      	bcs.n	8002b1a <SSD1306_DrawLine+0xa4>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e001      	b.n	8002b1e <SSD1306_DrawLine+0xa8>
 8002b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1e:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8002b20:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002b24:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	dd06      	ble.n	8002b3a <SSD1306_DrawLine+0xc4>
 8002b2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b30:	0fda      	lsrs	r2, r3, #31
 8002b32:	4413      	add	r3, r2
 8002b34:	105b      	asrs	r3, r3, #1
 8002b36:	b21b      	sxth	r3, r3
 8002b38:	e006      	b.n	8002b48 <SSD1306_DrawLine+0xd2>
 8002b3a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b3e:	0fda      	lsrs	r2, r3, #31
 8002b40:	4413      	add	r3, r2
 8002b42:	105b      	asrs	r3, r3, #1
 8002b44:	425b      	negs	r3, r3
 8002b46:	b21b      	sxth	r3, r3
 8002b48:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8002b4a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d129      	bne.n	8002ba6 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8002b52:	883a      	ldrh	r2, [r7, #0]
 8002b54:	88bb      	ldrh	r3, [r7, #4]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d205      	bcs.n	8002b66 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8002b5a:	883b      	ldrh	r3, [r7, #0]
 8002b5c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002b5e:	88bb      	ldrh	r3, [r7, #4]
 8002b60:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002b62:	893b      	ldrh	r3, [r7, #8]
 8002b64:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8002b66:	887a      	ldrh	r2, [r7, #2]
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d205      	bcs.n	8002b7a <SSD1306_DrawLine+0x104>
			tmp = x1;
 8002b6e:	887b      	ldrh	r3, [r7, #2]
 8002b70:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8002b7a:	88bb      	ldrh	r3, [r7, #4]
 8002b7c:	82bb      	strh	r3, [r7, #20]
 8002b7e:	e00c      	b.n	8002b9a <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8002b80:	8ab9      	ldrh	r1, [r7, #20]
 8002b82:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff fe5d 	bl	8002848 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8002b8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	3301      	adds	r3, #1
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	82bb      	strh	r3, [r7, #20]
 8002b9a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002b9e:	883b      	ldrh	r3, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	dded      	ble.n	8002b80 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8002ba4:	e05f      	b.n	8002c66 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8002ba6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d129      	bne.n	8002c02 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8002bae:	883a      	ldrh	r2, [r7, #0]
 8002bb0:	88bb      	ldrh	r3, [r7, #4]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d205      	bcs.n	8002bc2 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8002bb6:	883b      	ldrh	r3, [r7, #0]
 8002bb8:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002bba:	88bb      	ldrh	r3, [r7, #4]
 8002bbc:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002bbe:	893b      	ldrh	r3, [r7, #8]
 8002bc0:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8002bc2:	887a      	ldrh	r2, [r7, #2]
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d205      	bcs.n	8002bd6 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8002bca:	887b      	ldrh	r3, [r7, #2]
 8002bcc:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002bd2:	893b      	ldrh	r3, [r7, #8]
 8002bd4:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	82bb      	strh	r3, [r7, #20]
 8002bda:	e00c      	b.n	8002bf6 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8002bdc:	8abb      	ldrh	r3, [r7, #20]
 8002bde:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002be2:	88b9      	ldrh	r1, [r7, #4]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fe2f 	bl	8002848 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8002bea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	82bb      	strh	r3, [r7, #20]
 8002bf6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002bfa:	887b      	ldrh	r3, [r7, #2]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	dded      	ble.n	8002bdc <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8002c00:	e031      	b.n	8002c66 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8002c02:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002c06:	88b9      	ldrh	r1, [r7, #4]
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fe1c 	bl	8002848 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8002c10:	88fa      	ldrh	r2, [r7, #6]
 8002c12:	887b      	ldrh	r3, [r7, #2]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d103      	bne.n	8002c20 <SSD1306_DrawLine+0x1aa>
 8002c18:	88ba      	ldrh	r2, [r7, #4]
 8002c1a:	883b      	ldrh	r3, [r7, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d021      	beq.n	8002c64 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8002c20:	8afb      	ldrh	r3, [r7, #22]
 8002c22:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8002c24:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002c28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c2c:	425b      	negs	r3, r3
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	dd08      	ble.n	8002c44 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8002c32:	8afa      	ldrh	r2, [r7, #22]
 8002c34:	8a3b      	ldrh	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8002c3c:	89fa      	ldrh	r2, [r7, #14]
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	4413      	add	r3, r2
 8002c42:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8002c44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002c48:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	dad8      	bge.n	8002c02 <SSD1306_DrawLine+0x18c>
			err += dx;
 8002c50:	8afa      	ldrh	r2, [r7, #22]
 8002c52:	8a7b      	ldrh	r3, [r7, #18]
 8002c54:	4413      	add	r3, r2
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8002c5a:	89ba      	ldrh	r2, [r7, #12]
 8002c5c:	88bb      	ldrh	r3, [r7, #4]
 8002c5e:	4413      	add	r3, r2
 8002c60:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8002c62:	e7ce      	b.n	8002c02 <SSD1306_DrawLine+0x18c>
			break;
 8002c64:	bf00      	nop
		} 
	}
}
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd90      	pop	{r4, r7, pc}

08002c6c <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8002c6c:	b590      	push	{r4, r7, lr}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	4604      	mov	r4, r0
 8002c74:	4608      	mov	r0, r1
 8002c76:	4611      	mov	r1, r2
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4623      	mov	r3, r4
 8002c7c:	80fb      	strh	r3, [r7, #6]
 8002c7e:	4603      	mov	r3, r0
 8002c80:	80bb      	strh	r3, [r7, #4]
 8002c82:	460b      	mov	r3, r1
 8002c84:	807b      	strh	r3, [r7, #2]
 8002c86:	4613      	mov	r3, r2
 8002c88:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c8e:	d836      	bhi.n	8002cfe <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8002c90:	88bb      	ldrh	r3, [r7, #4]
 8002c92:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c94:	d833      	bhi.n	8002cfe <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8002c96:	88fa      	ldrh	r2, [r7, #6]
 8002c98:	887b      	ldrh	r3, [r7, #2]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c9e:	dd03      	ble.n	8002ca8 <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002ca6:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8002ca8:	88ba      	ldrh	r2, [r7, #4]
 8002caa:	883b      	ldrh	r3, [r7, #0]
 8002cac:	4413      	add	r3, r2
 8002cae:	2b3f      	cmp	r3, #63	@ 0x3f
 8002cb0:	dd03      	ble.n	8002cba <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8002cb2:	88bb      	ldrh	r3, [r7, #4]
 8002cb4:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8002cb8:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8002cba:	2300      	movs	r3, #0
 8002cbc:	73fb      	strb	r3, [r7, #15]
 8002cbe:	e018      	b.n	8002cf2 <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	88bb      	ldrh	r3, [r7, #4]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	b299      	uxth	r1, r3
 8002cca:	88fa      	ldrh	r2, [r7, #6]
 8002ccc:	887b      	ldrh	r3, [r7, #2]
 8002cce:	4413      	add	r3, r2
 8002cd0:	b29c      	uxth	r4, r3
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	88bb      	ldrh	r3, [r7, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	88f8      	ldrh	r0, [r7, #6]
 8002cde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	4622      	mov	r2, r4
 8002ce8:	f7ff fec5 	bl	8002a76 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	883a      	ldrh	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d2e1      	bcs.n	8002cc0 <SSD1306_DrawFilledRectangle+0x54>
 8002cfc:	e000      	b.n	8002d00 <SSD1306_DrawFilledRectangle+0x94>
		return;
 8002cfe:	bf00      	nop
	}
}
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd90      	pop	{r4, r7, pc}

08002d06 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f7ff fd84 	bl	8002818 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002d10:	f7ff fd54 	bl	80027bc <SSD1306_UpdateScreen>
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002d1e:	4b07      	ldr	r3, [pc, #28]	@ (8002d3c <ssd1306_I2C_Init+0x24>)
 8002d20:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002d22:	e002      	b.n	8002d2a <ssd1306_I2C_Init+0x12>
		p--;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1f9      	bne.n	8002d24 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	0003d090 	.word	0x0003d090

08002d40 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b0c7      	sub	sp, #284	@ 0x11c
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	4604      	mov	r4, r0
 8002d48:	4608      	mov	r0, r1
 8002d4a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8002d4e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8002d52:	600a      	str	r2, [r1, #0]
 8002d54:	4619      	mov	r1, r3
 8002d56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d5a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002d5e:	4622      	mov	r2, r4
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d66:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d76:	460a      	mov	r2, r1
 8002d78:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002d7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d82:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002d86:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8002d8a:	7812      	ldrb	r2, [r2, #0]
 8002d8c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002d94:	e015      	b.n	8002dc2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002d96:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002d9a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002d9e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	441a      	add	r2, r3
 8002da6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002daa:	3301      	adds	r3, #1
 8002dac:	7811      	ldrb	r1, [r2, #0]
 8002dae:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002db2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002db6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002db8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002dc2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002dcc:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002dd0:	8812      	ldrh	r2, [r2, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d8df      	bhi.n	8002d96 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002dd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002dda:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	b299      	uxth	r1, r3
 8002de2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002de6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	3301      	adds	r3, #1
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	f107 020c 	add.w	r2, r7, #12
 8002df4:	200a      	movs	r0, #10
 8002df6:	9000      	str	r0, [sp, #0]
 8002df8:	4803      	ldr	r0, [pc, #12]	@ (8002e08 <ssd1306_I2C_WriteMulti+0xc8>)
 8002dfa:	f002 f81b 	bl	8004e34 <HAL_I2C_Master_Transmit>
}
 8002dfe:	bf00      	nop
 8002e00:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd90      	pop	{r4, r7, pc}
 8002e08:	200010dc 	.word	0x200010dc

08002e0c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	4603      	mov	r3, r0
 8002e14:	71fb      	strb	r3, [r7, #7]
 8002e16:	460b      	mov	r3, r1
 8002e18:	71bb      	strb	r3, [r7, #6]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002e1e:	79bb      	ldrb	r3, [r7, #6]
 8002e20:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002e22:	797b      	ldrb	r3, [r7, #5]
 8002e24:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	b299      	uxth	r1, r3
 8002e2a:	f107 020c 	add.w	r2, r7, #12
 8002e2e:	230a      	movs	r3, #10
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	2302      	movs	r3, #2
 8002e34:	4803      	ldr	r0, [pc, #12]	@ (8002e44 <ssd1306_I2C_Write+0x38>)
 8002e36:	f001 fffd 	bl	8004e34 <HAL_I2C_Master_Transmit>
}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	200010dc 	.word	0x200010dc

08002e48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e4e:	4b18      	ldr	r3, [pc, #96]	@ (8002eb0 <HAL_MspInit+0x68>)
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	4a17      	ldr	r2, [pc, #92]	@ (8002eb0 <HAL_MspInit+0x68>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6193      	str	r3, [r2, #24]
 8002e5a:	4b15      	ldr	r3, [pc, #84]	@ (8002eb0 <HAL_MspInit+0x68>)
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e66:	4b12      	ldr	r3, [pc, #72]	@ (8002eb0 <HAL_MspInit+0x68>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	4a11      	ldr	r2, [pc, #68]	@ (8002eb0 <HAL_MspInit+0x68>)
 8002e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e70:	61d3      	str	r3, [r2, #28]
 8002e72:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb0 <HAL_MspInit+0x68>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	607b      	str	r3, [r7, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	210f      	movs	r1, #15
 8002e82:	f06f 0001 	mvn.w	r0, #1
 8002e86:	f001 fa4c 	bl	8004322 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb4 <HAL_MspInit+0x6c>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	4a04      	ldr	r2, [pc, #16]	@ (8002eb4 <HAL_MspInit+0x6c>)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40010000 	.word	0x40010000

08002eb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	f107 0310 	add.w	r3, r7, #16
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a18      	ldr	r2, [pc, #96]	@ (8002f34 <HAL_ADC_MspInit+0x7c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d129      	bne.n	8002f2c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ed8:	4b17      	ldr	r3, [pc, #92]	@ (8002f38 <HAL_ADC_MspInit+0x80>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	4a16      	ldr	r2, [pc, #88]	@ (8002f38 <HAL_ADC_MspInit+0x80>)
 8002ede:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ee2:	6193      	str	r3, [r2, #24]
 8002ee4:	4b14      	ldr	r3, [pc, #80]	@ (8002f38 <HAL_ADC_MspInit+0x80>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef0:	4b11      	ldr	r3, [pc, #68]	@ (8002f38 <HAL_ADC_MspInit+0x80>)
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	4a10      	ldr	r2, [pc, #64]	@ (8002f38 <HAL_ADC_MspInit+0x80>)
 8002ef6:	f043 0304 	orr.w	r3, r3, #4
 8002efa:	6193      	str	r3, [r2, #24]
 8002efc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f38 <HAL_ADC_MspInit+0x80>)
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f08:	2304      	movs	r3, #4
 8002f0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f10:	f107 0310 	add.w	r3, r7, #16
 8002f14:	4619      	mov	r1, r3
 8002f16:	4809      	ldr	r0, [pc, #36]	@ (8002f3c <HAL_ADC_MspInit+0x84>)
 8002f18:	f001 fc94 	bl	8004844 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2105      	movs	r1, #5
 8002f20:	2012      	movs	r0, #18
 8002f22:	f001 f9fe 	bl	8004322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002f26:	2012      	movs	r0, #18
 8002f28:	f001 fa17 	bl	800435a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002f2c:	bf00      	nop
 8002f2e:	3720      	adds	r7, #32
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40012400 	.word	0x40012400
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40010800 	.word	0x40010800

08002f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 0310 	add.w	r3, r7, #16
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a15      	ldr	r2, [pc, #84]	@ (8002fb0 <HAL_I2C_MspInit+0x70>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d123      	bne.n	8002fa8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f60:	4b14      	ldr	r3, [pc, #80]	@ (8002fb4 <HAL_I2C_MspInit+0x74>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	4a13      	ldr	r2, [pc, #76]	@ (8002fb4 <HAL_I2C_MspInit+0x74>)
 8002f66:	f043 0308 	orr.w	r3, r3, #8
 8002f6a:	6193      	str	r3, [r2, #24]
 8002f6c:	4b11      	ldr	r3, [pc, #68]	@ (8002fb4 <HAL_I2C_MspInit+0x74>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f78:	23c0      	movs	r3, #192	@ 0xc0
 8002f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f7c:	2312      	movs	r3, #18
 8002f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f80:	2303      	movs	r3, #3
 8002f82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f84:	f107 0310 	add.w	r3, r7, #16
 8002f88:	4619      	mov	r1, r3
 8002f8a:	480b      	ldr	r0, [pc, #44]	@ (8002fb8 <HAL_I2C_MspInit+0x78>)
 8002f8c:	f001 fc5a 	bl	8004844 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f90:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <HAL_I2C_MspInit+0x74>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	4a07      	ldr	r2, [pc, #28]	@ (8002fb4 <HAL_I2C_MspInit+0x74>)
 8002f96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f9a:	61d3      	str	r3, [r2, #28]
 8002f9c:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <HAL_I2C_MspInit+0x74>)
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002fa8:	bf00      	nop
 8002faa:	3720      	adds	r7, #32
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40005400 	.word	0x40005400
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40010c00 	.word	0x40010c00

08002fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fcc:	d114      	bne.n	8002ff8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fce:	4b2c      	ldr	r3, [pc, #176]	@ (8003080 <HAL_TIM_Base_MspInit+0xc4>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	4a2b      	ldr	r2, [pc, #172]	@ (8003080 <HAL_TIM_Base_MspInit+0xc4>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	61d3      	str	r3, [r2, #28]
 8002fda:	4b29      	ldr	r3, [pc, #164]	@ (8003080 <HAL_TIM_Base_MspInit+0xc4>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2100      	movs	r1, #0
 8002fea:	201c      	movs	r0, #28
 8002fec:	f001 f999 	bl	8004322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ff0:	201c      	movs	r0, #28
 8002ff2:	f001 f9b2 	bl	800435a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002ff6:	e03e      	b.n	8003076 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a21      	ldr	r2, [pc, #132]	@ (8003084 <HAL_TIM_Base_MspInit+0xc8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d139      	bne.n	8003076 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003002:	4b1f      	ldr	r3, [pc, #124]	@ (8003080 <HAL_TIM_Base_MspInit+0xc4>)
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	4a1e      	ldr	r2, [pc, #120]	@ (8003080 <HAL_TIM_Base_MspInit+0xc4>)
 8003008:	f043 0302 	orr.w	r3, r3, #2
 800300c:	61d3      	str	r3, [r2, #28]
 800300e:	4b1c      	ldr	r3, [pc, #112]	@ (8003080 <HAL_TIM_Base_MspInit+0xc4>)
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 800301a:	4b1b      	ldr	r3, [pc, #108]	@ (8003088 <HAL_TIM_Base_MspInit+0xcc>)
 800301c:	4a1b      	ldr	r2, [pc, #108]	@ (800308c <HAL_TIM_Base_MspInit+0xd0>)
 800301e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003020:	4b19      	ldr	r3, [pc, #100]	@ (8003088 <HAL_TIM_Base_MspInit+0xcc>)
 8003022:	2210      	movs	r2, #16
 8003024:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8003026:	4b18      	ldr	r3, [pc, #96]	@ (8003088 <HAL_TIM_Base_MspInit+0xcc>)
 8003028:	2200      	movs	r2, #0
 800302a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800302c:	4b16      	ldr	r3, [pc, #88]	@ (8003088 <HAL_TIM_Base_MspInit+0xcc>)
 800302e:	2280      	movs	r2, #128	@ 0x80
 8003030:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003032:	4b15      	ldr	r3, [pc, #84]	@ (8003088 <HAL_TIM_Base_MspInit+0xcc>)
 8003034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003038:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800303a:	4b13      	ldr	r3, [pc, #76]	@ (8003088 <HAL_TIM_Base_MspInit+0xcc>)
 800303c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003040:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8003042:	4b11      	ldr	r3, [pc, #68]	@ (8003088 <HAL_TIM_Base_MspInit+0xcc>)
 8003044:	2220      	movs	r2, #32
 8003046:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8003048:	4b0f      	ldr	r3, [pc, #60]	@ (8003088 <HAL_TIM_Base_MspInit+0xcc>)
 800304a:	2200      	movs	r2, #0
 800304c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800304e:	480e      	ldr	r0, [pc, #56]	@ (8003088 <HAL_TIM_Base_MspInit+0xcc>)
 8003050:	f001 f992 	bl	8004378 <HAL_DMA_Init>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_TIM_Base_MspInit+0xa2>
      Error_Handler();
 800305a:	f7ff fae5 	bl	8002628 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a09      	ldr	r2, [pc, #36]	@ (8003088 <HAL_TIM_Base_MspInit+0xcc>)
 8003062:	625a      	str	r2, [r3, #36]	@ 0x24
 8003064:	4a08      	ldr	r2, [pc, #32]	@ (8003088 <HAL_TIM_Base_MspInit+0xcc>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a06      	ldr	r2, [pc, #24]	@ (8003088 <HAL_TIM_Base_MspInit+0xcc>)
 800306e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003070:	4a05      	ldr	r2, [pc, #20]	@ (8003088 <HAL_TIM_Base_MspInit+0xcc>)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40021000 	.word	0x40021000
 8003084:	40000400 	.word	0x40000400
 8003088:	200011c0 	.word	0x200011c0
 800308c:	4002006c 	.word	0x4002006c

08003090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	f107 0310 	add.w	r3, r7, #16
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a0f      	ldr	r2, [pc, #60]	@ (80030e8 <HAL_TIM_MspPostInit+0x58>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d117      	bne.n	80030e0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b0:	4b0e      	ldr	r3, [pc, #56]	@ (80030ec <HAL_TIM_MspPostInit+0x5c>)
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	4a0d      	ldr	r2, [pc, #52]	@ (80030ec <HAL_TIM_MspPostInit+0x5c>)
 80030b6:	f043 0304 	orr.w	r3, r3, #4
 80030ba:	6193      	str	r3, [r2, #24]
 80030bc:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <HAL_TIM_MspPostInit+0x5c>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030c8:	2340      	movs	r3, #64	@ 0x40
 80030ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030cc:	2302      	movs	r3, #2
 80030ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d0:	2302      	movs	r3, #2
 80030d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d4:	f107 0310 	add.w	r3, r7, #16
 80030d8:	4619      	mov	r1, r3
 80030da:	4805      	ldr	r0, [pc, #20]	@ (80030f0 <HAL_TIM_MspPostInit+0x60>)
 80030dc:	f001 fbb2 	bl	8004844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80030e0:	bf00      	nop
 80030e2:	3720      	adds	r7, #32
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40000400 	.word	0x40000400
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40010800 	.word	0x40010800

080030f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030fc:	f107 0310 	add.w	r3, r7, #16
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a2f      	ldr	r2, [pc, #188]	@ (80031cc <HAL_UART_MspInit+0xd8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d157      	bne.n	80031c4 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003114:	4b2e      	ldr	r3, [pc, #184]	@ (80031d0 <HAL_UART_MspInit+0xdc>)
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	4a2d      	ldr	r2, [pc, #180]	@ (80031d0 <HAL_UART_MspInit+0xdc>)
 800311a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800311e:	6193      	str	r3, [r2, #24]
 8003120:	4b2b      	ldr	r3, [pc, #172]	@ (80031d0 <HAL_UART_MspInit+0xdc>)
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312c:	4b28      	ldr	r3, [pc, #160]	@ (80031d0 <HAL_UART_MspInit+0xdc>)
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	4a27      	ldr	r2, [pc, #156]	@ (80031d0 <HAL_UART_MspInit+0xdc>)
 8003132:	f043 0304 	orr.w	r3, r3, #4
 8003136:	6193      	str	r3, [r2, #24]
 8003138:	4b25      	ldr	r3, [pc, #148]	@ (80031d0 <HAL_UART_MspInit+0xdc>)
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003144:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003148:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314a:	2302      	movs	r3, #2
 800314c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800314e:	2303      	movs	r3, #3
 8003150:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003152:	f107 0310 	add.w	r3, r7, #16
 8003156:	4619      	mov	r1, r3
 8003158:	481e      	ldr	r0, [pc, #120]	@ (80031d4 <HAL_UART_MspInit+0xe0>)
 800315a:	f001 fb73 	bl	8004844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800315e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003162:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316c:	f107 0310 	add.w	r3, r7, #16
 8003170:	4619      	mov	r1, r3
 8003172:	4818      	ldr	r0, [pc, #96]	@ (80031d4 <HAL_UART_MspInit+0xe0>)
 8003174:	f001 fb66 	bl	8004844 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003178:	4b17      	ldr	r3, [pc, #92]	@ (80031d8 <HAL_UART_MspInit+0xe4>)
 800317a:	4a18      	ldr	r2, [pc, #96]	@ (80031dc <HAL_UART_MspInit+0xe8>)
 800317c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800317e:	4b16      	ldr	r3, [pc, #88]	@ (80031d8 <HAL_UART_MspInit+0xe4>)
 8003180:	2210      	movs	r2, #16
 8003182:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003184:	4b14      	ldr	r3, [pc, #80]	@ (80031d8 <HAL_UART_MspInit+0xe4>)
 8003186:	2200      	movs	r2, #0
 8003188:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800318a:	4b13      	ldr	r3, [pc, #76]	@ (80031d8 <HAL_UART_MspInit+0xe4>)
 800318c:	2280      	movs	r2, #128	@ 0x80
 800318e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003190:	4b11      	ldr	r3, [pc, #68]	@ (80031d8 <HAL_UART_MspInit+0xe4>)
 8003192:	2200      	movs	r2, #0
 8003194:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003196:	4b10      	ldr	r3, [pc, #64]	@ (80031d8 <HAL_UART_MspInit+0xe4>)
 8003198:	2200      	movs	r2, #0
 800319a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800319c:	4b0e      	ldr	r3, [pc, #56]	@ (80031d8 <HAL_UART_MspInit+0xe4>)
 800319e:	2200      	movs	r2, #0
 80031a0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031a2:	4b0d      	ldr	r3, [pc, #52]	@ (80031d8 <HAL_UART_MspInit+0xe4>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80031a8:	480b      	ldr	r0, [pc, #44]	@ (80031d8 <HAL_UART_MspInit+0xe4>)
 80031aa:	f001 f8e5 	bl	8004378 <HAL_DMA_Init>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80031b4:	f7ff fa38 	bl	8002628 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a07      	ldr	r2, [pc, #28]	@ (80031d8 <HAL_UART_MspInit+0xe4>)
 80031bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80031be:	4a06      	ldr	r2, [pc, #24]	@ (80031d8 <HAL_UART_MspInit+0xe4>)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80031c4:	bf00      	nop
 80031c6:	3720      	adds	r7, #32
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40013800 	.word	0x40013800
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40010800 	.word	0x40010800
 80031d8:	2000124c 	.word	0x2000124c
 80031dc:	40020044 	.word	0x40020044

080031e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08e      	sub	sp, #56	@ 0x38
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80031f6:	4b34      	ldr	r3, [pc, #208]	@ (80032c8 <HAL_InitTick+0xe8>)
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4a33      	ldr	r2, [pc, #204]	@ (80032c8 <HAL_InitTick+0xe8>)
 80031fc:	f043 0304 	orr.w	r3, r3, #4
 8003200:	61d3      	str	r3, [r2, #28]
 8003202:	4b31      	ldr	r3, [pc, #196]	@ (80032c8 <HAL_InitTick+0xe8>)
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800320e:	f107 0210 	add.w	r2, r7, #16
 8003212:	f107 0314 	add.w	r3, r7, #20
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f002 fe83 	bl	8005f24 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003224:	2b00      	cmp	r3, #0
 8003226:	d103      	bne.n	8003230 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003228:	f002 fe54 	bl	8005ed4 <HAL_RCC_GetPCLK1Freq>
 800322c:	6378      	str	r0, [r7, #52]	@ 0x34
 800322e:	e004      	b.n	800323a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003230:	f002 fe50 	bl	8005ed4 <HAL_RCC_GetPCLK1Freq>
 8003234:	4603      	mov	r3, r0
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800323a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800323c:	4a23      	ldr	r2, [pc, #140]	@ (80032cc <HAL_InitTick+0xec>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	0c9b      	lsrs	r3, r3, #18
 8003244:	3b01      	subs	r3, #1
 8003246:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003248:	4b21      	ldr	r3, [pc, #132]	@ (80032d0 <HAL_InitTick+0xf0>)
 800324a:	4a22      	ldr	r2, [pc, #136]	@ (80032d4 <HAL_InitTick+0xf4>)
 800324c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800324e:	4b20      	ldr	r3, [pc, #128]	@ (80032d0 <HAL_InitTick+0xf0>)
 8003250:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003254:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003256:	4a1e      	ldr	r2, [pc, #120]	@ (80032d0 <HAL_InitTick+0xf0>)
 8003258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800325c:	4b1c      	ldr	r3, [pc, #112]	@ (80032d0 <HAL_InitTick+0xf0>)
 800325e:	2200      	movs	r2, #0
 8003260:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003262:	4b1b      	ldr	r3, [pc, #108]	@ (80032d0 <HAL_InitTick+0xf0>)
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003268:	4b19      	ldr	r3, [pc, #100]	@ (80032d0 <HAL_InitTick+0xf0>)
 800326a:	2200      	movs	r2, #0
 800326c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800326e:	4818      	ldr	r0, [pc, #96]	@ (80032d0 <HAL_InitTick+0xf0>)
 8003270:	f003 f812 	bl	8006298 <HAL_TIM_Base_Init>
 8003274:	4603      	mov	r3, r0
 8003276:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800327a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800327e:	2b00      	cmp	r3, #0
 8003280:	d11b      	bne.n	80032ba <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8003282:	4813      	ldr	r0, [pc, #76]	@ (80032d0 <HAL_InitTick+0xf0>)
 8003284:	f003 f858 	bl	8006338 <HAL_TIM_Base_Start_IT>
 8003288:	4603      	mov	r3, r0
 800328a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800328e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003292:	2b00      	cmp	r3, #0
 8003294:	d111      	bne.n	80032ba <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003296:	201e      	movs	r0, #30
 8003298:	f001 f85f 	bl	800435a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b0f      	cmp	r3, #15
 80032a0:	d808      	bhi.n	80032b4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80032a2:	2200      	movs	r2, #0
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	201e      	movs	r0, #30
 80032a8:	f001 f83b 	bl	8004322 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032ac:	4a0a      	ldr	r2, [pc, #40]	@ (80032d8 <HAL_InitTick+0xf8>)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	e002      	b.n	80032ba <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80032ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3738      	adds	r7, #56	@ 0x38
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000
 80032cc:	431bde83 	.word	0x431bde83
 80032d0:	200024c0 	.word	0x200024c0
 80032d4:	40000800 	.word	0x40000800
 80032d8:	20001024 	.word	0x20001024

080032dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032e0:	bf00      	nop
 80032e2:	e7fd      	b.n	80032e0 <NMI_Handler+0x4>

080032e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032e8:	bf00      	nop
 80032ea:	e7fd      	b.n	80032e8 <HardFault_Handler+0x4>

080032ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032f0:	bf00      	nop
 80032f2:	e7fd      	b.n	80032f0 <MemManage_Handler+0x4>

080032f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032f8:	bf00      	nop
 80032fa:	e7fd      	b.n	80032f8 <BusFault_Handler+0x4>

080032fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003300:	bf00      	nop
 8003302:	e7fd      	b.n	8003300 <UsageFault_Handler+0x4>

08003304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003308:	bf00      	nop
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003314:	4802      	ldr	r0, [pc, #8]	@ (8003320 <DMA1_Channel4_IRQHandler+0x10>)
 8003316:	f001 f961 	bl	80045dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	2000124c 	.word	0x2000124c

08003324 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8003328:	4802      	ldr	r0, [pc, #8]	@ (8003334 <DMA1_Channel6_IRQHandler+0x10>)
 800332a:	f001 f957 	bl	80045dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	200011c0 	.word	0x200011c0

08003338 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800333c:	4802      	ldr	r0, [pc, #8]	@ (8003348 <ADC1_2_IRQHandler+0x10>)
 800333e:	f000 fccd 	bl	8003cdc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200010ac 	.word	0x200010ac

0800334c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003350:	4802      	ldr	r0, [pc, #8]	@ (800335c <TIM2_IRQHandler+0x10>)
 8003352:	f003 fb31 	bl	80069b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20001130 	.word	0x20001130

08003360 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003364:	4802      	ldr	r0, [pc, #8]	@ (8003370 <TIM4_IRQHandler+0x10>)
 8003366:	f003 fb27 	bl	80069b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800336a:	bf00      	nop
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	200024c0 	.word	0x200024c0

08003374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800337c:	4a14      	ldr	r2, [pc, #80]	@ (80033d0 <_sbrk+0x5c>)
 800337e:	4b15      	ldr	r3, [pc, #84]	@ (80033d4 <_sbrk+0x60>)
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003388:	4b13      	ldr	r3, [pc, #76]	@ (80033d8 <_sbrk+0x64>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d102      	bne.n	8003396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003390:	4b11      	ldr	r3, [pc, #68]	@ (80033d8 <_sbrk+0x64>)
 8003392:	4a12      	ldr	r2, [pc, #72]	@ (80033dc <_sbrk+0x68>)
 8003394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003396:	4b10      	ldr	r3, [pc, #64]	@ (80033d8 <_sbrk+0x64>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4413      	add	r3, r2
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d207      	bcs.n	80033b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033a4:	f007 fd6a 	bl	800ae7c <__errno>
 80033a8:	4603      	mov	r3, r0
 80033aa:	220c      	movs	r2, #12
 80033ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033ae:	f04f 33ff 	mov.w	r3, #4294967295
 80033b2:	e009      	b.n	80033c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033b4:	4b08      	ldr	r3, [pc, #32]	@ (80033d8 <_sbrk+0x64>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033ba:	4b07      	ldr	r3, [pc, #28]	@ (80033d8 <_sbrk+0x64>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4413      	add	r3, r2
 80033c2:	4a05      	ldr	r2, [pc, #20]	@ (80033d8 <_sbrk+0x64>)
 80033c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033c6:	68fb      	ldr	r3, [r7, #12]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20005000 	.word	0x20005000
 80033d4:	00000400 	.word	0x00000400
 80033d8:	20002508 	.word	0x20002508
 80033dc:	20004060 	.word	0x20004060

080033e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <Encoder_Get_Status>:

uint16_t SW1_ant=1;   //Si o si arranco con pull up
uint16_t SW2_ant=1;   //Si o si arranco con pull up


Encoder_Status Encoder_Get_Status(){
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
	uint16_t SW1;
	uint16_t SW2;
	int ds1;
	int ds2;
	SW1=HAL_GPIO_ReadPin(ENCODER1);
 80033f2:	2101      	movs	r1, #1
 80033f4:	4819      	ldr	r0, [pc, #100]	@ (800345c <Encoder_Get_Status+0x70>)
 80033f6:	f001 fba9 	bl	8004b4c <HAL_GPIO_ReadPin>
 80033fa:	4603      	mov	r3, r0
 80033fc:	81bb      	strh	r3, [r7, #12]
	SW2=HAL_GPIO_ReadPin(ENCODER2);
 80033fe:	2102      	movs	r1, #2
 8003400:	4816      	ldr	r0, [pc, #88]	@ (800345c <Encoder_Get_Status+0x70>)
 8003402:	f001 fba3 	bl	8004b4c <HAL_GPIO_ReadPin>
 8003406:	4603      	mov	r3, r0
 8003408:	817b      	strh	r3, [r7, #10]
	Encoder_Status sts=Neutral;
 800340a:	2302      	movs	r3, #2
 800340c:	73fb      	strb	r3, [r7, #15]
	ds1=SW1-SW1_ant;
 800340e:	89bb      	ldrh	r3, [r7, #12]
 8003410:	4a13      	ldr	r2, [pc, #76]	@ (8003460 <Encoder_Get_Status+0x74>)
 8003412:	8812      	ldrh	r2, [r2, #0]
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	607b      	str	r3, [r7, #4]
	ds2=SW2-SW2_ant;
 8003418:	897b      	ldrh	r3, [r7, #10]
 800341a:	4a12      	ldr	r2, [pc, #72]	@ (8003464 <Encoder_Get_Status+0x78>)
 800341c:	8812      	ldrh	r2, [r2, #0]
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	603b      	str	r3, [r7, #0]
	if(ds1==-1 && SW2==0){
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d104      	bne.n	8003434 <Encoder_Get_Status+0x48>
 800342a:	897b      	ldrh	r3, [r7, #10]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <Encoder_Get_Status+0x48>
		sts=Incremented;
 8003430:	2300      	movs	r3, #0
 8003432:	73fb      	strb	r3, [r7, #15]
	}
	if(ds2==-1 && SW1==0){
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343a:	d104      	bne.n	8003446 <Encoder_Get_Status+0x5a>
 800343c:	89bb      	ldrh	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <Encoder_Get_Status+0x5a>
		sts=Decremented;
 8003442:	2301      	movs	r3, #1
 8003444:	73fb      	strb	r3, [r7, #15]
	}
	SW1_ant=SW1;
 8003446:	4a06      	ldr	r2, [pc, #24]	@ (8003460 <Encoder_Get_Status+0x74>)
 8003448:	89bb      	ldrh	r3, [r7, #12]
 800344a:	8013      	strh	r3, [r2, #0]
	SW2_ant=SW2;
 800344c:	4a05      	ldr	r2, [pc, #20]	@ (8003464 <Encoder_Get_Status+0x78>)
 800344e:	897b      	ldrh	r3, [r7, #10]
 8003450:	8013      	strh	r3, [r2, #0]
	return sts;
 8003452:	7bfb      	ldrb	r3, [r7, #15]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40010800 	.word	0x40010800
 8003460:	20001020 	.word	0x20001020
 8003464:	20001022 	.word	0x20001022

08003468 <PrintBufferAsGraph>:

void PrintBufferAsGraph(uint32_t* buffer, size_t length,int amplitud,int frecuencia,uint8_t* x_p){
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	@ 0x28
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
	char buffer_char[10];
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003476:	2000      	movs	r0, #0
 8003478:	f7ff f9ce 	bl	8002818 <SSD1306_Fill>
    uint32_t maxValue = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	627b      	str	r3, [r7, #36]	@ 0x24
    for (size_t i = 1; i < length; i++) {
 8003480:	2301      	movs	r3, #1
 8003482:	623b      	str	r3, [r7, #32]
 8003484:	e014      	b.n	80034b0 <PrintBufferAsGraph+0x48>
        if (buffer[i] > maxValue) {
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4413      	add	r3, r2
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003492:	429a      	cmp	r2, r3
 8003494:	d209      	bcs.n	80034aa <PrintBufferAsGraph+0x42>
            maxValue = buffer[i];
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4413      	add	r3, r2
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	627b      	str	r3, [r7, #36]	@ 0x24
            *x_p=i;
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a8:	701a      	strb	r2, [r3, #0]
    for (size_t i = 1; i < length; i++) {
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	3301      	adds	r3, #1
 80034ae:	623b      	str	r3, [r7, #32]
 80034b0:	6a3a      	ldr	r2, [r7, #32]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d3e6      	bcc.n	8003486 <PrintBufferAsGraph+0x1e>
        }
    }
    if(maxValue==0){
 80034b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <PrintBufferAsGraph+0x5a>
    	maxValue=1;
 80034be:	2301      	movs	r3, #1
 80034c0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    if(maxValue<400){
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80034c8:	d202      	bcs.n	80034d0 <PrintBufferAsGraph+0x68>
    	maxValue=400;
 80034ca:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80034ce:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    for (size_t i = 0; i < length; i++) {
 80034d0:	2300      	movs	r3, #0
 80034d2:	61fb      	str	r3, [r7, #28]
 80034d4:	e021      	b.n	800351a <PrintBufferAsGraph+0xb2>
        uint8_t scaledValue = (uint8_t)((buffer[i] * SSD1306_HEIGHT) / maxValue);
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4413      	add	r3, r2
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	019a      	lsls	r2, r3, #6
 80034e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e8:	76bb      	strb	r3, [r7, #26]
        for (uint8_t j = 0; j < scaledValue; j++) {
 80034ea:	2300      	movs	r3, #0
 80034ec:	76fb      	strb	r3, [r7, #27]
 80034ee:	e00d      	b.n	800350c <PrintBufferAsGraph+0xa4>
            SSD1306_DrawPixel(i, SSD1306_HEIGHT - 1 - j, SSD1306_COLOR_WHITE);
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	b298      	uxth	r0, r3
 80034f4:	7efb      	ldrb	r3, [r7, #27]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2201      	movs	r2, #1
 8003500:	4619      	mov	r1, r3
 8003502:	f7ff f9a1 	bl	8002848 <SSD1306_DrawPixel>
        for (uint8_t j = 0; j < scaledValue; j++) {
 8003506:	7efb      	ldrb	r3, [r7, #27]
 8003508:	3301      	adds	r3, #1
 800350a:	76fb      	strb	r3, [r7, #27]
 800350c:	7efa      	ldrb	r2, [r7, #27]
 800350e:	7ebb      	ldrb	r3, [r7, #26]
 8003510:	429a      	cmp	r2, r3
 8003512:	d3ed      	bcc.n	80034f0 <PrintBufferAsGraph+0x88>
    for (size_t i = 0; i < length; i++) {
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	3301      	adds	r3, #1
 8003518:	61fb      	str	r3, [r7, #28]
 800351a:	69fa      	ldr	r2, [r7, #28]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	429a      	cmp	r2, r3
 8003520:	d3d9      	bcc.n	80034d6 <PrintBufferAsGraph+0x6e>
        }
    }

    SSD1306_GotoXY(90, 0);
 8003522:	2100      	movs	r1, #0
 8003524:	205a      	movs	r0, #90	@ 0x5a
 8003526:	f7ff f9ed 	bl	8002904 <SSD1306_GotoXY>
    sprintf(buffer_char, "%dmV", amplitud);
 800352a:	f107 0310 	add.w	r3, r7, #16
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4910      	ldr	r1, [pc, #64]	@ (8003574 <PrintBufferAsGraph+0x10c>)
 8003532:	4618      	mov	r0, r3
 8003534:	f007 fc24 	bl	800ad80 <siprintf>
    SSD1306_Puts(buffer_char, &Font_7x10, SSD1306_COLOR_BLACK);
 8003538:	f107 0310 	add.w	r3, r7, #16
 800353c:	2200      	movs	r2, #0
 800353e:	490e      	ldr	r1, [pc, #56]	@ (8003578 <PrintBufferAsGraph+0x110>)
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fa73 	bl	8002a2c <SSD1306_Puts>
    SSD1306_GotoXY(90, 10);
 8003546:	210a      	movs	r1, #10
 8003548:	205a      	movs	r0, #90	@ 0x5a
 800354a:	f7ff f9db 	bl	8002904 <SSD1306_GotoXY>
    sprintf(buffer_char, "%dHz", frecuencia);
 800354e:	f107 0310 	add.w	r3, r7, #16
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	4909      	ldr	r1, [pc, #36]	@ (800357c <PrintBufferAsGraph+0x114>)
 8003556:	4618      	mov	r0, r3
 8003558:	f007 fc12 	bl	800ad80 <siprintf>
    SSD1306_Puts(buffer_char, &Font_7x10, SSD1306_COLOR_BLACK);
 800355c:	f107 0310 	add.w	r3, r7, #16
 8003560:	2200      	movs	r2, #0
 8003562:	4905      	ldr	r1, [pc, #20]	@ (8003578 <PrintBufferAsGraph+0x110>)
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fa61 	bl	8002a2c <SSD1306_Puts>

}
 800356a:	bf00      	nop
 800356c:	3728      	adds	r7, #40	@ 0x28
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	0800ca4c 	.word	0x0800ca4c
 8003578:	20001000 	.word	0x20001000
 800357c:	0800ca54 	.word	0x0800ca54

08003580 <ImprimirLinea>:

void ImprimirLinea(char *s, uint8_t linea) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	70fb      	strb	r3, [r7, #3]
SSD1306_GotoXY(0, 0 + 14 * (linea - 1));
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	3b01      	subs	r3, #1
 8003590:	b29b      	uxth	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	00d2      	lsls	r2, r2, #3
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	b29b      	uxth	r3, r3
 800359c:	4619      	mov	r1, r3
 800359e:	2000      	movs	r0, #0
 80035a0:	f7ff f9b0 	bl	8002904 <SSD1306_GotoXY>
SSD1306_Puts("                    ", &Font_7x10, 1);
 80035a4:	2201      	movs	r2, #1
 80035a6:	490d      	ldr	r1, [pc, #52]	@ (80035dc <ImprimirLinea+0x5c>)
 80035a8:	480d      	ldr	r0, [pc, #52]	@ (80035e0 <ImprimirLinea+0x60>)
 80035aa:	f7ff fa3f 	bl	8002a2c <SSD1306_Puts>
SSD1306_GotoXY(0, 0 + 14 * (linea - 1));
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	00d2      	lsls	r2, r2, #3
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	b29b      	uxth	r3, r3
 80035be:	4619      	mov	r1, r3
 80035c0:	2000      	movs	r0, #0
 80035c2:	f7ff f99f 	bl	8002904 <SSD1306_GotoXY>
SSD1306_Puts(s, &Font_7x10, 1);
 80035c6:	2201      	movs	r2, #1
 80035c8:	4904      	ldr	r1, [pc, #16]	@ (80035dc <ImprimirLinea+0x5c>)
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff fa2e 	bl	8002a2c <SSD1306_Puts>
SSD1306_UpdateScreen();
 80035d0:	f7ff f8f4 	bl	80027bc <SSD1306_UpdateScreen>
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20001000 	.word	0x20001000
 80035e0:	0800ca5c 	.word	0x0800ca5c

080035e4 <antirebote_ftn>:

uint32_t antirebote_ftn(uint32_t antirebote_f){
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
	if(antirebote_f>0){
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d008      	beq.n	8003604 <antirebote_ftn+0x20>
		antirebote_f++;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3301      	adds	r3, #1
 80035f6:	607b      	str	r3, [r7, #4]
		if(antirebote_f>302){
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f5b3 7f97 	cmp.w	r3, #302	@ 0x12e
 80035fe:	d901      	bls.n	8003604 <antirebote_ftn+0x20>
			antirebote_f=0;
 8003600:	2300      	movs	r3, #0
 8003602:	607b      	str	r3, [r7, #4]
		}
	}
	return antirebote_f;
 8003604:	687b      	ldr	r3, [r7, #4]
}
 8003606:	4618      	mov	r0, r3
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <set_PWM_period>:

uint32_t set_PWM_period(uint32_t period_P){
 8003610:	b5b0      	push	{r4, r5, r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
	if(period_P<1){
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <set_PWM_period+0x12>
		period_P=1;
 800361e:	2301      	movs	r3, #1
 8003620:	607b      	str	r3, [r7, #4]
	}
	if(period_P>40){
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b28      	cmp	r3, #40	@ 0x28
 8003626:	d901      	bls.n	800362c <set_PWM_period+0x1c>
		period_P=40;
 8003628:	2328      	movs	r3, #40	@ 0x28
 800362a:	607b      	str	r3, [r7, #4]
	}
	if(period_P>0&&period_P<10){
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00e      	beq.n	8003650 <set_PWM_period+0x40>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b09      	cmp	r3, #9
 8003636:	d80b      	bhi.n	8003650 <set_PWM_period+0x40>
		period_P=47*period_P;
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	4413      	add	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	607b      	str	r3, [r7, #4]
		period_P=450-period_P;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f5c3 73e1 	rsb	r3, r3, #450	@ 0x1c2
 800364c:	607b      	str	r3, [r7, #4]
 800364e:	e040      	b.n	80036d2 <set_PWM_period+0xc2>
	}
	else{
		period_P=period_P-9;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3b09      	subs	r3, #9
 8003654:	607b      	str	r3, [r7, #4]
		period_P = 1.3*period_P*period_P-88.2*period_P+2006.6;
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fc febc 	bl	80003d4 <__aeabi_ui2d>
 800365c:	a320      	add	r3, pc, #128	@ (adr r3, 80036e0 <set_PWM_period+0xd0>)
 800365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003662:	f7fc ff31 	bl	80004c8 <__aeabi_dmul>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4614      	mov	r4, r2
 800366c:	461d      	mov	r5, r3
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fc feb0 	bl	80003d4 <__aeabi_ui2d>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4620      	mov	r0, r4
 800367a:	4629      	mov	r1, r5
 800367c:	f7fc ff24 	bl	80004c8 <__aeabi_dmul>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4614      	mov	r4, r2
 8003686:	461d      	mov	r5, r3
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7fc fea3 	bl	80003d4 <__aeabi_ui2d>
 800368e:	a316      	add	r3, pc, #88	@ (adr r3, 80036e8 <set_PWM_period+0xd8>)
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	f7fc ff18 	bl	80004c8 <__aeabi_dmul>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4620      	mov	r0, r4
 800369e:	4629      	mov	r1, r5
 80036a0:	f7fc fd5a 	bl	8000158 <__aeabi_dsub>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4610      	mov	r0, r2
 80036aa:	4619      	mov	r1, r3
 80036ac:	a310      	add	r3, pc, #64	@ (adr r3, 80036f0 <set_PWM_period+0xe0>)
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	f7fc fd53 	bl	800015c <__adddf3>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4610      	mov	r0, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	f7fd f9db 	bl	8000a78 <__aeabi_d2uiz>
 80036c2:	4603      	mov	r3, r0
 80036c4:	607b      	str	r3, [r7, #4]
		period_P=period_P/100;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a0b      	ldr	r2, [pc, #44]	@ (80036f8 <set_PWM_period+0xe8>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	607b      	str	r3, [r7, #4]
	}
	return period_P;
 80036d2:	687b      	ldr	r3, [r7, #4]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bdb0      	pop	{r4, r5, r7, pc}
 80036dc:	f3af 8000 	nop.w
 80036e0:	cccccccd 	.word	0xcccccccd
 80036e4:	3ff4cccc 	.word	0x3ff4cccc
 80036e8:	cccccccd 	.word	0xcccccccd
 80036ec:	40560ccc 	.word	0x40560ccc
 80036f0:	66666666 	.word	0x66666666
 80036f4:	409f5a66 	.word	0x409f5a66
 80036f8:	51eb851f 	.word	0x51eb851f

080036fc <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 80036fc:	f7ff fe70 	bl	80033e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003700:	480b      	ldr	r0, [pc, #44]	@ (8003730 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003702:	490c      	ldr	r1, [pc, #48]	@ (8003734 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003704:	4a0c      	ldr	r2, [pc, #48]	@ (8003738 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003708:	e002      	b.n	8003710 <LoopCopyDataInit>

0800370a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800370a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800370c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800370e:	3304      	adds	r3, #4

08003710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003714:	d3f9      	bcc.n	800370a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003716:	4a09      	ldr	r2, [pc, #36]	@ (800373c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003718:	4c09      	ldr	r4, [pc, #36]	@ (8003740 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800371a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800371c:	e001      	b.n	8003722 <LoopFillZerobss>

0800371e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800371e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003720:	3204      	adds	r2, #4

08003722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003724:	d3fb      	bcc.n	800371e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003726:	f007 fbaf 	bl	800ae88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800372a:	f7fd fdc7 	bl	80012bc <main>
  bx lr
 800372e:	4770      	bx	lr
  ldr r0, =_sdata
 8003730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003734:	20001090 	.word	0x20001090
  ldr r2, =_sidata
 8003738:	0800e250 	.word	0x0800e250
  ldr r2, =_sbss
 800373c:	20001090 	.word	0x20001090
  ldr r4, =_ebss
 8003740:	2000405c 	.word	0x2000405c

08003744 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003744:	e7fe      	b.n	8003744 <CAN1_RX1_IRQHandler>
	...

08003748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800374c:	4b08      	ldr	r3, [pc, #32]	@ (8003770 <HAL_Init+0x28>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a07      	ldr	r2, [pc, #28]	@ (8003770 <HAL_Init+0x28>)
 8003752:	f043 0310 	orr.w	r3, r3, #16
 8003756:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003758:	2003      	movs	r0, #3
 800375a:	f000 fdd7 	bl	800430c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800375e:	200f      	movs	r0, #15
 8003760:	f7ff fd3e 	bl	80031e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003764:	f7ff fb70 	bl	8002e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40022000 	.word	0x40022000

08003774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003778:	4b05      	ldr	r3, [pc, #20]	@ (8003790 <HAL_IncTick+0x1c>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	4b05      	ldr	r3, [pc, #20]	@ (8003794 <HAL_IncTick+0x20>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4413      	add	r3, r2
 8003784:	4a03      	ldr	r2, [pc, #12]	@ (8003794 <HAL_IncTick+0x20>)
 8003786:	6013      	str	r3, [r2, #0]
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr
 8003790:	20001028 	.word	0x20001028
 8003794:	2000250c 	.word	0x2000250c

08003798 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return uwTick;
 800379c:	4b02      	ldr	r3, [pc, #8]	@ (80037a8 <HAL_GetTick+0x10>)
 800379e:	681b      	ldr	r3, [r3, #0]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr
 80037a8:	2000250c 	.word	0x2000250c

080037ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e0be      	b.n	800394c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff fb64 	bl	8002eb8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fc97 	bl	8004124 <ADC_ConversionStop_Disable>
 80037f6:	4603      	mov	r3, r0
 80037f8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	f040 8099 	bne.w	800393a <HAL_ADC_Init+0x18e>
 8003808:	7dfb      	ldrb	r3, [r7, #23]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f040 8095 	bne.w	800393a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003814:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003818:	f023 0302 	bic.w	r3, r3, #2
 800381c:	f043 0202 	orr.w	r2, r3, #2
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800382c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	7b1b      	ldrb	r3, [r3, #12]
 8003832:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003834:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	4313      	orrs	r3, r2
 800383a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003844:	d003      	beq.n	800384e <HAL_ADC_Init+0xa2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d102      	bne.n	8003854 <HAL_ADC_Init+0xa8>
 800384e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003852:	e000      	b.n	8003856 <HAL_ADC_Init+0xaa>
 8003854:	2300      	movs	r3, #0
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	7d1b      	ldrb	r3, [r3, #20]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d119      	bne.n	8003898 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	7b1b      	ldrb	r3, [r3, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d109      	bne.n	8003880 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	3b01      	subs	r3, #1
 8003872:	035a      	lsls	r2, r3, #13
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	e00b      	b.n	8003898 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003884:	f043 0220 	orr.w	r2, r3, #32
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003890:	f043 0201 	orr.w	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	4b28      	ldr	r3, [pc, #160]	@ (8003954 <HAL_ADC_Init+0x1a8>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	430b      	orrs	r3, r1
 80038be:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038c8:	d003      	beq.n	80038d2 <HAL_ADC_Init+0x126>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d104      	bne.n	80038dc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	051b      	lsls	r3, r3, #20
 80038da:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	4b18      	ldr	r3, [pc, #96]	@ (8003958 <HAL_ADC_Init+0x1ac>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d10b      	bne.n	8003918 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390a:	f023 0303 	bic.w	r3, r3, #3
 800390e:	f043 0201 	orr.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003916:	e018      	b.n	800394a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391c:	f023 0312 	bic.w	r3, r3, #18
 8003920:	f043 0210 	orr.w	r2, r3, #16
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392c:	f043 0201 	orr.w	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003938:	e007      	b.n	800394a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393e:	f043 0210 	orr.w	r2, r3, #16
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800394a:	7dfb      	ldrb	r3, [r7, #23]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	ffe1f7fd 	.word	0xffe1f7fd
 8003958:	ff1f0efe 	.word	0xff1f0efe

0800395c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_ADC_Start+0x1a>
 8003972:	2302      	movs	r3, #2
 8003974:	e098      	b.n	8003aa8 <HAL_ADC_Start+0x14c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fb76 	bl	8004070 <ADC_Enable>
 8003984:	4603      	mov	r3, r0
 8003986:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	2b00      	cmp	r3, #0
 800398c:	f040 8087 	bne.w	8003a9e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003998:	f023 0301 	bic.w	r3, r3, #1
 800399c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a41      	ldr	r2, [pc, #260]	@ (8003ab0 <HAL_ADC_Start+0x154>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d105      	bne.n	80039ba <HAL_ADC_Start+0x5e>
 80039ae:	4b41      	ldr	r3, [pc, #260]	@ (8003ab4 <HAL_ADC_Start+0x158>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d115      	bne.n	80039e6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039be:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d026      	beq.n	8003a22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80039dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80039e4:	e01d      	b.n	8003a22 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a2f      	ldr	r2, [pc, #188]	@ (8003ab4 <HAL_ADC_Start+0x158>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d004      	beq.n	8003a06 <HAL_ADC_Start+0xaa>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a2b      	ldr	r2, [pc, #172]	@ (8003ab0 <HAL_ADC_Start+0x154>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d10d      	bne.n	8003a22 <HAL_ADC_Start+0xc6>
 8003a06:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab4 <HAL_ADC_Start+0x158>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d007      	beq.n	8003a22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a16:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a1a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d006      	beq.n	8003a3c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a32:	f023 0206 	bic.w	r2, r3, #6
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003a3a:	e002      	b.n	8003a42 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f06f 0202 	mvn.w	r2, #2
 8003a52:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003a5e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003a62:	d113      	bne.n	8003a8c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003a68:	4a11      	ldr	r2, [pc, #68]	@ (8003ab0 <HAL_ADC_Start+0x154>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d105      	bne.n	8003a7a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003a6e:	4b11      	ldr	r3, [pc, #68]	@ (8003ab4 <HAL_ADC_Start+0x158>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d108      	bne.n	8003a8c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003a88:	609a      	str	r2, [r3, #8]
 8003a8a:	e00c      	b.n	8003aa6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003a9a:	609a      	str	r2, [r3, #8]
 8003a9c:	e003      	b.n	8003aa6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40012800 	.word	0x40012800
 8003ab4:	40012400 	.word	0x40012400

08003ab8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003ab8:	b590      	push	{r4, r7, lr}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003ace:	f7ff fe63 	bl	8003798 <HAL_GetTick>
 8003ad2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00b      	beq.n	8003afa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae6:	f043 0220 	orr.w	r2, r3, #32
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e0d3      	b.n	8003ca2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d131      	bne.n	8003b6c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d12a      	bne.n	8003b6c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003b16:	e021      	b.n	8003b5c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1e:	d01d      	beq.n	8003b5c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d007      	beq.n	8003b36 <HAL_ADC_PollForConversion+0x7e>
 8003b26:	f7ff fe37 	bl	8003798 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d212      	bcs.n	8003b5c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10b      	bne.n	8003b5c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b48:	f043 0204 	orr.w	r2, r3, #4
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e0a2      	b.n	8003ca2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0d6      	beq.n	8003b18 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003b6a:	e070      	b.n	8003c4e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003b6c:	4b4f      	ldr	r3, [pc, #316]	@ (8003cac <HAL_ADC_PollForConversion+0x1f4>)
 8003b6e:	681c      	ldr	r4, [r3, #0]
 8003b70:	2002      	movs	r0, #2
 8003b72:	f002 fadb 	bl	800612c <HAL_RCCEx_GetPeriphCLKFreq>
 8003b76:	4603      	mov	r3, r0
 8003b78:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6919      	ldr	r1, [r3, #16]
 8003b82:	4b4b      	ldr	r3, [pc, #300]	@ (8003cb0 <HAL_ADC_PollForConversion+0x1f8>)
 8003b84:	400b      	ands	r3, r1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d118      	bne.n	8003bbc <HAL_ADC_PollForConversion+0x104>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68d9      	ldr	r1, [r3, #12]
 8003b90:	4b48      	ldr	r3, [pc, #288]	@ (8003cb4 <HAL_ADC_PollForConversion+0x1fc>)
 8003b92:	400b      	ands	r3, r1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d111      	bne.n	8003bbc <HAL_ADC_PollForConversion+0x104>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6919      	ldr	r1, [r3, #16]
 8003b9e:	4b46      	ldr	r3, [pc, #280]	@ (8003cb8 <HAL_ADC_PollForConversion+0x200>)
 8003ba0:	400b      	ands	r3, r1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d108      	bne.n	8003bb8 <HAL_ADC_PollForConversion+0x100>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68d9      	ldr	r1, [r3, #12]
 8003bac:	4b43      	ldr	r3, [pc, #268]	@ (8003cbc <HAL_ADC_PollForConversion+0x204>)
 8003bae:	400b      	ands	r3, r1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_ADC_PollForConversion+0x100>
 8003bb4:	2314      	movs	r3, #20
 8003bb6:	e020      	b.n	8003bfa <HAL_ADC_PollForConversion+0x142>
 8003bb8:	2329      	movs	r3, #41	@ 0x29
 8003bba:	e01e      	b.n	8003bfa <HAL_ADC_PollForConversion+0x142>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6919      	ldr	r1, [r3, #16]
 8003bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8003cb8 <HAL_ADC_PollForConversion+0x200>)
 8003bc4:	400b      	ands	r3, r1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d106      	bne.n	8003bd8 <HAL_ADC_PollForConversion+0x120>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68d9      	ldr	r1, [r3, #12]
 8003bd0:	4b3a      	ldr	r3, [pc, #232]	@ (8003cbc <HAL_ADC_PollForConversion+0x204>)
 8003bd2:	400b      	ands	r3, r1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00d      	beq.n	8003bf4 <HAL_ADC_PollForConversion+0x13c>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6919      	ldr	r1, [r3, #16]
 8003bde:	4b38      	ldr	r3, [pc, #224]	@ (8003cc0 <HAL_ADC_PollForConversion+0x208>)
 8003be0:	400b      	ands	r3, r1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d108      	bne.n	8003bf8 <HAL_ADC_PollForConversion+0x140>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68d9      	ldr	r1, [r3, #12]
 8003bec:	4b34      	ldr	r3, [pc, #208]	@ (8003cc0 <HAL_ADC_PollForConversion+0x208>)
 8003bee:	400b      	ands	r3, r1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_ADC_PollForConversion+0x140>
 8003bf4:	2354      	movs	r3, #84	@ 0x54
 8003bf6:	e000      	b.n	8003bfa <HAL_ADC_PollForConversion+0x142>
 8003bf8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003c00:	e021      	b.n	8003c46 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c08:	d01a      	beq.n	8003c40 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <HAL_ADC_PollForConversion+0x168>
 8003c10:	f7ff fdc2 	bl	8003798 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d20f      	bcs.n	8003c40 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d90b      	bls.n	8003c40 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2c:	f043 0204 	orr.w	r2, r3, #4
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e030      	b.n	8003ca2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	3301      	adds	r3, #1
 8003c44:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d8d9      	bhi.n	8003c02 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f06f 0212 	mvn.w	r2, #18
 8003c56:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003c6e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003c72:	d115      	bne.n	8003ca0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d111      	bne.n	8003ca0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d105      	bne.n	8003ca0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c98:	f043 0201 	orr.w	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd90      	pop	{r4, r7, pc}
 8003caa:	bf00      	nop
 8003cac:	2000101c 	.word	0x2000101c
 8003cb0:	24924924 	.word	0x24924924
 8003cb4:	00924924 	.word	0x00924924
 8003cb8:	12492492 	.word	0x12492492
 8003cbc:	00492492 	.word	0x00492492
 8003cc0:	00249249 	.word	0x00249249

08003cc4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d03e      	beq.n	8003d7c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d039      	beq.n	8003d7c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d105      	bne.n	8003d20 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d18:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003d2a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003d2e:	d11d      	bne.n	8003d6c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d119      	bne.n	8003d6c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0220 	bic.w	r2, r2, #32
 8003d46:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d105      	bne.n	8003d6c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d64:	f043 0201 	orr.w	r2, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f874 	bl	8003e5a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f06f 0212 	mvn.w	r2, #18
 8003d7a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d04d      	beq.n	8003e22 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d048      	beq.n	8003e22 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d105      	bne.n	8003da8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8003db2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8003db6:	d012      	beq.n	8003dde <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d125      	bne.n	8003e12 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003dd0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003dd4:	d11d      	bne.n	8003e12 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d119      	bne.n	8003e12 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dec:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d105      	bne.n	8003e12 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0a:	f043 0201 	orr.w	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f9c7 	bl	80041a6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f06f 020c 	mvn.w	r2, #12
 8003e20:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d012      	beq.n	8003e52 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00d      	beq.n	8003e52 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f812 	bl	8003e6c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0201 	mvn.w	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003e52:	bf00      	nop
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr
	...

08003e80 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x20>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e0dc      	b.n	800405a <HAL_ADC_ConfigChannel+0x1da>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	2b06      	cmp	r3, #6
 8003eae:	d81c      	bhi.n	8003eea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3b05      	subs	r3, #5
 8003ec2:	221f      	movs	r2, #31
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	4019      	ands	r1, r3
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	3b05      	subs	r3, #5
 8003edc:	fa00 f203 	lsl.w	r2, r0, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ee8:	e03c      	b.n	8003f64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b0c      	cmp	r3, #12
 8003ef0:	d81c      	bhi.n	8003f2c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	3b23      	subs	r3, #35	@ 0x23
 8003f04:	221f      	movs	r2, #31
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	4019      	ands	r1, r3
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	3b23      	subs	r3, #35	@ 0x23
 8003f1e:	fa00 f203 	lsl.w	r2, r0, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f2a:	e01b      	b.n	8003f64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3b41      	subs	r3, #65	@ 0x41
 8003f3e:	221f      	movs	r2, #31
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	4019      	ands	r1, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	3b41      	subs	r3, #65	@ 0x41
 8003f58:	fa00 f203 	lsl.w	r2, r0, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b09      	cmp	r3, #9
 8003f6a:	d91c      	bls.n	8003fa6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68d9      	ldr	r1, [r3, #12]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	4613      	mov	r3, r2
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3b1e      	subs	r3, #30
 8003f7e:	2207      	movs	r2, #7
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	4019      	ands	r1, r3
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6898      	ldr	r0, [r3, #8]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	4613      	mov	r3, r2
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	4413      	add	r3, r2
 8003f96:	3b1e      	subs	r3, #30
 8003f98:	fa00 f203 	lsl.w	r2, r0, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	60da      	str	r2, [r3, #12]
 8003fa4:	e019      	b.n	8003fda <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6919      	ldr	r1, [r3, #16]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	4413      	add	r3, r2
 8003fb6:	2207      	movs	r2, #7
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	4019      	ands	r1, r3
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	6898      	ldr	r0, [r3, #8]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4413      	add	r3, r2
 8003fce:	fa00 f203 	lsl.w	r2, r0, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b10      	cmp	r3, #16
 8003fe0:	d003      	beq.n	8003fea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003fe6:	2b11      	cmp	r3, #17
 8003fe8:	d132      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a1d      	ldr	r2, [pc, #116]	@ (8004064 <HAL_ADC_ConfigChannel+0x1e4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d125      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d126      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004010:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b10      	cmp	r3, #16
 8004018:	d11a      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800401a:	4b13      	ldr	r3, [pc, #76]	@ (8004068 <HAL_ADC_ConfigChannel+0x1e8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a13      	ldr	r2, [pc, #76]	@ (800406c <HAL_ADC_ConfigChannel+0x1ec>)
 8004020:	fba2 2303 	umull	r2, r3, r2, r3
 8004024:	0c9a      	lsrs	r2, r3, #18
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004030:	e002      	b.n	8004038 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	3b01      	subs	r3, #1
 8004036:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f9      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x1b2>
 800403e:	e007      	b.n	8004050 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004044:	f043 0220 	orr.w	r2, r3, #32
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004058:	7bfb      	ldrb	r3, [r7, #15]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr
 8004064:	40012400 	.word	0x40012400
 8004068:	2000101c 	.word	0x2000101c
 800406c:	431bde83 	.word	0x431bde83

08004070 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b01      	cmp	r3, #1
 800408c:	d040      	beq.n	8004110 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0201 	orr.w	r2, r2, #1
 800409c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800409e:	4b1f      	ldr	r3, [pc, #124]	@ (800411c <ADC_Enable+0xac>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004120 <ADC_Enable+0xb0>)
 80040a4:	fba2 2303 	umull	r2, r3, r2, r3
 80040a8:	0c9b      	lsrs	r3, r3, #18
 80040aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80040ac:	e002      	b.n	80040b4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f9      	bne.n	80040ae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040ba:	f7ff fb6d 	bl	8003798 <HAL_GetTick>
 80040be:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80040c0:	e01f      	b.n	8004102 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80040c2:	f7ff fb69 	bl	8003798 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d918      	bls.n	8004102 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d011      	beq.n	8004102 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e2:	f043 0210 	orr.w	r2, r3, #16
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ee:	f043 0201 	orr.w	r2, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e007      	b.n	8004112 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b01      	cmp	r3, #1
 800410e:	d1d8      	bne.n	80040c2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	2000101c 	.word	0x2000101c
 8004120:	431bde83 	.word	0x431bde83

08004124 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b01      	cmp	r3, #1
 800413c:	d12e      	bne.n	800419c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0201 	bic.w	r2, r2, #1
 800414c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800414e:	f7ff fb23 	bl	8003798 <HAL_GetTick>
 8004152:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004154:	e01b      	b.n	800418e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004156:	f7ff fb1f 	bl	8003798 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d914      	bls.n	800418e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b01      	cmp	r3, #1
 8004170:	d10d      	bne.n	800418e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004176:	f043 0210 	orr.w	r2, r3, #16
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004182:	f043 0201 	orr.w	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e007      	b.n	800419e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b01      	cmp	r3, #1
 800419a:	d0dc      	beq.n	8004156 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041c8:	4b0c      	ldr	r3, [pc, #48]	@ (80041fc <__NVIC_SetPriorityGrouping+0x44>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041d4:	4013      	ands	r3, r2
 80041d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ea:	4a04      	ldr	r2, [pc, #16]	@ (80041fc <__NVIC_SetPriorityGrouping+0x44>)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	60d3      	str	r3, [r2, #12]
}
 80041f0:	bf00      	nop
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	e000ed00 	.word	0xe000ed00

08004200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004204:	4b04      	ldr	r3, [pc, #16]	@ (8004218 <__NVIC_GetPriorityGrouping+0x18>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	0a1b      	lsrs	r3, r3, #8
 800420a:	f003 0307 	and.w	r3, r3, #7
}
 800420e:	4618      	mov	r0, r3
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	e000ed00 	.word	0xe000ed00

0800421c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422a:	2b00      	cmp	r3, #0
 800422c:	db0b      	blt.n	8004246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800422e:	79fb      	ldrb	r3, [r7, #7]
 8004230:	f003 021f 	and.w	r2, r3, #31
 8004234:	4906      	ldr	r1, [pc, #24]	@ (8004250 <__NVIC_EnableIRQ+0x34>)
 8004236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	2001      	movs	r0, #1
 800423e:	fa00 f202 	lsl.w	r2, r0, r2
 8004242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr
 8004250:	e000e100 	.word	0xe000e100

08004254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	4603      	mov	r3, r0
 800425c:	6039      	str	r1, [r7, #0]
 800425e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004264:	2b00      	cmp	r3, #0
 8004266:	db0a      	blt.n	800427e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	b2da      	uxtb	r2, r3
 800426c:	490c      	ldr	r1, [pc, #48]	@ (80042a0 <__NVIC_SetPriority+0x4c>)
 800426e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004272:	0112      	lsls	r2, r2, #4
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	440b      	add	r3, r1
 8004278:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800427c:	e00a      	b.n	8004294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	b2da      	uxtb	r2, r3
 8004282:	4908      	ldr	r1, [pc, #32]	@ (80042a4 <__NVIC_SetPriority+0x50>)
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	3b04      	subs	r3, #4
 800428c:	0112      	lsls	r2, r2, #4
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	440b      	add	r3, r1
 8004292:	761a      	strb	r2, [r3, #24]
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	e000e100 	.word	0xe000e100
 80042a4:	e000ed00 	.word	0xe000ed00

080042a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b089      	sub	sp, #36	@ 0x24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f1c3 0307 	rsb	r3, r3, #7
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	bf28      	it	cs
 80042c6:	2304      	movcs	r3, #4
 80042c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	3304      	adds	r3, #4
 80042ce:	2b06      	cmp	r3, #6
 80042d0:	d902      	bls.n	80042d8 <NVIC_EncodePriority+0x30>
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	3b03      	subs	r3, #3
 80042d6:	e000      	b.n	80042da <NVIC_EncodePriority+0x32>
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042dc:	f04f 32ff 	mov.w	r2, #4294967295
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	43da      	mvns	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	401a      	ands	r2, r3
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042f0:	f04f 31ff 	mov.w	r1, #4294967295
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	fa01 f303 	lsl.w	r3, r1, r3
 80042fa:	43d9      	mvns	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004300:	4313      	orrs	r3, r2
         );
}
 8004302:	4618      	mov	r0, r3
 8004304:	3724      	adds	r7, #36	@ 0x24
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr

0800430c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff ff4f 	bl	80041b8 <__NVIC_SetPriorityGrouping>
}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004322:	b580      	push	{r7, lr}
 8004324:	b086      	sub	sp, #24
 8004326:	af00      	add	r7, sp, #0
 8004328:	4603      	mov	r3, r0
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
 800432e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004330:	2300      	movs	r3, #0
 8004332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004334:	f7ff ff64 	bl	8004200 <__NVIC_GetPriorityGrouping>
 8004338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	6978      	ldr	r0, [r7, #20]
 8004340:	f7ff ffb2 	bl	80042a8 <NVIC_EncodePriority>
 8004344:	4602      	mov	r2, r0
 8004346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800434a:	4611      	mov	r1, r2
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff ff81 	bl	8004254 <__NVIC_SetPriority>
}
 8004352:	bf00      	nop
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b082      	sub	sp, #8
 800435e:	af00      	add	r7, sp, #0
 8004360:	4603      	mov	r3, r0
 8004362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff ff57 	bl	800421c <__NVIC_EnableIRQ>
}
 800436e:	bf00      	nop
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e043      	b.n	8004416 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	4b22      	ldr	r3, [pc, #136]	@ (8004420 <HAL_DMA_Init+0xa8>)
 8004396:	4413      	add	r3, r2
 8004398:	4a22      	ldr	r2, [pc, #136]	@ (8004424 <HAL_DMA_Init+0xac>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	091b      	lsrs	r3, r3, #4
 80043a0:	009a      	lsls	r2, r3, #2
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004428 <HAL_DMA_Init+0xb0>)
 80043aa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80043c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80043c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80043d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr
 8004420:	bffdfff8 	.word	0xbffdfff8
 8004424:	cccccccd 	.word	0xcccccccd
 8004428:	40020000 	.word	0x40020000

0800442c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_DMA_Start_IT+0x20>
 8004448:	2302      	movs	r3, #2
 800444a:	e04b      	b.n	80044e4 <HAL_DMA_Start_IT+0xb8>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b01      	cmp	r3, #1
 800445e:	d13a      	bne.n	80044d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0201 	bic.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	68b9      	ldr	r1, [r7, #8]
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f9af 	bl	80047e8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448e:	2b00      	cmp	r3, #0
 8004490:	d008      	beq.n	80044a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 020e 	orr.w	r2, r2, #14
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	e00f      	b.n	80044c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0204 	bic.w	r2, r2, #4
 80044b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 020a 	orr.w	r2, r2, #10
 80044c2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	e005      	b.n	80044e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80044de:	2302      	movs	r3, #2
 80044e0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80044e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d005      	beq.n	8004510 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2204      	movs	r2, #4
 8004508:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	73fb      	strb	r3, [r7, #15]
 800450e:	e051      	b.n	80045b4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 020e 	bic.w	r2, r2, #14
 800451e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0201 	bic.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a22      	ldr	r2, [pc, #136]	@ (80045c0 <HAL_DMA_Abort_IT+0xd4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d029      	beq.n	800458e <HAL_DMA_Abort_IT+0xa2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a21      	ldr	r2, [pc, #132]	@ (80045c4 <HAL_DMA_Abort_IT+0xd8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d022      	beq.n	800458a <HAL_DMA_Abort_IT+0x9e>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1f      	ldr	r2, [pc, #124]	@ (80045c8 <HAL_DMA_Abort_IT+0xdc>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d01a      	beq.n	8004584 <HAL_DMA_Abort_IT+0x98>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1e      	ldr	r2, [pc, #120]	@ (80045cc <HAL_DMA_Abort_IT+0xe0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d012      	beq.n	800457e <HAL_DMA_Abort_IT+0x92>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1c      	ldr	r2, [pc, #112]	@ (80045d0 <HAL_DMA_Abort_IT+0xe4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00a      	beq.n	8004578 <HAL_DMA_Abort_IT+0x8c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1b      	ldr	r2, [pc, #108]	@ (80045d4 <HAL_DMA_Abort_IT+0xe8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d102      	bne.n	8004572 <HAL_DMA_Abort_IT+0x86>
 800456c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004570:	e00e      	b.n	8004590 <HAL_DMA_Abort_IT+0xa4>
 8004572:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004576:	e00b      	b.n	8004590 <HAL_DMA_Abort_IT+0xa4>
 8004578:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800457c:	e008      	b.n	8004590 <HAL_DMA_Abort_IT+0xa4>
 800457e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004582:	e005      	b.n	8004590 <HAL_DMA_Abort_IT+0xa4>
 8004584:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004588:	e002      	b.n	8004590 <HAL_DMA_Abort_IT+0xa4>
 800458a:	2310      	movs	r3, #16
 800458c:	e000      	b.n	8004590 <HAL_DMA_Abort_IT+0xa4>
 800458e:	2301      	movs	r3, #1
 8004590:	4a11      	ldr	r2, [pc, #68]	@ (80045d8 <HAL_DMA_Abort_IT+0xec>)
 8004592:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	4798      	blx	r3
    } 
  }
  return status;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40020008 	.word	0x40020008
 80045c4:	4002001c 	.word	0x4002001c
 80045c8:	40020030 	.word	0x40020030
 80045cc:	40020044 	.word	0x40020044
 80045d0:	40020058 	.word	0x40020058
 80045d4:	4002006c 	.word	0x4002006c
 80045d8:	40020000 	.word	0x40020000

080045dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f8:	2204      	movs	r2, #4
 80045fa:	409a      	lsls	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d04f      	beq.n	80046a4 <HAL_DMA_IRQHandler+0xc8>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	d04a      	beq.n	80046a4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b00      	cmp	r3, #0
 800461a:	d107      	bne.n	800462c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0204 	bic.w	r2, r2, #4
 800462a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a66      	ldr	r2, [pc, #408]	@ (80047cc <HAL_DMA_IRQHandler+0x1f0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d029      	beq.n	800468a <HAL_DMA_IRQHandler+0xae>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a65      	ldr	r2, [pc, #404]	@ (80047d0 <HAL_DMA_IRQHandler+0x1f4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d022      	beq.n	8004686 <HAL_DMA_IRQHandler+0xaa>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a63      	ldr	r2, [pc, #396]	@ (80047d4 <HAL_DMA_IRQHandler+0x1f8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d01a      	beq.n	8004680 <HAL_DMA_IRQHandler+0xa4>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a62      	ldr	r2, [pc, #392]	@ (80047d8 <HAL_DMA_IRQHandler+0x1fc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d012      	beq.n	800467a <HAL_DMA_IRQHandler+0x9e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a60      	ldr	r2, [pc, #384]	@ (80047dc <HAL_DMA_IRQHandler+0x200>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00a      	beq.n	8004674 <HAL_DMA_IRQHandler+0x98>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a5f      	ldr	r2, [pc, #380]	@ (80047e0 <HAL_DMA_IRQHandler+0x204>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d102      	bne.n	800466e <HAL_DMA_IRQHandler+0x92>
 8004668:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800466c:	e00e      	b.n	800468c <HAL_DMA_IRQHandler+0xb0>
 800466e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004672:	e00b      	b.n	800468c <HAL_DMA_IRQHandler+0xb0>
 8004674:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004678:	e008      	b.n	800468c <HAL_DMA_IRQHandler+0xb0>
 800467a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800467e:	e005      	b.n	800468c <HAL_DMA_IRQHandler+0xb0>
 8004680:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004684:	e002      	b.n	800468c <HAL_DMA_IRQHandler+0xb0>
 8004686:	2340      	movs	r3, #64	@ 0x40
 8004688:	e000      	b.n	800468c <HAL_DMA_IRQHandler+0xb0>
 800468a:	2304      	movs	r3, #4
 800468c:	4a55      	ldr	r2, [pc, #340]	@ (80047e4 <HAL_DMA_IRQHandler+0x208>)
 800468e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 8094 	beq.w	80047c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80046a2:	e08e      	b.n	80047c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a8:	2202      	movs	r2, #2
 80046aa:	409a      	lsls	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d056      	beq.n	8004762 <HAL_DMA_IRQHandler+0x186>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d051      	beq.n	8004762 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10b      	bne.n	80046e4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 020a 	bic.w	r2, r2, #10
 80046da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a38      	ldr	r2, [pc, #224]	@ (80047cc <HAL_DMA_IRQHandler+0x1f0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d029      	beq.n	8004742 <HAL_DMA_IRQHandler+0x166>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a37      	ldr	r2, [pc, #220]	@ (80047d0 <HAL_DMA_IRQHandler+0x1f4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d022      	beq.n	800473e <HAL_DMA_IRQHandler+0x162>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a35      	ldr	r2, [pc, #212]	@ (80047d4 <HAL_DMA_IRQHandler+0x1f8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d01a      	beq.n	8004738 <HAL_DMA_IRQHandler+0x15c>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a34      	ldr	r2, [pc, #208]	@ (80047d8 <HAL_DMA_IRQHandler+0x1fc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d012      	beq.n	8004732 <HAL_DMA_IRQHandler+0x156>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a32      	ldr	r2, [pc, #200]	@ (80047dc <HAL_DMA_IRQHandler+0x200>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00a      	beq.n	800472c <HAL_DMA_IRQHandler+0x150>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a31      	ldr	r2, [pc, #196]	@ (80047e0 <HAL_DMA_IRQHandler+0x204>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d102      	bne.n	8004726 <HAL_DMA_IRQHandler+0x14a>
 8004720:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004724:	e00e      	b.n	8004744 <HAL_DMA_IRQHandler+0x168>
 8004726:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800472a:	e00b      	b.n	8004744 <HAL_DMA_IRQHandler+0x168>
 800472c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004730:	e008      	b.n	8004744 <HAL_DMA_IRQHandler+0x168>
 8004732:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004736:	e005      	b.n	8004744 <HAL_DMA_IRQHandler+0x168>
 8004738:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800473c:	e002      	b.n	8004744 <HAL_DMA_IRQHandler+0x168>
 800473e:	2320      	movs	r3, #32
 8004740:	e000      	b.n	8004744 <HAL_DMA_IRQHandler+0x168>
 8004742:	2302      	movs	r3, #2
 8004744:	4a27      	ldr	r2, [pc, #156]	@ (80047e4 <HAL_DMA_IRQHandler+0x208>)
 8004746:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004754:	2b00      	cmp	r3, #0
 8004756:	d034      	beq.n	80047c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004760:	e02f      	b.n	80047c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004766:	2208      	movs	r2, #8
 8004768:	409a      	lsls	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4013      	ands	r3, r2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d028      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x1e8>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d023      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 020e 	bic.w	r2, r2, #14
 800478a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004794:	2101      	movs	r1, #1
 8004796:	fa01 f202 	lsl.w	r2, r1, r2
 800479a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d004      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	4798      	blx	r3
    }
  }
  return;
 80047c2:	bf00      	nop
 80047c4:	bf00      	nop
}
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40020008 	.word	0x40020008
 80047d0:	4002001c 	.word	0x4002001c
 80047d4:	40020030 	.word	0x40020030
 80047d8:	40020044 	.word	0x40020044
 80047dc:	40020058 	.word	0x40020058
 80047e0:	4002006c 	.word	0x4002006c
 80047e4:	40020000 	.word	0x40020000

080047e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047fe:	2101      	movs	r1, #1
 8004800:	fa01 f202 	lsl.w	r2, r1, r2
 8004804:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b10      	cmp	r3, #16
 8004814:	d108      	bne.n	8004828 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004826:	e007      	b.n	8004838 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	60da      	str	r2, [r3, #12]
}
 8004838:	bf00      	nop
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr
	...

08004844 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004844:	b480      	push	{r7}
 8004846:	b08b      	sub	sp, #44	@ 0x2c
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800484e:	2300      	movs	r3, #0
 8004850:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004852:	2300      	movs	r3, #0
 8004854:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004856:	e169      	b.n	8004b2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004858:	2201      	movs	r2, #1
 800485a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	4013      	ands	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	429a      	cmp	r2, r3
 8004872:	f040 8158 	bne.w	8004b26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	4a9a      	ldr	r2, [pc, #616]	@ (8004ae4 <HAL_GPIO_Init+0x2a0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d05e      	beq.n	800493e <HAL_GPIO_Init+0xfa>
 8004880:	4a98      	ldr	r2, [pc, #608]	@ (8004ae4 <HAL_GPIO_Init+0x2a0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d875      	bhi.n	8004972 <HAL_GPIO_Init+0x12e>
 8004886:	4a98      	ldr	r2, [pc, #608]	@ (8004ae8 <HAL_GPIO_Init+0x2a4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d058      	beq.n	800493e <HAL_GPIO_Init+0xfa>
 800488c:	4a96      	ldr	r2, [pc, #600]	@ (8004ae8 <HAL_GPIO_Init+0x2a4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d86f      	bhi.n	8004972 <HAL_GPIO_Init+0x12e>
 8004892:	4a96      	ldr	r2, [pc, #600]	@ (8004aec <HAL_GPIO_Init+0x2a8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d052      	beq.n	800493e <HAL_GPIO_Init+0xfa>
 8004898:	4a94      	ldr	r2, [pc, #592]	@ (8004aec <HAL_GPIO_Init+0x2a8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d869      	bhi.n	8004972 <HAL_GPIO_Init+0x12e>
 800489e:	4a94      	ldr	r2, [pc, #592]	@ (8004af0 <HAL_GPIO_Init+0x2ac>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d04c      	beq.n	800493e <HAL_GPIO_Init+0xfa>
 80048a4:	4a92      	ldr	r2, [pc, #584]	@ (8004af0 <HAL_GPIO_Init+0x2ac>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d863      	bhi.n	8004972 <HAL_GPIO_Init+0x12e>
 80048aa:	4a92      	ldr	r2, [pc, #584]	@ (8004af4 <HAL_GPIO_Init+0x2b0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d046      	beq.n	800493e <HAL_GPIO_Init+0xfa>
 80048b0:	4a90      	ldr	r2, [pc, #576]	@ (8004af4 <HAL_GPIO_Init+0x2b0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d85d      	bhi.n	8004972 <HAL_GPIO_Init+0x12e>
 80048b6:	2b12      	cmp	r3, #18
 80048b8:	d82a      	bhi.n	8004910 <HAL_GPIO_Init+0xcc>
 80048ba:	2b12      	cmp	r3, #18
 80048bc:	d859      	bhi.n	8004972 <HAL_GPIO_Init+0x12e>
 80048be:	a201      	add	r2, pc, #4	@ (adr r2, 80048c4 <HAL_GPIO_Init+0x80>)
 80048c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c4:	0800493f 	.word	0x0800493f
 80048c8:	08004919 	.word	0x08004919
 80048cc:	0800492b 	.word	0x0800492b
 80048d0:	0800496d 	.word	0x0800496d
 80048d4:	08004973 	.word	0x08004973
 80048d8:	08004973 	.word	0x08004973
 80048dc:	08004973 	.word	0x08004973
 80048e0:	08004973 	.word	0x08004973
 80048e4:	08004973 	.word	0x08004973
 80048e8:	08004973 	.word	0x08004973
 80048ec:	08004973 	.word	0x08004973
 80048f0:	08004973 	.word	0x08004973
 80048f4:	08004973 	.word	0x08004973
 80048f8:	08004973 	.word	0x08004973
 80048fc:	08004973 	.word	0x08004973
 8004900:	08004973 	.word	0x08004973
 8004904:	08004973 	.word	0x08004973
 8004908:	08004921 	.word	0x08004921
 800490c:	08004935 	.word	0x08004935
 8004910:	4a79      	ldr	r2, [pc, #484]	@ (8004af8 <HAL_GPIO_Init+0x2b4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004916:	e02c      	b.n	8004972 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	623b      	str	r3, [r7, #32]
          break;
 800491e:	e029      	b.n	8004974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	3304      	adds	r3, #4
 8004926:	623b      	str	r3, [r7, #32]
          break;
 8004928:	e024      	b.n	8004974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	3308      	adds	r3, #8
 8004930:	623b      	str	r3, [r7, #32]
          break;
 8004932:	e01f      	b.n	8004974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	330c      	adds	r3, #12
 800493a:	623b      	str	r3, [r7, #32]
          break;
 800493c:	e01a      	b.n	8004974 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d102      	bne.n	800494c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004946:	2304      	movs	r3, #4
 8004948:	623b      	str	r3, [r7, #32]
          break;
 800494a:	e013      	b.n	8004974 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d105      	bne.n	8004960 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004954:	2308      	movs	r3, #8
 8004956:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	611a      	str	r2, [r3, #16]
          break;
 800495e:	e009      	b.n	8004974 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004960:	2308      	movs	r3, #8
 8004962:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	615a      	str	r2, [r3, #20]
          break;
 800496a:	e003      	b.n	8004974 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800496c:	2300      	movs	r3, #0
 800496e:	623b      	str	r3, [r7, #32]
          break;
 8004970:	e000      	b.n	8004974 <HAL_GPIO_Init+0x130>
          break;
 8004972:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2bff      	cmp	r3, #255	@ 0xff
 8004978:	d801      	bhi.n	800497e <HAL_GPIO_Init+0x13a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	e001      	b.n	8004982 <HAL_GPIO_Init+0x13e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3304      	adds	r3, #4
 8004982:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2bff      	cmp	r3, #255	@ 0xff
 8004988:	d802      	bhi.n	8004990 <HAL_GPIO_Init+0x14c>
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	e002      	b.n	8004996 <HAL_GPIO_Init+0x152>
 8004990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004992:	3b08      	subs	r3, #8
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	210f      	movs	r1, #15
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	fa01 f303 	lsl.w	r3, r1, r3
 80049a4:	43db      	mvns	r3, r3
 80049a6:	401a      	ands	r2, r3
 80049a8:	6a39      	ldr	r1, [r7, #32]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	fa01 f303 	lsl.w	r3, r1, r3
 80049b0:	431a      	orrs	r2, r3
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 80b1 	beq.w	8004b26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80049c4:	4b4d      	ldr	r3, [pc, #308]	@ (8004afc <HAL_GPIO_Init+0x2b8>)
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	4a4c      	ldr	r2, [pc, #304]	@ (8004afc <HAL_GPIO_Init+0x2b8>)
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	6193      	str	r3, [r2, #24]
 80049d0:	4b4a      	ldr	r3, [pc, #296]	@ (8004afc <HAL_GPIO_Init+0x2b8>)
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80049dc:	4a48      	ldr	r2, [pc, #288]	@ (8004b00 <HAL_GPIO_Init+0x2bc>)
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	089b      	lsrs	r3, r3, #2
 80049e2:	3302      	adds	r3, #2
 80049e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	220f      	movs	r2, #15
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	43db      	mvns	r3, r3
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4013      	ands	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a40      	ldr	r2, [pc, #256]	@ (8004b04 <HAL_GPIO_Init+0x2c0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d013      	beq.n	8004a30 <HAL_GPIO_Init+0x1ec>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a3f      	ldr	r2, [pc, #252]	@ (8004b08 <HAL_GPIO_Init+0x2c4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00d      	beq.n	8004a2c <HAL_GPIO_Init+0x1e8>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a3e      	ldr	r2, [pc, #248]	@ (8004b0c <HAL_GPIO_Init+0x2c8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d007      	beq.n	8004a28 <HAL_GPIO_Init+0x1e4>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a3d      	ldr	r2, [pc, #244]	@ (8004b10 <HAL_GPIO_Init+0x2cc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d101      	bne.n	8004a24 <HAL_GPIO_Init+0x1e0>
 8004a20:	2303      	movs	r3, #3
 8004a22:	e006      	b.n	8004a32 <HAL_GPIO_Init+0x1ee>
 8004a24:	2304      	movs	r3, #4
 8004a26:	e004      	b.n	8004a32 <HAL_GPIO_Init+0x1ee>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e002      	b.n	8004a32 <HAL_GPIO_Init+0x1ee>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e000      	b.n	8004a32 <HAL_GPIO_Init+0x1ee>
 8004a30:	2300      	movs	r3, #0
 8004a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a34:	f002 0203 	and.w	r2, r2, #3
 8004a38:	0092      	lsls	r2, r2, #2
 8004a3a:	4093      	lsls	r3, r2
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004a42:	492f      	ldr	r1, [pc, #188]	@ (8004b00 <HAL_GPIO_Init+0x2bc>)
 8004a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a46:	089b      	lsrs	r3, r3, #2
 8004a48:	3302      	adds	r3, #2
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d006      	beq.n	8004a6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	492c      	ldr	r1, [pc, #176]	@ (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	608b      	str	r3, [r1, #8]
 8004a68:	e006      	b.n	8004a78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	43db      	mvns	r3, r3
 8004a72:	4928      	ldr	r1, [pc, #160]	@ (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d006      	beq.n	8004a92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004a84:	4b23      	ldr	r3, [pc, #140]	@ (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	4922      	ldr	r1, [pc, #136]	@ (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	60cb      	str	r3, [r1, #12]
 8004a90:	e006      	b.n	8004aa0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004a92:	4b20      	ldr	r3, [pc, #128]	@ (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	491e      	ldr	r1, [pc, #120]	@ (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d006      	beq.n	8004aba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004aac:	4b19      	ldr	r3, [pc, #100]	@ (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	4918      	ldr	r1, [pc, #96]	@ (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	604b      	str	r3, [r1, #4]
 8004ab8:	e006      	b.n	8004ac8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004aba:	4b16      	ldr	r3, [pc, #88]	@ (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	4914      	ldr	r1, [pc, #80]	@ (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d021      	beq.n	8004b18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	490e      	ldr	r1, [pc, #56]	@ (8004b14 <HAL_GPIO_Init+0x2d0>)
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	600b      	str	r3, [r1, #0]
 8004ae0:	e021      	b.n	8004b26 <HAL_GPIO_Init+0x2e2>
 8004ae2:	bf00      	nop
 8004ae4:	10320000 	.word	0x10320000
 8004ae8:	10310000 	.word	0x10310000
 8004aec:	10220000 	.word	0x10220000
 8004af0:	10210000 	.word	0x10210000
 8004af4:	10120000 	.word	0x10120000
 8004af8:	10110000 	.word	0x10110000
 8004afc:	40021000 	.word	0x40021000
 8004b00:	40010000 	.word	0x40010000
 8004b04:	40010800 	.word	0x40010800
 8004b08:	40010c00 	.word	0x40010c00
 8004b0c:	40011000 	.word	0x40011000
 8004b10:	40011400 	.word	0x40011400
 8004b14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004b18:	4b0b      	ldr	r3, [pc, #44]	@ (8004b48 <HAL_GPIO_Init+0x304>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	4909      	ldr	r1, [pc, #36]	@ (8004b48 <HAL_GPIO_Init+0x304>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	3301      	adds	r3, #1
 8004b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b32:	fa22 f303 	lsr.w	r3, r2, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f47f ae8e 	bne.w	8004858 <HAL_GPIO_Init+0x14>
  }
}
 8004b3c:	bf00      	nop
 8004b3e:	bf00      	nop
 8004b40:	372c      	adds	r7, #44	@ 0x2c
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr
 8004b48:	40010400 	.word	0x40010400

08004b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	887b      	ldrh	r3, [r7, #2]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b64:	2301      	movs	r3, #1
 8004b66:	73fb      	strb	r3, [r7, #15]
 8004b68:	e001      	b.n	8004b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr

08004b7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	460b      	mov	r3, r1
 8004b84:	807b      	strh	r3, [r7, #2]
 8004b86:	4613      	mov	r3, r2
 8004b88:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b8a:	787b      	ldrb	r3, [r7, #1]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b90:	887a      	ldrh	r2, [r7, #2]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004b96:	e003      	b.n	8004ba0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b98:	887b      	ldrh	r3, [r7, #2]
 8004b9a:	041a      	lsls	r2, r3, #16
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	611a      	str	r2, [r3, #16]
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr
	...

08004bac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e12b      	b.n	8004e16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fe f9b4 	bl	8002f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2224      	movs	r2, #36	@ 0x24
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0201 	bic.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c10:	f001 f960 	bl	8005ed4 <HAL_RCC_GetPCLK1Freq>
 8004c14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	4a81      	ldr	r2, [pc, #516]	@ (8004e20 <HAL_I2C_Init+0x274>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d807      	bhi.n	8004c30 <HAL_I2C_Init+0x84>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4a80      	ldr	r2, [pc, #512]	@ (8004e24 <HAL_I2C_Init+0x278>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	bf94      	ite	ls
 8004c28:	2301      	movls	r3, #1
 8004c2a:	2300      	movhi	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	e006      	b.n	8004c3e <HAL_I2C_Init+0x92>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4a7d      	ldr	r2, [pc, #500]	@ (8004e28 <HAL_I2C_Init+0x27c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	bf94      	ite	ls
 8004c38:	2301      	movls	r3, #1
 8004c3a:	2300      	movhi	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e0e7      	b.n	8004e16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4a78      	ldr	r2, [pc, #480]	@ (8004e2c <HAL_I2C_Init+0x280>)
 8004c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4e:	0c9b      	lsrs	r3, r3, #18
 8004c50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	4a6a      	ldr	r2, [pc, #424]	@ (8004e20 <HAL_I2C_Init+0x274>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d802      	bhi.n	8004c80 <HAL_I2C_Init+0xd4>
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	e009      	b.n	8004c94 <HAL_I2C_Init+0xe8>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004c86:	fb02 f303 	mul.w	r3, r2, r3
 8004c8a:	4a69      	ldr	r2, [pc, #420]	@ (8004e30 <HAL_I2C_Init+0x284>)
 8004c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c90:	099b      	lsrs	r3, r3, #6
 8004c92:	3301      	adds	r3, #1
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004ca6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	495c      	ldr	r1, [pc, #368]	@ (8004e20 <HAL_I2C_Init+0x274>)
 8004cb0:	428b      	cmp	r3, r1
 8004cb2:	d819      	bhi.n	8004ce8 <HAL_I2C_Init+0x13c>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	1e59      	subs	r1, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cc2:	1c59      	adds	r1, r3, #1
 8004cc4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004cc8:	400b      	ands	r3, r1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <HAL_I2C_Init+0x138>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1e59      	subs	r1, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cdc:	3301      	adds	r3, #1
 8004cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ce2:	e051      	b.n	8004d88 <HAL_I2C_Init+0x1dc>
 8004ce4:	2304      	movs	r3, #4
 8004ce6:	e04f      	b.n	8004d88 <HAL_I2C_Init+0x1dc>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d111      	bne.n	8004d14 <HAL_I2C_Init+0x168>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	1e58      	subs	r0, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6859      	ldr	r1, [r3, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	440b      	add	r3, r1
 8004cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d02:	3301      	adds	r3, #1
 8004d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	bf0c      	ite	eq
 8004d0c:	2301      	moveq	r3, #1
 8004d0e:	2300      	movne	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	e012      	b.n	8004d3a <HAL_I2C_Init+0x18e>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	1e58      	subs	r0, r3, #1
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6859      	ldr	r1, [r3, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	0099      	lsls	r1, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf0c      	ite	eq
 8004d34:	2301      	moveq	r3, #1
 8004d36:	2300      	movne	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <HAL_I2C_Init+0x196>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e022      	b.n	8004d88 <HAL_I2C_Init+0x1dc>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10e      	bne.n	8004d68 <HAL_I2C_Init+0x1bc>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	1e58      	subs	r0, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6859      	ldr	r1, [r3, #4]
 8004d52:	460b      	mov	r3, r1
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	440b      	add	r3, r1
 8004d58:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d66:	e00f      	b.n	8004d88 <HAL_I2C_Init+0x1dc>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	1e58      	subs	r0, r3, #1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6859      	ldr	r1, [r3, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	0099      	lsls	r1, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d7e:	3301      	adds	r3, #1
 8004d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	6809      	ldr	r1, [r1, #0]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69da      	ldr	r2, [r3, #28]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004db6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6911      	ldr	r1, [r2, #16]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	68d2      	ldr	r2, [r2, #12]
 8004dc2:	4311      	orrs	r1, r2
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	430b      	orrs	r3, r1
 8004dca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695a      	ldr	r2, [r3, #20]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	000186a0 	.word	0x000186a0
 8004e24:	001e847f 	.word	0x001e847f
 8004e28:	003d08ff 	.word	0x003d08ff
 8004e2c:	431bde83 	.word	0x431bde83
 8004e30:	10624dd3 	.word	0x10624dd3

08004e34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	607a      	str	r2, [r7, #4]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	460b      	mov	r3, r1
 8004e42:	817b      	strh	r3, [r7, #10]
 8004e44:	4613      	mov	r3, r2
 8004e46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e48:	f7fe fca6 	bl	8003798 <HAL_GetTick>
 8004e4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b20      	cmp	r3, #32
 8004e58:	f040 80e0 	bne.w	800501c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	2319      	movs	r3, #25
 8004e62:	2201      	movs	r2, #1
 8004e64:	4970      	ldr	r1, [pc, #448]	@ (8005028 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 fa92 	bl	8005390 <I2C_WaitOnFlagUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e72:	2302      	movs	r3, #2
 8004e74:	e0d3      	b.n	800501e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_I2C_Master_Transmit+0x50>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e0cc      	b.n	800501e <HAL_I2C_Master_Transmit+0x1ea>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d007      	beq.n	8004eaa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 0201 	orr.w	r2, r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004eb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2221      	movs	r2, #33	@ 0x21
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2210      	movs	r2, #16
 8004ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	893a      	ldrh	r2, [r7, #8]
 8004eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4a50      	ldr	r2, [pc, #320]	@ (800502c <HAL_I2C_Master_Transmit+0x1f8>)
 8004eea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004eec:	8979      	ldrh	r1, [r7, #10]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	6a3a      	ldr	r2, [r7, #32]
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 f9ca 	bl	800528c <I2C_MasterRequestWrite>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e08d      	b.n	800501e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f02:	2300      	movs	r3, #0
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004f18:	e066      	b.n	8004fe8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	6a39      	ldr	r1, [r7, #32]
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 fb50 	bl	80055c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00d      	beq.n	8004f46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d107      	bne.n	8004f42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e06b      	b.n	800501e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4a:	781a      	ldrb	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d11b      	bne.n	8004fbc <HAL_I2C_Master_Transmit+0x188>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d017      	beq.n	8004fbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f90:	781a      	ldrb	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	6a39      	ldr	r1, [r7, #32]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 fb47 	bl	8005654 <I2C_WaitOnBTFFlagUntilTimeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00d      	beq.n	8004fe8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d107      	bne.n	8004fe4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fe2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e01a      	b.n	800501e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d194      	bne.n	8004f1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	e000      	b.n	800501e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800501c:	2302      	movs	r3, #2
  }
}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	00100002 	.word	0x00100002
 800502c:	ffff0000 	.word	0xffff0000

08005030 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08a      	sub	sp, #40	@ 0x28
 8005034:	af02      	add	r7, sp, #8
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	607a      	str	r2, [r7, #4]
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	460b      	mov	r3, r1
 800503e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005040:	f7fe fbaa 	bl	8003798 <HAL_GetTick>
 8005044:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b20      	cmp	r3, #32
 8005054:	f040 8111 	bne.w	800527a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	2319      	movs	r3, #25
 800505e:	2201      	movs	r2, #1
 8005060:	4988      	ldr	r1, [pc, #544]	@ (8005284 <HAL_I2C_IsDeviceReady+0x254>)
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f994 	bl	8005390 <I2C_WaitOnFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800506e:	2302      	movs	r3, #2
 8005070:	e104      	b.n	800527c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_I2C_IsDeviceReady+0x50>
 800507c:	2302      	movs	r3, #2
 800507e:	e0fd      	b.n	800527c <HAL_I2C_IsDeviceReady+0x24c>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b01      	cmp	r3, #1
 8005094:	d007      	beq.n	80050a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f042 0201 	orr.w	r2, r2, #1
 80050a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2224      	movs	r2, #36	@ 0x24
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4a70      	ldr	r2, [pc, #448]	@ (8005288 <HAL_I2C_IsDeviceReady+0x258>)
 80050c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 f952 	bl	8005390 <I2C_WaitOnFlagUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00d      	beq.n	800510e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005100:	d103      	bne.n	800510a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005108:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e0b6      	b.n	800527c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800510e:	897b      	ldrh	r3, [r7, #10]
 8005110:	b2db      	uxtb	r3, r3
 8005112:	461a      	mov	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800511c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800511e:	f7fe fb3b 	bl	8003798 <HAL_GetTick>
 8005122:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b02      	cmp	r3, #2
 8005130:	bf0c      	ite	eq
 8005132:	2301      	moveq	r3, #1
 8005134:	2300      	movne	r3, #0
 8005136:	b2db      	uxtb	r3, r3
 8005138:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005148:	bf0c      	ite	eq
 800514a:	2301      	moveq	r3, #1
 800514c:	2300      	movne	r3, #0
 800514e:	b2db      	uxtb	r3, r3
 8005150:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005152:	e025      	b.n	80051a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005154:	f7fe fb20 	bl	8003798 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d302      	bcc.n	800516a <HAL_I2C_IsDeviceReady+0x13a>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d103      	bne.n	8005172 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	22a0      	movs	r2, #160	@ 0xa0
 800516e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b02      	cmp	r3, #2
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005196:	bf0c      	ite	eq
 8005198:	2301      	moveq	r3, #1
 800519a:	2300      	movne	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2ba0      	cmp	r3, #160	@ 0xa0
 80051aa:	d005      	beq.n	80051b8 <HAL_I2C_IsDeviceReady+0x188>
 80051ac:	7dfb      	ldrb	r3, [r7, #23]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d102      	bne.n	80051b8 <HAL_I2C_IsDeviceReady+0x188>
 80051b2:	7dbb      	ldrb	r3, [r7, #22]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0cd      	beq.n	8005154 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d129      	bne.n	8005222 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051de:	2300      	movs	r3, #0
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	2319      	movs	r3, #25
 80051fa:	2201      	movs	r2, #1
 80051fc:	4921      	ldr	r1, [pc, #132]	@ (8005284 <HAL_I2C_IsDeviceReady+0x254>)
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 f8c6 	bl	8005390 <I2C_WaitOnFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e036      	b.n	800527c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2220      	movs	r2, #32
 8005212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	e02c      	b.n	800527c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005230:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800523a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	2319      	movs	r3, #25
 8005242:	2201      	movs	r2, #1
 8005244:	490f      	ldr	r1, [pc, #60]	@ (8005284 <HAL_I2C_IsDeviceReady+0x254>)
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 f8a2 	bl	8005390 <I2C_WaitOnFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e012      	b.n	800527c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	3301      	adds	r3, #1
 800525a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	429a      	cmp	r2, r3
 8005262:	f4ff af32 	bcc.w	80050ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2220      	movs	r2, #32
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800527a:	2302      	movs	r3, #2
  }
}
 800527c:	4618      	mov	r0, r3
 800527e:	3720      	adds	r7, #32
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	00100002 	.word	0x00100002
 8005288:	ffff0000 	.word	0xffff0000

0800528c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af02      	add	r7, sp, #8
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	607a      	str	r2, [r7, #4]
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	460b      	mov	r3, r1
 800529a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d006      	beq.n	80052b6 <I2C_MasterRequestWrite+0x2a>
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d003      	beq.n	80052b6 <I2C_MasterRequestWrite+0x2a>
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80052b4:	d108      	bne.n	80052c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	e00b      	b.n	80052e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052cc:	2b12      	cmp	r3, #18
 80052ce:	d107      	bne.n	80052e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f84f 	bl	8005390 <I2C_WaitOnFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00d      	beq.n	8005314 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005306:	d103      	bne.n	8005310 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800530e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e035      	b.n	8005380 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800531c:	d108      	bne.n	8005330 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800531e:	897b      	ldrh	r3, [r7, #10]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800532c:	611a      	str	r2, [r3, #16]
 800532e:	e01b      	b.n	8005368 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005330:	897b      	ldrh	r3, [r7, #10]
 8005332:	11db      	asrs	r3, r3, #7
 8005334:	b2db      	uxtb	r3, r3
 8005336:	f003 0306 	and.w	r3, r3, #6
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f063 030f 	orn	r3, r3, #15
 8005340:	b2da      	uxtb	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	490e      	ldr	r1, [pc, #56]	@ (8005388 <I2C_MasterRequestWrite+0xfc>)
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f898 	bl	8005484 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e010      	b.n	8005380 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800535e:	897b      	ldrh	r3, [r7, #10]
 8005360:	b2da      	uxtb	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	4907      	ldr	r1, [pc, #28]	@ (800538c <I2C_MasterRequestWrite+0x100>)
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 f888 	bl	8005484 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	00010008 	.word	0x00010008
 800538c:	00010002 	.word	0x00010002

08005390 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	4613      	mov	r3, r2
 800539e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053a0:	e048      	b.n	8005434 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a8:	d044      	beq.n	8005434 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053aa:	f7fe f9f5 	bl	8003798 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d302      	bcc.n	80053c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d139      	bne.n	8005434 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	0c1b      	lsrs	r3, r3, #16
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d10d      	bne.n	80053e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	43da      	mvns	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	4013      	ands	r3, r2
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	bf0c      	ite	eq
 80053dc:	2301      	moveq	r3, #1
 80053de:	2300      	movne	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	461a      	mov	r2, r3
 80053e4:	e00c      	b.n	8005400 <I2C_WaitOnFlagUntilTimeout+0x70>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	43da      	mvns	r2, r3
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	4013      	ands	r3, r2
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	bf0c      	ite	eq
 80053f8:	2301      	moveq	r3, #1
 80053fa:	2300      	movne	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	429a      	cmp	r2, r3
 8005404:	d116      	bne.n	8005434 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005420:	f043 0220 	orr.w	r2, r3, #32
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e023      	b.n	800547c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	0c1b      	lsrs	r3, r3, #16
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b01      	cmp	r3, #1
 800543c:	d10d      	bne.n	800545a <I2C_WaitOnFlagUntilTimeout+0xca>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	43da      	mvns	r2, r3
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	4013      	ands	r3, r2
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	bf0c      	ite	eq
 8005450:	2301      	moveq	r3, #1
 8005452:	2300      	movne	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	461a      	mov	r2, r3
 8005458:	e00c      	b.n	8005474 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	43da      	mvns	r2, r3
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	4013      	ands	r3, r2
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	461a      	mov	r2, r3
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	429a      	cmp	r2, r3
 8005478:	d093      	beq.n	80053a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005492:	e071      	b.n	8005578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800549e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054a2:	d123      	bne.n	80054ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d8:	f043 0204 	orr.w	r2, r3, #4
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e067      	b.n	80055bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f2:	d041      	beq.n	8005578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f4:	f7fe f950 	bl	8003798 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	429a      	cmp	r2, r3
 8005502:	d302      	bcc.n	800550a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d136      	bne.n	8005578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	0c1b      	lsrs	r3, r3, #16
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	d10c      	bne.n	800552e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	43da      	mvns	r2, r3
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4013      	ands	r3, r2
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	bf14      	ite	ne
 8005526:	2301      	movne	r3, #1
 8005528:	2300      	moveq	r3, #0
 800552a:	b2db      	uxtb	r3, r3
 800552c:	e00b      	b.n	8005546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	43da      	mvns	r2, r3
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4013      	ands	r3, r2
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	bf14      	ite	ne
 8005540:	2301      	movne	r3, #1
 8005542:	2300      	moveq	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d016      	beq.n	8005578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005564:	f043 0220 	orr.w	r2, r3, #32
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e021      	b.n	80055bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	0c1b      	lsrs	r3, r3, #16
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b01      	cmp	r3, #1
 8005580:	d10c      	bne.n	800559c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	43da      	mvns	r2, r3
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	4013      	ands	r3, r2
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	bf14      	ite	ne
 8005594:	2301      	movne	r3, #1
 8005596:	2300      	moveq	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	e00b      	b.n	80055b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	43da      	mvns	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4013      	ands	r3, r2
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	bf14      	ite	ne
 80055ae:	2301      	movne	r3, #1
 80055b0:	2300      	moveq	r3, #0
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f47f af6d 	bne.w	8005494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055d0:	e034      	b.n	800563c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 f886 	bl	80056e4 <I2C_IsAcknowledgeFailed>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e034      	b.n	800564c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e8:	d028      	beq.n	800563c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ea:	f7fe f8d5 	bl	8003798 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d302      	bcc.n	8005600 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d11d      	bne.n	800563c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800560a:	2b80      	cmp	r3, #128	@ 0x80
 800560c:	d016      	beq.n	800563c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005628:	f043 0220 	orr.w	r2, r3, #32
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e007      	b.n	800564c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005646:	2b80      	cmp	r3, #128	@ 0x80
 8005648:	d1c3      	bne.n	80055d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005660:	e034      	b.n	80056cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 f83e 	bl	80056e4 <I2C_IsAcknowledgeFailed>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e034      	b.n	80056dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005678:	d028      	beq.n	80056cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567a:	f7fe f88d 	bl	8003798 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	429a      	cmp	r2, r3
 8005688:	d302      	bcc.n	8005690 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d11d      	bne.n	80056cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b04      	cmp	r3, #4
 800569c:	d016      	beq.n	80056cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b8:	f043 0220 	orr.w	r2, r3, #32
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e007      	b.n	80056dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	f003 0304 	and.w	r3, r3, #4
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d1c3      	bne.n	8005662 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056fa:	d11b      	bne.n	8005734 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005704:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2220      	movs	r2, #32
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005720:	f043 0204 	orr.w	r2, r3, #4
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e000      	b.n	8005736 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr

08005740 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e272      	b.n	8005c38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 8087 	beq.w	800586e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005760:	4b92      	ldr	r3, [pc, #584]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f003 030c 	and.w	r3, r3, #12
 8005768:	2b04      	cmp	r3, #4
 800576a:	d00c      	beq.n	8005786 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800576c:	4b8f      	ldr	r3, [pc, #572]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f003 030c 	and.w	r3, r3, #12
 8005774:	2b08      	cmp	r3, #8
 8005776:	d112      	bne.n	800579e <HAL_RCC_OscConfig+0x5e>
 8005778:	4b8c      	ldr	r3, [pc, #560]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005784:	d10b      	bne.n	800579e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005786:	4b89      	ldr	r3, [pc, #548]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d06c      	beq.n	800586c <HAL_RCC_OscConfig+0x12c>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d168      	bne.n	800586c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e24c      	b.n	8005c38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057a6:	d106      	bne.n	80057b6 <HAL_RCC_OscConfig+0x76>
 80057a8:	4b80      	ldr	r3, [pc, #512]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a7f      	ldr	r2, [pc, #508]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 80057ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	e02e      	b.n	8005814 <HAL_RCC_OscConfig+0xd4>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10c      	bne.n	80057d8 <HAL_RCC_OscConfig+0x98>
 80057be:	4b7b      	ldr	r3, [pc, #492]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a7a      	ldr	r2, [pc, #488]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 80057c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	4b78      	ldr	r3, [pc, #480]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a77      	ldr	r2, [pc, #476]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 80057d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	e01d      	b.n	8005814 <HAL_RCC_OscConfig+0xd4>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057e0:	d10c      	bne.n	80057fc <HAL_RCC_OscConfig+0xbc>
 80057e2:	4b72      	ldr	r3, [pc, #456]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a71      	ldr	r2, [pc, #452]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 80057e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	4b6f      	ldr	r3, [pc, #444]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a6e      	ldr	r2, [pc, #440]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 80057f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	e00b      	b.n	8005814 <HAL_RCC_OscConfig+0xd4>
 80057fc:	4b6b      	ldr	r3, [pc, #428]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a6a      	ldr	r2, [pc, #424]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 8005802:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	4b68      	ldr	r3, [pc, #416]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a67      	ldr	r2, [pc, #412]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 800580e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005812:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d013      	beq.n	8005844 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581c:	f7fd ffbc 	bl	8003798 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005824:	f7fd ffb8 	bl	8003798 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b64      	cmp	r3, #100	@ 0x64
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e200      	b.n	8005c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005836:	4b5d      	ldr	r3, [pc, #372]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f0      	beq.n	8005824 <HAL_RCC_OscConfig+0xe4>
 8005842:	e014      	b.n	800586e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005844:	f7fd ffa8 	bl	8003798 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800584c:	f7fd ffa4 	bl	8003798 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b64      	cmp	r3, #100	@ 0x64
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e1ec      	b.n	8005c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800585e:	4b53      	ldr	r3, [pc, #332]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <HAL_RCC_OscConfig+0x10c>
 800586a:	e000      	b.n	800586e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800586c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d063      	beq.n	8005942 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800587a:	4b4c      	ldr	r3, [pc, #304]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f003 030c 	and.w	r3, r3, #12
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00b      	beq.n	800589e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005886:	4b49      	ldr	r3, [pc, #292]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f003 030c 	and.w	r3, r3, #12
 800588e:	2b08      	cmp	r3, #8
 8005890:	d11c      	bne.n	80058cc <HAL_RCC_OscConfig+0x18c>
 8005892:	4b46      	ldr	r3, [pc, #280]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d116      	bne.n	80058cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800589e:	4b43      	ldr	r3, [pc, #268]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d005      	beq.n	80058b6 <HAL_RCC_OscConfig+0x176>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d001      	beq.n	80058b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e1c0      	b.n	8005c38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b6:	4b3d      	ldr	r3, [pc, #244]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	4939      	ldr	r1, [pc, #228]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ca:	e03a      	b.n	8005942 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d020      	beq.n	8005916 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058d4:	4b36      	ldr	r3, [pc, #216]	@ (80059b0 <HAL_RCC_OscConfig+0x270>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058da:	f7fd ff5d 	bl	8003798 <HAL_GetTick>
 80058de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058e2:	f7fd ff59 	bl	8003798 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e1a1      	b.n	8005c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058f4:	4b2d      	ldr	r3, [pc, #180]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0f0      	beq.n	80058e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005900:	4b2a      	ldr	r3, [pc, #168]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	4927      	ldr	r1, [pc, #156]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 8005910:	4313      	orrs	r3, r2
 8005912:	600b      	str	r3, [r1, #0]
 8005914:	e015      	b.n	8005942 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005916:	4b26      	ldr	r3, [pc, #152]	@ (80059b0 <HAL_RCC_OscConfig+0x270>)
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591c:	f7fd ff3c 	bl	8003798 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005924:	f7fd ff38 	bl	8003798 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e180      	b.n	8005c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005936:	4b1d      	ldr	r3, [pc, #116]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f0      	bne.n	8005924 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	2b00      	cmp	r3, #0
 800594c:	d03a      	beq.n	80059c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d019      	beq.n	800598a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005956:	4b17      	ldr	r3, [pc, #92]	@ (80059b4 <HAL_RCC_OscConfig+0x274>)
 8005958:	2201      	movs	r2, #1
 800595a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800595c:	f7fd ff1c 	bl	8003798 <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005964:	f7fd ff18 	bl	8003798 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e160      	b.n	8005c38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005976:	4b0d      	ldr	r3, [pc, #52]	@ (80059ac <HAL_RCC_OscConfig+0x26c>)
 8005978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0f0      	beq.n	8005964 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005982:	2001      	movs	r0, #1
 8005984:	f000 fafe 	bl	8005f84 <RCC_Delay>
 8005988:	e01c      	b.n	80059c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800598a:	4b0a      	ldr	r3, [pc, #40]	@ (80059b4 <HAL_RCC_OscConfig+0x274>)
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005990:	f7fd ff02 	bl	8003798 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005996:	e00f      	b.n	80059b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005998:	f7fd fefe 	bl	8003798 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d908      	bls.n	80059b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e146      	b.n	8005c38 <HAL_RCC_OscConfig+0x4f8>
 80059aa:	bf00      	nop
 80059ac:	40021000 	.word	0x40021000
 80059b0:	42420000 	.word	0x42420000
 80059b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059b8:	4b92      	ldr	r3, [pc, #584]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 80059ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1e9      	bne.n	8005998 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 80a6 	beq.w	8005b1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059d2:	2300      	movs	r3, #0
 80059d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059d6:	4b8b      	ldr	r3, [pc, #556]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10d      	bne.n	80059fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059e2:	4b88      	ldr	r3, [pc, #544]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	4a87      	ldr	r2, [pc, #540]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 80059e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059ec:	61d3      	str	r3, [r2, #28]
 80059ee:	4b85      	ldr	r3, [pc, #532]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059f6:	60bb      	str	r3, [r7, #8]
 80059f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059fa:	2301      	movs	r3, #1
 80059fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059fe:	4b82      	ldr	r3, [pc, #520]	@ (8005c08 <HAL_RCC_OscConfig+0x4c8>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d118      	bne.n	8005a3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a0a:	4b7f      	ldr	r3, [pc, #508]	@ (8005c08 <HAL_RCC_OscConfig+0x4c8>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a7e      	ldr	r2, [pc, #504]	@ (8005c08 <HAL_RCC_OscConfig+0x4c8>)
 8005a10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a16:	f7fd febf 	bl	8003798 <HAL_GetTick>
 8005a1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a1c:	e008      	b.n	8005a30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a1e:	f7fd febb 	bl	8003798 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b64      	cmp	r3, #100	@ 0x64
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e103      	b.n	8005c38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a30:	4b75      	ldr	r3, [pc, #468]	@ (8005c08 <HAL_RCC_OscConfig+0x4c8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0f0      	beq.n	8005a1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d106      	bne.n	8005a52 <HAL_RCC_OscConfig+0x312>
 8005a44:	4b6f      	ldr	r3, [pc, #444]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	4a6e      	ldr	r2, [pc, #440]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005a4a:	f043 0301 	orr.w	r3, r3, #1
 8005a4e:	6213      	str	r3, [r2, #32]
 8005a50:	e02d      	b.n	8005aae <HAL_RCC_OscConfig+0x36e>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10c      	bne.n	8005a74 <HAL_RCC_OscConfig+0x334>
 8005a5a:	4b6a      	ldr	r3, [pc, #424]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	4a69      	ldr	r2, [pc, #420]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005a60:	f023 0301 	bic.w	r3, r3, #1
 8005a64:	6213      	str	r3, [r2, #32]
 8005a66:	4b67      	ldr	r3, [pc, #412]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	4a66      	ldr	r2, [pc, #408]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005a6c:	f023 0304 	bic.w	r3, r3, #4
 8005a70:	6213      	str	r3, [r2, #32]
 8005a72:	e01c      	b.n	8005aae <HAL_RCC_OscConfig+0x36e>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	2b05      	cmp	r3, #5
 8005a7a:	d10c      	bne.n	8005a96 <HAL_RCC_OscConfig+0x356>
 8005a7c:	4b61      	ldr	r3, [pc, #388]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	4a60      	ldr	r2, [pc, #384]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005a82:	f043 0304 	orr.w	r3, r3, #4
 8005a86:	6213      	str	r3, [r2, #32]
 8005a88:	4b5e      	ldr	r3, [pc, #376]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	4a5d      	ldr	r2, [pc, #372]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	6213      	str	r3, [r2, #32]
 8005a94:	e00b      	b.n	8005aae <HAL_RCC_OscConfig+0x36e>
 8005a96:	4b5b      	ldr	r3, [pc, #364]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	4a5a      	ldr	r2, [pc, #360]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005a9c:	f023 0301 	bic.w	r3, r3, #1
 8005aa0:	6213      	str	r3, [r2, #32]
 8005aa2:	4b58      	ldr	r3, [pc, #352]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	4a57      	ldr	r2, [pc, #348]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005aa8:	f023 0304 	bic.w	r3, r3, #4
 8005aac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d015      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ab6:	f7fd fe6f 	bl	8003798 <HAL_GetTick>
 8005aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005abc:	e00a      	b.n	8005ad4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005abe:	f7fd fe6b 	bl	8003798 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e0b1      	b.n	8005c38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad4:	4b4b      	ldr	r3, [pc, #300]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0ee      	beq.n	8005abe <HAL_RCC_OscConfig+0x37e>
 8005ae0:	e014      	b.n	8005b0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ae2:	f7fd fe59 	bl	8003798 <HAL_GetTick>
 8005ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ae8:	e00a      	b.n	8005b00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aea:	f7fd fe55 	bl	8003798 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e09b      	b.n	8005c38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b00:	4b40      	ldr	r3, [pc, #256]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1ee      	bne.n	8005aea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b0c:	7dfb      	ldrb	r3, [r7, #23]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d105      	bne.n	8005b1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b12:	4b3c      	ldr	r3, [pc, #240]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	4a3b      	ldr	r2, [pc, #236]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005b18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 8087 	beq.w	8005c36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b28:	4b36      	ldr	r3, [pc, #216]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f003 030c 	and.w	r3, r3, #12
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	d061      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d146      	bne.n	8005bca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b3c:	4b33      	ldr	r3, [pc, #204]	@ (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b42:	f7fd fe29 	bl	8003798 <HAL_GetTick>
 8005b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b48:	e008      	b.n	8005b5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b4a:	f7fd fe25 	bl	8003798 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e06d      	b.n	8005c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b5c:	4b29      	ldr	r3, [pc, #164]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1f0      	bne.n	8005b4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b70:	d108      	bne.n	8005b84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b72:	4b24      	ldr	r3, [pc, #144]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	4921      	ldr	r1, [pc, #132]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b84:	4b1f      	ldr	r3, [pc, #124]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a19      	ldr	r1, [r3, #32]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b94:	430b      	orrs	r3, r1
 8005b96:	491b      	ldr	r1, [pc, #108]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba2:	f7fd fdf9 	bl	8003798 <HAL_GetTick>
 8005ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005baa:	f7fd fdf5 	bl	8003798 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e03d      	b.n	8005c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bbc:	4b11      	ldr	r3, [pc, #68]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0f0      	beq.n	8005baa <HAL_RCC_OscConfig+0x46a>
 8005bc8:	e035      	b.n	8005c36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bca:	4b10      	ldr	r3, [pc, #64]	@ (8005c0c <HAL_RCC_OscConfig+0x4cc>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd0:	f7fd fde2 	bl	8003798 <HAL_GetTick>
 8005bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd8:	f7fd fdde 	bl	8003798 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e026      	b.n	8005c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bea:	4b06      	ldr	r3, [pc, #24]	@ (8005c04 <HAL_RCC_OscConfig+0x4c4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1f0      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x498>
 8005bf6:	e01e      	b.n	8005c36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d107      	bne.n	8005c10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e019      	b.n	8005c38 <HAL_RCC_OscConfig+0x4f8>
 8005c04:	40021000 	.word	0x40021000
 8005c08:	40007000 	.word	0x40007000
 8005c0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c10:	4b0b      	ldr	r3, [pc, #44]	@ (8005c40 <HAL_RCC_OscConfig+0x500>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d106      	bne.n	8005c32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d001      	beq.n	8005c36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	40021000 	.word	0x40021000

08005c44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e0d0      	b.n	8005dfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c58:	4b6a      	ldr	r3, [pc, #424]	@ (8005e04 <HAL_RCC_ClockConfig+0x1c0>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0307 	and.w	r3, r3, #7
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d910      	bls.n	8005c88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c66:	4b67      	ldr	r3, [pc, #412]	@ (8005e04 <HAL_RCC_ClockConfig+0x1c0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f023 0207 	bic.w	r2, r3, #7
 8005c6e:	4965      	ldr	r1, [pc, #404]	@ (8005e04 <HAL_RCC_ClockConfig+0x1c0>)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c76:	4b63      	ldr	r3, [pc, #396]	@ (8005e04 <HAL_RCC_ClockConfig+0x1c0>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d001      	beq.n	8005c88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e0b8      	b.n	8005dfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d020      	beq.n	8005cd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d005      	beq.n	8005cac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ca0:	4b59      	ldr	r3, [pc, #356]	@ (8005e08 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	4a58      	ldr	r2, [pc, #352]	@ (8005e08 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005caa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0308 	and.w	r3, r3, #8
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d005      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cb8:	4b53      	ldr	r3, [pc, #332]	@ (8005e08 <HAL_RCC_ClockConfig+0x1c4>)
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	4a52      	ldr	r2, [pc, #328]	@ (8005e08 <HAL_RCC_ClockConfig+0x1c4>)
 8005cbe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005cc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cc4:	4b50      	ldr	r3, [pc, #320]	@ (8005e08 <HAL_RCC_ClockConfig+0x1c4>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	494d      	ldr	r1, [pc, #308]	@ (8005e08 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d040      	beq.n	8005d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d107      	bne.n	8005cfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cea:	4b47      	ldr	r3, [pc, #284]	@ (8005e08 <HAL_RCC_ClockConfig+0x1c4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d115      	bne.n	8005d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e07f      	b.n	8005dfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d107      	bne.n	8005d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d02:	4b41      	ldr	r3, [pc, #260]	@ (8005e08 <HAL_RCC_ClockConfig+0x1c4>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d109      	bne.n	8005d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e073      	b.n	8005dfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d12:	4b3d      	ldr	r3, [pc, #244]	@ (8005e08 <HAL_RCC_ClockConfig+0x1c4>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e06b      	b.n	8005dfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d22:	4b39      	ldr	r3, [pc, #228]	@ (8005e08 <HAL_RCC_ClockConfig+0x1c4>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f023 0203 	bic.w	r2, r3, #3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	4936      	ldr	r1, [pc, #216]	@ (8005e08 <HAL_RCC_ClockConfig+0x1c4>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d34:	f7fd fd30 	bl	8003798 <HAL_GetTick>
 8005d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d3a:	e00a      	b.n	8005d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d3c:	f7fd fd2c 	bl	8003798 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e053      	b.n	8005dfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d52:	4b2d      	ldr	r3, [pc, #180]	@ (8005e08 <HAL_RCC_ClockConfig+0x1c4>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f003 020c 	and.w	r2, r3, #12
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d1eb      	bne.n	8005d3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d64:	4b27      	ldr	r3, [pc, #156]	@ (8005e04 <HAL_RCC_ClockConfig+0x1c0>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d210      	bcs.n	8005d94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d72:	4b24      	ldr	r3, [pc, #144]	@ (8005e04 <HAL_RCC_ClockConfig+0x1c0>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f023 0207 	bic.w	r2, r3, #7
 8005d7a:	4922      	ldr	r1, [pc, #136]	@ (8005e04 <HAL_RCC_ClockConfig+0x1c0>)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d82:	4b20      	ldr	r3, [pc, #128]	@ (8005e04 <HAL_RCC_ClockConfig+0x1c0>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d001      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e032      	b.n	8005dfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0304 	and.w	r3, r3, #4
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d008      	beq.n	8005db2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005da0:	4b19      	ldr	r3, [pc, #100]	@ (8005e08 <HAL_RCC_ClockConfig+0x1c4>)
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	4916      	ldr	r1, [pc, #88]	@ (8005e08 <HAL_RCC_ClockConfig+0x1c4>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d009      	beq.n	8005dd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005dbe:	4b12      	ldr	r3, [pc, #72]	@ (8005e08 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	490e      	ldr	r1, [pc, #56]	@ (8005e08 <HAL_RCC_ClockConfig+0x1c4>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005dd2:	f000 f821 	bl	8005e18 <HAL_RCC_GetSysClockFreq>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005e08 <HAL_RCC_ClockConfig+0x1c4>)
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	091b      	lsrs	r3, r3, #4
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	490a      	ldr	r1, [pc, #40]	@ (8005e0c <HAL_RCC_ClockConfig+0x1c8>)
 8005de4:	5ccb      	ldrb	r3, [r1, r3]
 8005de6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dea:	4a09      	ldr	r2, [pc, #36]	@ (8005e10 <HAL_RCC_ClockConfig+0x1cc>)
 8005dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005dee:	4b09      	ldr	r3, [pc, #36]	@ (8005e14 <HAL_RCC_ClockConfig+0x1d0>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fd f9f4 	bl	80031e0 <HAL_InitTick>

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40022000 	.word	0x40022000
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	0800dffc 	.word	0x0800dffc
 8005e10:	2000101c 	.word	0x2000101c
 8005e14:	20001024 	.word	0x20001024

08005e18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	2300      	movs	r3, #0
 8005e24:	60bb      	str	r3, [r7, #8]
 8005e26:	2300      	movs	r3, #0
 8005e28:	617b      	str	r3, [r7, #20]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e32:	4b1e      	ldr	r3, [pc, #120]	@ (8005eac <HAL_RCC_GetSysClockFreq+0x94>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f003 030c 	and.w	r3, r3, #12
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d002      	beq.n	8005e48 <HAL_RCC_GetSysClockFreq+0x30>
 8005e42:	2b08      	cmp	r3, #8
 8005e44:	d003      	beq.n	8005e4e <HAL_RCC_GetSysClockFreq+0x36>
 8005e46:	e027      	b.n	8005e98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e48:	4b19      	ldr	r3, [pc, #100]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e4a:	613b      	str	r3, [r7, #16]
      break;
 8005e4c:	e027      	b.n	8005e9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	0c9b      	lsrs	r3, r3, #18
 8005e52:	f003 030f 	and.w	r3, r3, #15
 8005e56:	4a17      	ldr	r2, [pc, #92]	@ (8005eb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005e58:	5cd3      	ldrb	r3, [r2, r3]
 8005e5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d010      	beq.n	8005e88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e66:	4b11      	ldr	r3, [pc, #68]	@ (8005eac <HAL_RCC_GetSysClockFreq+0x94>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	0c5b      	lsrs	r3, r3, #17
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	4a11      	ldr	r2, [pc, #68]	@ (8005eb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005e72:	5cd3      	ldrb	r3, [r2, r3]
 8005e74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a0d      	ldr	r2, [pc, #52]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e7a:	fb03 f202 	mul.w	r2, r3, r2
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e84:	617b      	str	r3, [r7, #20]
 8005e86:	e004      	b.n	8005e92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a0c      	ldr	r2, [pc, #48]	@ (8005ebc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005e8c:	fb02 f303 	mul.w	r3, r2, r3
 8005e90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	613b      	str	r3, [r7, #16]
      break;
 8005e96:	e002      	b.n	8005e9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e98:	4b05      	ldr	r3, [pc, #20]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e9a:	613b      	str	r3, [r7, #16]
      break;
 8005e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e9e:	693b      	ldr	r3, [r7, #16]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	371c      	adds	r7, #28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bc80      	pop	{r7}
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	007a1200 	.word	0x007a1200
 8005eb4:	0800e014 	.word	0x0800e014
 8005eb8:	0800e024 	.word	0x0800e024
 8005ebc:	003d0900 	.word	0x003d0900

08005ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ec4:	4b02      	ldr	r3, [pc, #8]	@ (8005ed0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bc80      	pop	{r7}
 8005ece:	4770      	bx	lr
 8005ed0:	2000101c 	.word	0x2000101c

08005ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ed8:	f7ff fff2 	bl	8005ec0 <HAL_RCC_GetHCLKFreq>
 8005edc:	4602      	mov	r2, r0
 8005ede:	4b05      	ldr	r3, [pc, #20]	@ (8005ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	0a1b      	lsrs	r3, r3, #8
 8005ee4:	f003 0307 	and.w	r3, r3, #7
 8005ee8:	4903      	ldr	r1, [pc, #12]	@ (8005ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005eea:	5ccb      	ldrb	r3, [r1, r3]
 8005eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	0800e00c 	.word	0x0800e00c

08005efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f00:	f7ff ffde 	bl	8005ec0 <HAL_RCC_GetHCLKFreq>
 8005f04:	4602      	mov	r2, r0
 8005f06:	4b05      	ldr	r3, [pc, #20]	@ (8005f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	0adb      	lsrs	r3, r3, #11
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	4903      	ldr	r1, [pc, #12]	@ (8005f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f12:	5ccb      	ldrb	r3, [r1, r3]
 8005f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	0800e00c 	.word	0x0800e00c

08005f24 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	220f      	movs	r2, #15
 8005f32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005f34:	4b11      	ldr	r3, [pc, #68]	@ (8005f7c <HAL_RCC_GetClockConfig+0x58>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f003 0203 	and.w	r2, r3, #3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005f40:	4b0e      	ldr	r3, [pc, #56]	@ (8005f7c <HAL_RCC_GetClockConfig+0x58>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f7c <HAL_RCC_GetClockConfig+0x58>)
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005f58:	4b08      	ldr	r3, [pc, #32]	@ (8005f7c <HAL_RCC_GetClockConfig+0x58>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	08db      	lsrs	r3, r3, #3
 8005f5e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005f66:	4b06      	ldr	r3, [pc, #24]	@ (8005f80 <HAL_RCC_GetClockConfig+0x5c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0207 	and.w	r2, r3, #7
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr
 8005f7c:	40021000 	.word	0x40021000
 8005f80:	40022000 	.word	0x40022000

08005f84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb8 <RCC_Delay+0x34>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a0a      	ldr	r2, [pc, #40]	@ (8005fbc <RCC_Delay+0x38>)
 8005f92:	fba2 2303 	umull	r2, r3, r2, r3
 8005f96:	0a5b      	lsrs	r3, r3, #9
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	fb02 f303 	mul.w	r3, r2, r3
 8005f9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005fa0:	bf00      	nop
  }
  while (Delay --);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	1e5a      	subs	r2, r3, #1
 8005fa6:	60fa      	str	r2, [r7, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1f9      	bne.n	8005fa0 <RCC_Delay+0x1c>
}
 8005fac:	bf00      	nop
 8005fae:	bf00      	nop
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bc80      	pop	{r7}
 8005fb6:	4770      	bx	lr
 8005fb8:	2000101c 	.word	0x2000101c
 8005fbc:	10624dd3 	.word	0x10624dd3

08005fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	613b      	str	r3, [r7, #16]
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d07d      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fe0:	4b4f      	ldr	r3, [pc, #316]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10d      	bne.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fec:	4b4c      	ldr	r3, [pc, #304]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	4a4b      	ldr	r2, [pc, #300]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ff6:	61d3      	str	r3, [r2, #28]
 8005ff8:	4b49      	ldr	r3, [pc, #292]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006000:	60bb      	str	r3, [r7, #8]
 8006002:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006004:	2301      	movs	r3, #1
 8006006:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006008:	4b46      	ldr	r3, [pc, #280]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006010:	2b00      	cmp	r3, #0
 8006012:	d118      	bne.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006014:	4b43      	ldr	r3, [pc, #268]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a42      	ldr	r2, [pc, #264]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800601a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800601e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006020:	f7fd fbba 	bl	8003798 <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006026:	e008      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006028:	f7fd fbb6 	bl	8003798 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b64      	cmp	r3, #100	@ 0x64
 8006034:	d901      	bls.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e06d      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800603a:	4b3a      	ldr	r3, [pc, #232]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0f0      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006046:	4b36      	ldr	r3, [pc, #216]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800604e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d02e      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	429a      	cmp	r2, r3
 8006062:	d027      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006064:	4b2e      	ldr	r3, [pc, #184]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800606c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800606e:	4b2e      	ldr	r3, [pc, #184]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006070:	2201      	movs	r2, #1
 8006072:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006074:	4b2c      	ldr	r3, [pc, #176]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006076:	2200      	movs	r2, #0
 8006078:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800607a:	4a29      	ldr	r2, [pc, #164]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d014      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608a:	f7fd fb85 	bl	8003798 <HAL_GetTick>
 800608e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006090:	e00a      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006092:	f7fd fb81 	bl	8003798 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e036      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0ee      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	4917      	ldr	r1, [pc, #92]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d105      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060cc:	4b14      	ldr	r3, [pc, #80]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	4a13      	ldr	r2, [pc, #76]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d008      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	490b      	ldr	r1, [pc, #44]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0310 	and.w	r3, r3, #16
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d008      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006102:	4b07      	ldr	r3, [pc, #28]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	4904      	ldr	r1, [pc, #16]	@ (8006120 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006110:	4313      	orrs	r3, r2
 8006112:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	40021000 	.word	0x40021000
 8006124:	40007000 	.word	0x40007000
 8006128:	42420440 	.word	0x42420440

0800612c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	617b      	str	r3, [r7, #20]
 8006138:	2300      	movs	r3, #0
 800613a:	61fb      	str	r3, [r7, #28]
 800613c:	2300      	movs	r3, #0
 800613e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	2300      	movs	r3, #0
 8006146:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b10      	cmp	r3, #16
 800614c:	d00a      	beq.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b10      	cmp	r3, #16
 8006152:	f200 808a 	bhi.w	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d045      	beq.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b02      	cmp	r3, #2
 8006160:	d075      	beq.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006162:	e082      	b.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8006164:	4b46      	ldr	r3, [pc, #280]	@ (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800616a:	4b45      	ldr	r3, [pc, #276]	@ (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d07b      	beq.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	0c9b      	lsrs	r3, r3, #18
 800617a:	f003 030f 	and.w	r3, r3, #15
 800617e:	4a41      	ldr	r2, [pc, #260]	@ (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8006180:	5cd3      	ldrb	r3, [r2, r3]
 8006182:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d015      	beq.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800618e:	4b3c      	ldr	r3, [pc, #240]	@ (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	0c5b      	lsrs	r3, r3, #17
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	4a3b      	ldr	r2, [pc, #236]	@ (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800619a:	5cd3      	ldrb	r3, [r2, r3]
 800619c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00d      	beq.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80061a8:	4a38      	ldr	r2, [pc, #224]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	fb02 f303 	mul.w	r3, r2, r3
 80061b6:	61fb      	str	r3, [r7, #28]
 80061b8:	e004      	b.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	4a34      	ldr	r2, [pc, #208]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80061be:	fb02 f303 	mul.w	r3, r2, r3
 80061c2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80061c4:	4b2e      	ldr	r3, [pc, #184]	@ (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061d0:	d102      	bne.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	61bb      	str	r3, [r7, #24]
      break;
 80061d6:	e04a      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80061de:	fba2 2303 	umull	r2, r3, r2, r3
 80061e2:	085b      	lsrs	r3, r3, #1
 80061e4:	61bb      	str	r3, [r7, #24]
      break;
 80061e6:	e042      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80061e8:	4b25      	ldr	r3, [pc, #148]	@ (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061f8:	d108      	bne.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d003      	beq.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8006204:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006208:	61bb      	str	r3, [r7, #24]
 800620a:	e01f      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006216:	d109      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006218:	4b19      	ldr	r3, [pc, #100]	@ (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800621a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8006224:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8006228:	61bb      	str	r3, [r7, #24]
 800622a:	e00f      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006232:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006236:	d11c      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006238:	4b11      	ldr	r3, [pc, #68]	@ (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d016      	beq.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006244:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8006248:	61bb      	str	r3, [r7, #24]
      break;
 800624a:	e012      	b.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800624c:	e011      	b.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800624e:	f7ff fe55 	bl	8005efc <HAL_RCC_GetPCLK2Freq>
 8006252:	4602      	mov	r2, r0
 8006254:	4b0a      	ldr	r3, [pc, #40]	@ (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	0b9b      	lsrs	r3, r3, #14
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	3301      	adds	r3, #1
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	fbb2 f3f3 	udiv	r3, r2, r3
 8006266:	61bb      	str	r3, [r7, #24]
      break;
 8006268:	e004      	b.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800626a:	bf00      	nop
 800626c:	e002      	b.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800626e:	bf00      	nop
 8006270:	e000      	b.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006272:	bf00      	nop
    }
  }
  return (frequency);
 8006274:	69bb      	ldr	r3, [r7, #24]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3720      	adds	r7, #32
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	40021000 	.word	0x40021000
 8006284:	0800e028 	.word	0x0800e028
 8006288:	0800e038 	.word	0x0800e038
 800628c:	007a1200 	.word	0x007a1200
 8006290:	003d0900 	.word	0x003d0900
 8006294:	aaaaaaab 	.word	0xaaaaaaab

08006298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e041      	b.n	800632e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d106      	bne.n	80062c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7fc fe7c 	bl	8002fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3304      	adds	r3, #4
 80062d4:	4619      	mov	r1, r3
 80062d6:	4610      	mov	r0, r2
 80062d8:	f000 ff06 	bl	80070e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b01      	cmp	r3, #1
 800634a:	d001      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e03a      	b.n	80063c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0201 	orr.w	r2, r2, #1
 8006366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a18      	ldr	r2, [pc, #96]	@ (80063d0 <HAL_TIM_Base_Start_IT+0x98>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d00e      	beq.n	8006390 <HAL_TIM_Base_Start_IT+0x58>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800637a:	d009      	beq.n	8006390 <HAL_TIM_Base_Start_IT+0x58>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a14      	ldr	r2, [pc, #80]	@ (80063d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d004      	beq.n	8006390 <HAL_TIM_Base_Start_IT+0x58>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a13      	ldr	r2, [pc, #76]	@ (80063d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d111      	bne.n	80063b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b06      	cmp	r3, #6
 80063a0:	d010      	beq.n	80063c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f042 0201 	orr.w	r2, r2, #1
 80063b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b2:	e007      	b.n	80063c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0201 	orr.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bc80      	pop	{r7}
 80063ce:	4770      	bx	lr
 80063d0:	40012c00 	.word	0x40012c00
 80063d4:	40000400 	.word	0x40000400
 80063d8:	40000800 	.word	0x40000800

080063dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0201 	bic.w	r2, r2, #1
 80063f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6a1a      	ldr	r2, [r3, #32]
 80063fa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80063fe:	4013      	ands	r3, r2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10f      	bne.n	8006424 <HAL_TIM_Base_Stop_IT+0x48>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6a1a      	ldr	r2, [r3, #32]
 800640a:	f240 4344 	movw	r3, #1092	@ 0x444
 800640e:	4013      	ands	r3, r2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d107      	bne.n	8006424 <HAL_TIM_Base_Stop_IT+0x48>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0201 	bic.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr

08006438 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e041      	b.n	80064ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f839 	bl	80064d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3304      	adds	r3, #4
 8006474:	4619      	mov	r1, r3
 8006476:	4610      	mov	r0, r2
 8006478:	f000 fe36 	bl	80070e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80064de:	bf00      	nop
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bc80      	pop	{r7}
 80064e6:	4770      	bx	lr

080064e8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d109      	bne.n	8006514 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b02      	cmp	r3, #2
 800650a:	bf0c      	ite	eq
 800650c:	2301      	moveq	r3, #1
 800650e:	2300      	movne	r3, #0
 8006510:	b2db      	uxtb	r3, r3
 8006512:	e022      	b.n	800655a <HAL_TIM_PWM_Start_DMA+0x72>
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2b04      	cmp	r3, #4
 8006518:	d109      	bne.n	800652e <HAL_TIM_PWM_Start_DMA+0x46>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	bf0c      	ite	eq
 8006526:	2301      	moveq	r3, #1
 8006528:	2300      	movne	r3, #0
 800652a:	b2db      	uxtb	r3, r3
 800652c:	e015      	b.n	800655a <HAL_TIM_PWM_Start_DMA+0x72>
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b08      	cmp	r3, #8
 8006532:	d109      	bne.n	8006548 <HAL_TIM_PWM_Start_DMA+0x60>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b02      	cmp	r3, #2
 800653e:	bf0c      	ite	eq
 8006540:	2301      	moveq	r3, #1
 8006542:	2300      	movne	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	e008      	b.n	800655a <HAL_TIM_PWM_Start_DMA+0x72>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b02      	cmp	r3, #2
 8006552:	bf0c      	ite	eq
 8006554:	2301      	moveq	r3, #1
 8006556:	2300      	movne	r3, #0
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800655e:	2302      	movs	r3, #2
 8006560:	e153      	b.n	800680a <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d109      	bne.n	800657c <HAL_TIM_PWM_Start_DMA+0x94>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b01      	cmp	r3, #1
 8006572:	bf0c      	ite	eq
 8006574:	2301      	moveq	r3, #1
 8006576:	2300      	movne	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	e022      	b.n	80065c2 <HAL_TIM_PWM_Start_DMA+0xda>
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b04      	cmp	r3, #4
 8006580:	d109      	bne.n	8006596 <HAL_TIM_PWM_Start_DMA+0xae>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b01      	cmp	r3, #1
 800658c:	bf0c      	ite	eq
 800658e:	2301      	moveq	r3, #1
 8006590:	2300      	movne	r3, #0
 8006592:	b2db      	uxtb	r3, r3
 8006594:	e015      	b.n	80065c2 <HAL_TIM_PWM_Start_DMA+0xda>
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b08      	cmp	r3, #8
 800659a:	d109      	bne.n	80065b0 <HAL_TIM_PWM_Start_DMA+0xc8>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	bf0c      	ite	eq
 80065a8:	2301      	moveq	r3, #1
 80065aa:	2300      	movne	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	e008      	b.n	80065c2 <HAL_TIM_PWM_Start_DMA+0xda>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	bf0c      	ite	eq
 80065bc:	2301      	moveq	r3, #1
 80065be:	2300      	movne	r3, #0
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d024      	beq.n	8006610 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <HAL_TIM_PWM_Start_DMA+0xea>
 80065cc:	887b      	ldrh	r3, [r7, #2]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e119      	b.n	800680a <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d104      	bne.n	80065e6 <HAL_TIM_PWM_Start_DMA+0xfe>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065e4:	e016      	b.n	8006614 <HAL_TIM_PWM_Start_DMA+0x12c>
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d104      	bne.n	80065f6 <HAL_TIM_PWM_Start_DMA+0x10e>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065f4:	e00e      	b.n	8006614 <HAL_TIM_PWM_Start_DMA+0x12c>
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2b08      	cmp	r3, #8
 80065fa:	d104      	bne.n	8006606 <HAL_TIM_PWM_Start_DMA+0x11e>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006604:	e006      	b.n	8006614 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2202      	movs	r2, #2
 800660a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800660e:	e001      	b.n	8006614 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e0fa      	b.n	800680a <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2b0c      	cmp	r3, #12
 8006618:	f200 80ae 	bhi.w	8006778 <HAL_TIM_PWM_Start_DMA+0x290>
 800661c:	a201      	add	r2, pc, #4	@ (adr r2, 8006624 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800661e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006622:	bf00      	nop
 8006624:	08006659 	.word	0x08006659
 8006628:	08006779 	.word	0x08006779
 800662c:	08006779 	.word	0x08006779
 8006630:	08006779 	.word	0x08006779
 8006634:	080066a1 	.word	0x080066a1
 8006638:	08006779 	.word	0x08006779
 800663c:	08006779 	.word	0x08006779
 8006640:	08006779 	.word	0x08006779
 8006644:	080066e9 	.word	0x080066e9
 8006648:	08006779 	.word	0x08006779
 800664c:	08006779 	.word	0x08006779
 8006650:	08006779 	.word	0x08006779
 8006654:	08006731 	.word	0x08006731
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665c:	4a6d      	ldr	r2, [pc, #436]	@ (8006814 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800665e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006664:	4a6c      	ldr	r2, [pc, #432]	@ (8006818 <HAL_TIM_PWM_Start_DMA+0x330>)
 8006666:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666c:	4a6b      	ldr	r2, [pc, #428]	@ (800681c <HAL_TIM_PWM_Start_DMA+0x334>)
 800666e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006674:	6879      	ldr	r1, [r7, #4]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3334      	adds	r3, #52	@ 0x34
 800667c:	461a      	mov	r2, r3
 800667e:	887b      	ldrh	r3, [r7, #2]
 8006680:	f7fd fed4 	bl	800442c <HAL_DMA_Start_IT>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e0bd      	b.n	800680a <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800669c:	60da      	str	r2, [r3, #12]
      break;
 800669e:	e06e      	b.n	800677e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a4:	4a5b      	ldr	r2, [pc, #364]	@ (8006814 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80066a6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ac:	4a5a      	ldr	r2, [pc, #360]	@ (8006818 <HAL_TIM_PWM_Start_DMA+0x330>)
 80066ae:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b4:	4a59      	ldr	r2, [pc, #356]	@ (800681c <HAL_TIM_PWM_Start_DMA+0x334>)
 80066b6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80066bc:	6879      	ldr	r1, [r7, #4]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3338      	adds	r3, #56	@ 0x38
 80066c4:	461a      	mov	r2, r3
 80066c6:	887b      	ldrh	r3, [r7, #2]
 80066c8:	f7fd feb0 	bl	800442c <HAL_DMA_Start_IT>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e099      	b.n	800680a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80066e4:	60da      	str	r2, [r3, #12]
      break;
 80066e6:	e04a      	b.n	800677e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ec:	4a49      	ldr	r2, [pc, #292]	@ (8006814 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80066ee:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f4:	4a48      	ldr	r2, [pc, #288]	@ (8006818 <HAL_TIM_PWM_Start_DMA+0x330>)
 80066f6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fc:	4a47      	ldr	r2, [pc, #284]	@ (800681c <HAL_TIM_PWM_Start_DMA+0x334>)
 80066fe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006704:	6879      	ldr	r1, [r7, #4]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	333c      	adds	r3, #60	@ 0x3c
 800670c:	461a      	mov	r2, r3
 800670e:	887b      	ldrh	r3, [r7, #2]
 8006710:	f7fd fe8c 	bl	800442c <HAL_DMA_Start_IT>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e075      	b.n	800680a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800672c:	60da      	str	r2, [r3, #12]
      break;
 800672e:	e026      	b.n	800677e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006734:	4a37      	ldr	r2, [pc, #220]	@ (8006814 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8006736:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800673c:	4a36      	ldr	r2, [pc, #216]	@ (8006818 <HAL_TIM_PWM_Start_DMA+0x330>)
 800673e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006744:	4a35      	ldr	r2, [pc, #212]	@ (800681c <HAL_TIM_PWM_Start_DMA+0x334>)
 8006746:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3340      	adds	r3, #64	@ 0x40
 8006754:	461a      	mov	r2, r3
 8006756:	887b      	ldrh	r3, [r7, #2]
 8006758:	f7fd fe68 	bl	800442c <HAL_DMA_Start_IT>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e051      	b.n	800680a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006774:	60da      	str	r2, [r3, #12]
      break;
 8006776:	e002      	b.n	800677e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	75fb      	strb	r3, [r7, #23]
      break;
 800677c:	bf00      	nop
  }

  if (status == HAL_OK)
 800677e:	7dfb      	ldrb	r3, [r7, #23]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d141      	bne.n	8006808 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2201      	movs	r2, #1
 800678a:	68b9      	ldr	r1, [r7, #8]
 800678c:	4618      	mov	r0, r3
 800678e:	f000 ff2b 	bl	80075e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a22      	ldr	r2, [pc, #136]	@ (8006820 <HAL_TIM_PWM_Start_DMA+0x338>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d107      	bne.n	80067ac <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80067aa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006820 <HAL_TIM_PWM_Start_DMA+0x338>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d00e      	beq.n	80067d4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067be:	d009      	beq.n	80067d4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a17      	ldr	r2, [pc, #92]	@ (8006824 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d004      	beq.n	80067d4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a16      	ldr	r2, [pc, #88]	@ (8006828 <HAL_TIM_PWM_Start_DMA+0x340>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d111      	bne.n	80067f8 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f003 0307 	and.w	r3, r3, #7
 80067de:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	2b06      	cmp	r3, #6
 80067e4:	d010      	beq.n	8006808 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f042 0201 	orr.w	r2, r2, #1
 80067f4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f6:	e007      	b.n	8006808 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0201 	orr.w	r2, r2, #1
 8006806:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006808:	7dfb      	ldrb	r3, [r7, #23]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	08006fd9 	.word	0x08006fd9
 8006818:	08007081 	.word	0x08007081
 800681c:	08006f47 	.word	0x08006f47
 8006820:	40012c00 	.word	0x40012c00
 8006824:	40000400 	.word	0x40000400
 8006828:	40000800 	.word	0x40000800

0800682c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b0c      	cmp	r3, #12
 800683e:	d855      	bhi.n	80068ec <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006840:	a201      	add	r2, pc, #4	@ (adr r2, 8006848 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006846:	bf00      	nop
 8006848:	0800687d 	.word	0x0800687d
 800684c:	080068ed 	.word	0x080068ed
 8006850:	080068ed 	.word	0x080068ed
 8006854:	080068ed 	.word	0x080068ed
 8006858:	08006899 	.word	0x08006899
 800685c:	080068ed 	.word	0x080068ed
 8006860:	080068ed 	.word	0x080068ed
 8006864:	080068ed 	.word	0x080068ed
 8006868:	080068b5 	.word	0x080068b5
 800686c:	080068ed 	.word	0x080068ed
 8006870:	080068ed 	.word	0x080068ed
 8006874:	080068ed 	.word	0x080068ed
 8006878:	080068d1 	.word	0x080068d1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800688a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006890:	4618      	mov	r0, r3
 8006892:	f7fd fe2b 	bl	80044ec <HAL_DMA_Abort_IT>
      break;
 8006896:	e02c      	b.n	80068f2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fd fe1d 	bl	80044ec <HAL_DMA_Abort_IT>
      break;
 80068b2:	e01e      	b.n	80068f2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7fd fe0f 	bl	80044ec <HAL_DMA_Abort_IT>
      break;
 80068ce:	e010      	b.n	80068f2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80068de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7fd fe01 	bl	80044ec <HAL_DMA_Abort_IT>
      break;
 80068ea:	e002      	b.n	80068f2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	73fb      	strb	r3, [r7, #15]
      break;
 80068f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d157      	bne.n	80069a8 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2200      	movs	r2, #0
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fe71 	bl	80075e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a2a      	ldr	r2, [pc, #168]	@ (80069b4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d117      	bne.n	8006940 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6a1a      	ldr	r2, [r3, #32]
 8006916:	f241 1311 	movw	r3, #4369	@ 0x1111
 800691a:	4013      	ands	r3, r2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10f      	bne.n	8006940 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6a1a      	ldr	r2, [r3, #32]
 8006926:	f240 4344 	movw	r3, #1092	@ 0x444
 800692a:	4013      	ands	r3, r2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d107      	bne.n	8006940 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800693e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6a1a      	ldr	r2, [r3, #32]
 8006946:	f241 1311 	movw	r3, #4369	@ 0x1111
 800694a:	4013      	ands	r3, r2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10f      	bne.n	8006970 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6a1a      	ldr	r2, [r3, #32]
 8006956:	f240 4344 	movw	r3, #1092	@ 0x444
 800695a:	4013      	ands	r3, r2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d107      	bne.n	8006970 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 0201 	bic.w	r2, r2, #1
 800696e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d104      	bne.n	8006980 <HAL_TIM_PWM_Stop_DMA+0x154>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800697e:	e013      	b.n	80069a8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2b04      	cmp	r3, #4
 8006984:	d104      	bne.n	8006990 <HAL_TIM_PWM_Stop_DMA+0x164>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800698e:	e00b      	b.n	80069a8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2b08      	cmp	r3, #8
 8006994:	d104      	bne.n	80069a0 <HAL_TIM_PWM_Stop_DMA+0x174>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800699e:	e003      	b.n	80069a8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	40012c00 	.word	0x40012c00

080069b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d122      	bne.n	8006a14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d11b      	bne.n	8006a14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f06f 0202 	mvn.w	r2, #2
 80069e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	f003 0303 	and.w	r3, r3, #3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fa76 	bl	8006eec <HAL_TIM_IC_CaptureCallback>
 8006a00:	e005      	b.n	8006a0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fa69 	bl	8006eda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fa78 	bl	8006efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	f003 0304 	and.w	r3, r3, #4
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	d122      	bne.n	8006a68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f003 0304 	and.w	r3, r3, #4
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	d11b      	bne.n	8006a68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f06f 0204 	mvn.w	r2, #4
 8006a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fa4c 	bl	8006eec <HAL_TIM_IC_CaptureCallback>
 8006a54:	e005      	b.n	8006a62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fa3f 	bl	8006eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fa4e 	bl	8006efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	f003 0308 	and.w	r3, r3, #8
 8006a72:	2b08      	cmp	r3, #8
 8006a74:	d122      	bne.n	8006abc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f003 0308 	and.w	r3, r3, #8
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d11b      	bne.n	8006abc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f06f 0208 	mvn.w	r2, #8
 8006a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2204      	movs	r2, #4
 8006a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fa22 	bl	8006eec <HAL_TIM_IC_CaptureCallback>
 8006aa8:	e005      	b.n	8006ab6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fa15 	bl	8006eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fa24 	bl	8006efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	f003 0310 	and.w	r3, r3, #16
 8006ac6:	2b10      	cmp	r3, #16
 8006ac8:	d122      	bne.n	8006b10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f003 0310 	and.w	r3, r3, #16
 8006ad4:	2b10      	cmp	r3, #16
 8006ad6:	d11b      	bne.n	8006b10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f06f 0210 	mvn.w	r2, #16
 8006ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2208      	movs	r2, #8
 8006ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d003      	beq.n	8006afe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f9f8 	bl	8006eec <HAL_TIM_IC_CaptureCallback>
 8006afc:	e005      	b.n	8006b0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f9eb 	bl	8006eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f9fa 	bl	8006efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d10e      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d107      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f06f 0201 	mvn.w	r2, #1
 8006b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7fb fd24 	bl	8002584 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b46:	2b80      	cmp	r3, #128	@ 0x80
 8006b48:	d10e      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b54:	2b80      	cmp	r3, #128	@ 0x80
 8006b56:	d107      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fdcb 	bl	80076fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b72:	2b40      	cmp	r3, #64	@ 0x40
 8006b74:	d10e      	bne.n	8006b94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b80:	2b40      	cmp	r3, #64	@ 0x40
 8006b82:	d107      	bne.n	8006b94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f9c7 	bl	8006f22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f003 0320 	and.w	r3, r3, #32
 8006b9e:	2b20      	cmp	r3, #32
 8006ba0:	d10e      	bne.n	8006bc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f003 0320 	and.w	r3, r3, #32
 8006bac:	2b20      	cmp	r3, #32
 8006bae:	d107      	bne.n	8006bc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f06f 0220 	mvn.w	r2, #32
 8006bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fd96 	bl	80076ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bc0:	bf00      	nop
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d101      	bne.n	8006be6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006be2:	2302      	movs	r3, #2
 8006be4:	e0ae      	b.n	8006d44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b0c      	cmp	r3, #12
 8006bf2:	f200 809f 	bhi.w	8006d34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfc:	08006c31 	.word	0x08006c31
 8006c00:	08006d35 	.word	0x08006d35
 8006c04:	08006d35 	.word	0x08006d35
 8006c08:	08006d35 	.word	0x08006d35
 8006c0c:	08006c71 	.word	0x08006c71
 8006c10:	08006d35 	.word	0x08006d35
 8006c14:	08006d35 	.word	0x08006d35
 8006c18:	08006d35 	.word	0x08006d35
 8006c1c:	08006cb3 	.word	0x08006cb3
 8006c20:	08006d35 	.word	0x08006d35
 8006c24:	08006d35 	.word	0x08006d35
 8006c28:	08006d35 	.word	0x08006d35
 8006c2c:	08006cf3 	.word	0x08006cf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68b9      	ldr	r1, [r7, #8]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fab8 	bl	80071ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	699a      	ldr	r2, [r3, #24]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 0208 	orr.w	r2, r2, #8
 8006c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699a      	ldr	r2, [r3, #24]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f022 0204 	bic.w	r2, r2, #4
 8006c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6999      	ldr	r1, [r3, #24]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	691a      	ldr	r2, [r3, #16]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	619a      	str	r2, [r3, #24]
      break;
 8006c6e:	e064      	b.n	8006d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68b9      	ldr	r1, [r7, #8]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 fafe 	bl	8007278 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	699a      	ldr	r2, [r3, #24]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	699a      	ldr	r2, [r3, #24]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6999      	ldr	r1, [r3, #24]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	021a      	lsls	r2, r3, #8
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	619a      	str	r2, [r3, #24]
      break;
 8006cb0:	e043      	b.n	8006d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68b9      	ldr	r1, [r7, #8]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 fb47 	bl	800734c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69da      	ldr	r2, [r3, #28]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f042 0208 	orr.w	r2, r2, #8
 8006ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69da      	ldr	r2, [r3, #28]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 0204 	bic.w	r2, r2, #4
 8006cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	69d9      	ldr	r1, [r3, #28]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	691a      	ldr	r2, [r3, #16]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	61da      	str	r2, [r3, #28]
      break;
 8006cf0:	e023      	b.n	8006d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68b9      	ldr	r1, [r7, #8]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 fb91 	bl	8007420 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69da      	ldr	r2, [r3, #28]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	69da      	ldr	r2, [r3, #28]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	69d9      	ldr	r1, [r3, #28]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	021a      	lsls	r2, r3, #8
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	61da      	str	r2, [r3, #28]
      break;
 8006d32:	e002      	b.n	8006d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	75fb      	strb	r3, [r7, #23]
      break;
 8006d38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d101      	bne.n	8006d68 <HAL_TIM_ConfigClockSource+0x1c>
 8006d64:	2302      	movs	r3, #2
 8006d66:	e0b4      	b.n	8006ed2 <HAL_TIM_ConfigClockSource+0x186>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006da0:	d03e      	beq.n	8006e20 <HAL_TIM_ConfigClockSource+0xd4>
 8006da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006da6:	f200 8087 	bhi.w	8006eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dae:	f000 8086 	beq.w	8006ebe <HAL_TIM_ConfigClockSource+0x172>
 8006db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006db6:	d87f      	bhi.n	8006eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006db8:	2b70      	cmp	r3, #112	@ 0x70
 8006dba:	d01a      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0xa6>
 8006dbc:	2b70      	cmp	r3, #112	@ 0x70
 8006dbe:	d87b      	bhi.n	8006eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006dc0:	2b60      	cmp	r3, #96	@ 0x60
 8006dc2:	d050      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x11a>
 8006dc4:	2b60      	cmp	r3, #96	@ 0x60
 8006dc6:	d877      	bhi.n	8006eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006dc8:	2b50      	cmp	r3, #80	@ 0x50
 8006dca:	d03c      	beq.n	8006e46 <HAL_TIM_ConfigClockSource+0xfa>
 8006dcc:	2b50      	cmp	r3, #80	@ 0x50
 8006dce:	d873      	bhi.n	8006eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006dd0:	2b40      	cmp	r3, #64	@ 0x40
 8006dd2:	d058      	beq.n	8006e86 <HAL_TIM_ConfigClockSource+0x13a>
 8006dd4:	2b40      	cmp	r3, #64	@ 0x40
 8006dd6:	d86f      	bhi.n	8006eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006dd8:	2b30      	cmp	r3, #48	@ 0x30
 8006dda:	d064      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8006ddc:	2b30      	cmp	r3, #48	@ 0x30
 8006dde:	d86b      	bhi.n	8006eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006de0:	2b20      	cmp	r3, #32
 8006de2:	d060      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	d867      	bhi.n	8006eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d05c      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8006dec:	2b10      	cmp	r3, #16
 8006dee:	d05a      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8006df0:	e062      	b.n	8006eb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e02:	f000 fbd2 	bl	80075aa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	609a      	str	r2, [r3, #8]
      break;
 8006e1e:	e04f      	b.n	8006ec0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e30:	f000 fbbb 	bl	80075aa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e42:	609a      	str	r2, [r3, #8]
      break;
 8006e44:	e03c      	b.n	8006ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e52:	461a      	mov	r2, r3
 8006e54:	f000 fb32 	bl	80074bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2150      	movs	r1, #80	@ 0x50
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fb89 	bl	8007576 <TIM_ITRx_SetConfig>
      break;
 8006e64:	e02c      	b.n	8006ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e72:	461a      	mov	r2, r3
 8006e74:	f000 fb50 	bl	8007518 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2160      	movs	r1, #96	@ 0x60
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 fb79 	bl	8007576 <TIM_ITRx_SetConfig>
      break;
 8006e84:	e01c      	b.n	8006ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e92:	461a      	mov	r2, r3
 8006e94:	f000 fb12 	bl	80074bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2140      	movs	r1, #64	@ 0x40
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 fb69 	bl	8007576 <TIM_ITRx_SetConfig>
      break;
 8006ea4:	e00c      	b.n	8006ec0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	f000 fb60 	bl	8007576 <TIM_ITRx_SetConfig>
      break;
 8006eb6:	e003      	b.n	8006ec0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	73fb      	strb	r3, [r7, #15]
      break;
 8006ebc:	e000      	b.n	8006ec0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b083      	sub	sp, #12
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bc80      	pop	{r7}
 8006eea:	4770      	bx	lr

08006eec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bc80      	pop	{r7}
 8006efc:	4770      	bx	lr

08006efe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b083      	sub	sp, #12
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bc80      	pop	{r7}
 8006f0e:	4770      	bx	lr

08006f10 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bc80      	pop	{r7}
 8006f20:	4770      	bx	lr

08006f22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b083      	sub	sp, #12
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f2a:	bf00      	nop
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bc80      	pop	{r7}
 8006f32:	4770      	bx	lr

08006f34 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bc80      	pop	{r7}
 8006f44:	4770      	bx	lr

08006f46 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f52:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d107      	bne.n	8006f6e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2201      	movs	r2, #1
 8006f62:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f6c:	e02a      	b.n	8006fc4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d107      	bne.n	8006f88 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f86:	e01d      	b.n	8006fc4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d107      	bne.n	8006fa2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2204      	movs	r2, #4
 8006f96:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fa0:	e010      	b.n	8006fc4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d107      	bne.n	8006fbc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2208      	movs	r2, #8
 8006fb0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006fba:	e003      	b.n	8006fc4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f7ff ffb5 	bl	8006f34 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	771a      	strb	r2, [r3, #28]
}
 8006fd0:	bf00      	nop
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d10b      	bne.n	8007008 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d136      	bne.n	800706c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007006:	e031      	b.n	800706c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	429a      	cmp	r2, r3
 8007010:	d10b      	bne.n	800702a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2202      	movs	r2, #2
 8007016:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d125      	bne.n	800706c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007028:	e020      	b.n	800706c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	429a      	cmp	r2, r3
 8007032:	d10b      	bne.n	800704c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2204      	movs	r2, #4
 8007038:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d114      	bne.n	800706c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800704a:	e00f      	b.n	800706c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	429a      	cmp	r2, r3
 8007054:	d10a      	bne.n	800706c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2208      	movs	r2, #8
 800705a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d103      	bne.n	800706c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f7ff ff46 	bl	8006efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	771a      	strb	r2, [r3, #28]
}
 8007078:	bf00      	nop
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	429a      	cmp	r2, r3
 8007096:	d103      	bne.n	80070a0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2201      	movs	r2, #1
 800709c:	771a      	strb	r2, [r3, #28]
 800709e:	e019      	b.n	80070d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d103      	bne.n	80070b2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2202      	movs	r2, #2
 80070ae:	771a      	strb	r2, [r3, #28]
 80070b0:	e010      	b.n	80070d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d103      	bne.n	80070c4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2204      	movs	r2, #4
 80070c0:	771a      	strb	r2, [r3, #28]
 80070c2:	e007      	b.n	80070d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d102      	bne.n	80070d4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2208      	movs	r2, #8
 80070d2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f7ff ff1b 	bl	8006f10 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	771a      	strb	r2, [r3, #28]
}
 80070e0:	bf00      	nop
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a29      	ldr	r2, [pc, #164]	@ (80071a0 <TIM_Base_SetConfig+0xb8>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d00b      	beq.n	8007118 <TIM_Base_SetConfig+0x30>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007106:	d007      	beq.n	8007118 <TIM_Base_SetConfig+0x30>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a26      	ldr	r2, [pc, #152]	@ (80071a4 <TIM_Base_SetConfig+0xbc>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d003      	beq.n	8007118 <TIM_Base_SetConfig+0x30>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a25      	ldr	r2, [pc, #148]	@ (80071a8 <TIM_Base_SetConfig+0xc0>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d108      	bne.n	800712a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800711e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	4313      	orrs	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a1c      	ldr	r2, [pc, #112]	@ (80071a0 <TIM_Base_SetConfig+0xb8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d00b      	beq.n	800714a <TIM_Base_SetConfig+0x62>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007138:	d007      	beq.n	800714a <TIM_Base_SetConfig+0x62>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a19      	ldr	r2, [pc, #100]	@ (80071a4 <TIM_Base_SetConfig+0xbc>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d003      	beq.n	800714a <TIM_Base_SetConfig+0x62>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a18      	ldr	r2, [pc, #96]	@ (80071a8 <TIM_Base_SetConfig+0xc0>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d108      	bne.n	800715c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	4313      	orrs	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	4313      	orrs	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a07      	ldr	r2, [pc, #28]	@ (80071a0 <TIM_Base_SetConfig+0xb8>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d103      	bne.n	8007190 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	691a      	ldr	r2, [r3, #16]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	615a      	str	r2, [r3, #20]
}
 8007196:	bf00      	nop
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	bc80      	pop	{r7}
 800719e:	4770      	bx	lr
 80071a0:	40012c00 	.word	0x40012c00
 80071a4:	40000400 	.word	0x40000400
 80071a8:	40000800 	.word	0x40000800

080071ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	f023 0201 	bic.w	r2, r3, #1
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f023 0303 	bic.w	r3, r3, #3
 80071e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	f023 0302 	bic.w	r3, r3, #2
 80071f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a1c      	ldr	r2, [pc, #112]	@ (8007274 <TIM_OC1_SetConfig+0xc8>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d10c      	bne.n	8007222 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f023 0308 	bic.w	r3, r3, #8
 800720e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	4313      	orrs	r3, r2
 8007218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f023 0304 	bic.w	r3, r3, #4
 8007220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a13      	ldr	r2, [pc, #76]	@ (8007274 <TIM_OC1_SetConfig+0xc8>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d111      	bne.n	800724e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	4313      	orrs	r3, r2
 8007242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	4313      	orrs	r3, r2
 800724c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	685a      	ldr	r2, [r3, #4]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	621a      	str	r2, [r3, #32]
}
 8007268:	bf00      	nop
 800726a:	371c      	adds	r7, #28
 800726c:	46bd      	mov	sp, r7
 800726e:	bc80      	pop	{r7}
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	40012c00 	.word	0x40012c00

08007278 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	f023 0210 	bic.w	r2, r3, #16
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	021b      	lsls	r3, r3, #8
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	f023 0320 	bic.w	r3, r3, #32
 80072c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	011b      	lsls	r3, r3, #4
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a1d      	ldr	r2, [pc, #116]	@ (8007348 <TIM_OC2_SetConfig+0xd0>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d10d      	bne.n	80072f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	011b      	lsls	r3, r3, #4
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a14      	ldr	r2, [pc, #80]	@ (8007348 <TIM_OC2_SetConfig+0xd0>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d113      	bne.n	8007324 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007302:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800730a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	4313      	orrs	r3, r2
 8007316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	4313      	orrs	r3, r2
 8007322:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	621a      	str	r2, [r3, #32]
}
 800733e:	bf00      	nop
 8007340:	371c      	adds	r7, #28
 8007342:	46bd      	mov	sp, r7
 8007344:	bc80      	pop	{r7}
 8007346:	4770      	bx	lr
 8007348:	40012c00 	.word	0x40012c00

0800734c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800737a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f023 0303 	bic.w	r3, r3, #3
 8007382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	4313      	orrs	r3, r2
 800738c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	021b      	lsls	r3, r3, #8
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	4313      	orrs	r3, r2
 80073a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a1d      	ldr	r2, [pc, #116]	@ (800741c <TIM_OC3_SetConfig+0xd0>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d10d      	bne.n	80073c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	021b      	lsls	r3, r3, #8
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80073c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a14      	ldr	r2, [pc, #80]	@ (800741c <TIM_OC3_SetConfig+0xd0>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d113      	bne.n	80073f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80073dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	011b      	lsls	r3, r3, #4
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	011b      	lsls	r3, r3, #4
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	621a      	str	r2, [r3, #32]
}
 8007410:	bf00      	nop
 8007412:	371c      	adds	r7, #28
 8007414:	46bd      	mov	sp, r7
 8007416:	bc80      	pop	{r7}
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	40012c00 	.word	0x40012c00

08007420 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800744e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	021b      	lsls	r3, r3, #8
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	4313      	orrs	r3, r2
 8007462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800746a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	031b      	lsls	r3, r3, #12
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	4313      	orrs	r3, r2
 8007476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a0f      	ldr	r2, [pc, #60]	@ (80074b8 <TIM_OC4_SetConfig+0x98>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d109      	bne.n	8007494 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007486:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	019b      	lsls	r3, r3, #6
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	4313      	orrs	r3, r2
 8007492:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	621a      	str	r2, [r3, #32]
}
 80074ae:	bf00      	nop
 80074b0:	371c      	adds	r7, #28
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bc80      	pop	{r7}
 80074b6:	4770      	bx	lr
 80074b8:	40012c00 	.word	0x40012c00

080074bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	f023 0201 	bic.w	r2, r3, #1
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f023 030a 	bic.w	r3, r3, #10
 80074f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	4313      	orrs	r3, r2
 8007500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	621a      	str	r2, [r3, #32]
}
 800750e:	bf00      	nop
 8007510:	371c      	adds	r7, #28
 8007512:	46bd      	mov	sp, r7
 8007514:	bc80      	pop	{r7}
 8007516:	4770      	bx	lr

08007518 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6a1b      	ldr	r3, [r3, #32]
 8007528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	f023 0210 	bic.w	r2, r3, #16
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	031b      	lsls	r3, r3, #12
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	4313      	orrs	r3, r2
 800754c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007554:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	011b      	lsls	r3, r3, #4
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	4313      	orrs	r3, r2
 800755e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	621a      	str	r2, [r3, #32]
}
 800756c:	bf00      	nop
 800756e:	371c      	adds	r7, #28
 8007570:	46bd      	mov	sp, r7
 8007572:	bc80      	pop	{r7}
 8007574:	4770      	bx	lr

08007576 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007576:	b480      	push	{r7}
 8007578:	b085      	sub	sp, #20
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800758c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4313      	orrs	r3, r2
 8007594:	f043 0307 	orr.w	r3, r3, #7
 8007598:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	609a      	str	r2, [r3, #8]
}
 80075a0:	bf00      	nop
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bc80      	pop	{r7}
 80075a8:	4770      	bx	lr

080075aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b087      	sub	sp, #28
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	607a      	str	r2, [r7, #4]
 80075b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	021a      	lsls	r2, r3, #8
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	431a      	orrs	r2, r3
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	609a      	str	r2, [r3, #8]
}
 80075de:	bf00      	nop
 80075e0:	371c      	adds	r7, #28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bc80      	pop	{r7}
 80075e6:	4770      	bx	lr

080075e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	f003 031f 	and.w	r3, r3, #31
 80075fa:	2201      	movs	r2, #1
 80075fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007600:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6a1a      	ldr	r2, [r3, #32]
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	43db      	mvns	r3, r3
 800760a:	401a      	ands	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6a1a      	ldr	r2, [r3, #32]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	f003 031f 	and.w	r3, r3, #31
 800761a:	6879      	ldr	r1, [r7, #4]
 800761c:	fa01 f303 	lsl.w	r3, r1, r3
 8007620:	431a      	orrs	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	621a      	str	r2, [r3, #32]
}
 8007626:	bf00      	nop
 8007628:	371c      	adds	r7, #28
 800762a:	46bd      	mov	sp, r7
 800762c:	bc80      	pop	{r7}
 800762e:	4770      	bx	lr

08007630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007640:	2b01      	cmp	r3, #1
 8007642:	d101      	bne.n	8007648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007644:	2302      	movs	r3, #2
 8007646:	e046      	b.n	80076d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800766e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a16      	ldr	r2, [pc, #88]	@ (80076e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d00e      	beq.n	80076aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007694:	d009      	beq.n	80076aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a12      	ldr	r2, [pc, #72]	@ (80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d004      	beq.n	80076aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a10      	ldr	r2, [pc, #64]	@ (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d10c      	bne.n	80076c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	bc80      	pop	{r7}
 80076de:	4770      	bx	lr
 80076e0:	40012c00 	.word	0x40012c00
 80076e4:	40000400 	.word	0x40000400
 80076e8:	40000800 	.word	0x40000800

080076ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bc80      	pop	{r7}
 80076fc:	4770      	bx	lr

080076fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076fe:	b480      	push	{r7}
 8007700:	b083      	sub	sp, #12
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007706:	bf00      	nop
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	bc80      	pop	{r7}
 800770e:	4770      	bx	lr

08007710 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e042      	b.n	80077a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d106      	bne.n	800773c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7fb fcdc 	bl	80030f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2224      	movs	r2, #36	@ 0x24
 8007740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68da      	ldr	r2, [r3, #12]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007752:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f91d 	bl	8007994 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	691a      	ldr	r2, [r3, #16]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007768:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	695a      	ldr	r2, [r3, #20]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007778:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68da      	ldr	r2, [r3, #12]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007788:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2220      	movs	r2, #32
 8007794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2220      	movs	r2, #32
 800779c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b08a      	sub	sp, #40	@ 0x28
 80077b4:	af02      	add	r7, sp, #8
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	603b      	str	r3, [r7, #0]
 80077bc:	4613      	mov	r3, r2
 80077be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b20      	cmp	r3, #32
 80077ce:	d16d      	bne.n	80078ac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <HAL_UART_Transmit+0x2c>
 80077d6:	88fb      	ldrh	r3, [r7, #6]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e066      	b.n	80078ae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2221      	movs	r2, #33	@ 0x21
 80077ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077ee:	f7fb ffd3 	bl	8003798 <HAL_GetTick>
 80077f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	88fa      	ldrh	r2, [r7, #6]
 80077f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	88fa      	ldrh	r2, [r7, #6]
 80077fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007808:	d108      	bne.n	800781c <HAL_UART_Transmit+0x6c>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d104      	bne.n	800781c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007812:	2300      	movs	r3, #0
 8007814:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	61bb      	str	r3, [r7, #24]
 800781a:	e003      	b.n	8007824 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007820:	2300      	movs	r3, #0
 8007822:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007824:	e02a      	b.n	800787c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2200      	movs	r2, #0
 800782e:	2180      	movs	r1, #128	@ 0x80
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f000 f840 	bl	80078b6 <UART_WaitOnFlagUntilTimeout>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e036      	b.n	80078ae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10b      	bne.n	800785e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	461a      	mov	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007854:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	3302      	adds	r3, #2
 800785a:	61bb      	str	r3, [r7, #24]
 800785c:	e007      	b.n	800786e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	781a      	ldrb	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	3301      	adds	r3, #1
 800786c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007872:	b29b      	uxth	r3, r3
 8007874:	3b01      	subs	r3, #1
 8007876:	b29a      	uxth	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007880:	b29b      	uxth	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1cf      	bne.n	8007826 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2200      	movs	r2, #0
 800788e:	2140      	movs	r1, #64	@ 0x40
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 f810 	bl	80078b6 <UART_WaitOnFlagUntilTimeout>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e006      	b.n	80078ae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2220      	movs	r2, #32
 80078a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	e000      	b.n	80078ae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80078ac:	2302      	movs	r3, #2
  }
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3720      	adds	r7, #32
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b090      	sub	sp, #64	@ 0x40
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	603b      	str	r3, [r7, #0]
 80078c2:	4613      	mov	r3, r2
 80078c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078c6:	e050      	b.n	800796a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ce:	d04c      	beq.n	800796a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d007      	beq.n	80078e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80078d6:	f7fb ff5f 	bl	8003798 <HAL_GetTick>
 80078da:	4602      	mov	r2, r0
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d241      	bcs.n	800796a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	330c      	adds	r3, #12
 80078ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f0:	e853 3f00 	ldrex	r3, [r3]
 80078f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80078fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	330c      	adds	r3, #12
 8007904:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007906:	637a      	str	r2, [r7, #52]	@ 0x34
 8007908:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800790c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800790e:	e841 2300 	strex	r3, r2, [r1]
 8007912:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1e5      	bne.n	80078e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3314      	adds	r3, #20
 8007920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	e853 3f00 	ldrex	r3, [r3]
 8007928:	613b      	str	r3, [r7, #16]
   return(result);
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f023 0301 	bic.w	r3, r3, #1
 8007930:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3314      	adds	r3, #20
 8007938:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800793a:	623a      	str	r2, [r7, #32]
 800793c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	69f9      	ldr	r1, [r7, #28]
 8007940:	6a3a      	ldr	r2, [r7, #32]
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	61bb      	str	r3, [r7, #24]
   return(result);
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e5      	bne.n	800791a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2220      	movs	r2, #32
 8007952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2220      	movs	r2, #32
 800795a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e00f      	b.n	800798a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	4013      	ands	r3, r2
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	429a      	cmp	r2, r3
 8007978:	bf0c      	ite	eq
 800797a:	2301      	moveq	r3, #1
 800797c:	2300      	movne	r3, #0
 800797e:	b2db      	uxtb	r3, r3
 8007980:	461a      	mov	r2, r3
 8007982:	79fb      	ldrb	r3, [r7, #7]
 8007984:	429a      	cmp	r2, r3
 8007986:	d09f      	beq.n	80078c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3740      	adds	r7, #64	@ 0x40
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68da      	ldr	r2, [r3, #12]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	689a      	ldr	r2, [r3, #8]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	431a      	orrs	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80079ce:	f023 030c 	bic.w	r3, r3, #12
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	6812      	ldr	r2, [r2, #0]
 80079d6:	68b9      	ldr	r1, [r7, #8]
 80079d8:	430b      	orrs	r3, r1
 80079da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	699a      	ldr	r2, [r3, #24]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a2c      	ldr	r2, [pc, #176]	@ (8007aa8 <UART_SetConfig+0x114>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d103      	bne.n	8007a04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80079fc:	f7fe fa7e 	bl	8005efc <HAL_RCC_GetPCLK2Freq>
 8007a00:	60f8      	str	r0, [r7, #12]
 8007a02:	e002      	b.n	8007a0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007a04:	f7fe fa66 	bl	8005ed4 <HAL_RCC_GetPCLK1Freq>
 8007a08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	009a      	lsls	r2, r3, #2
 8007a14:	441a      	add	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a20:	4a22      	ldr	r2, [pc, #136]	@ (8007aac <UART_SetConfig+0x118>)
 8007a22:	fba2 2303 	umull	r2, r3, r2, r3
 8007a26:	095b      	lsrs	r3, r3, #5
 8007a28:	0119      	lsls	r1, r3, #4
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	009a      	lsls	r2, r3, #2
 8007a34:	441a      	add	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a40:	4b1a      	ldr	r3, [pc, #104]	@ (8007aac <UART_SetConfig+0x118>)
 8007a42:	fba3 0302 	umull	r0, r3, r3, r2
 8007a46:	095b      	lsrs	r3, r3, #5
 8007a48:	2064      	movs	r0, #100	@ 0x64
 8007a4a:	fb00 f303 	mul.w	r3, r0, r3
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	011b      	lsls	r3, r3, #4
 8007a52:	3332      	adds	r3, #50	@ 0x32
 8007a54:	4a15      	ldr	r2, [pc, #84]	@ (8007aac <UART_SetConfig+0x118>)
 8007a56:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5a:	095b      	lsrs	r3, r3, #5
 8007a5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007a60:	4419      	add	r1, r3
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	4613      	mov	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	009a      	lsls	r2, r3, #2
 8007a6c:	441a      	add	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a78:	4b0c      	ldr	r3, [pc, #48]	@ (8007aac <UART_SetConfig+0x118>)
 8007a7a:	fba3 0302 	umull	r0, r3, r3, r2
 8007a7e:	095b      	lsrs	r3, r3, #5
 8007a80:	2064      	movs	r0, #100	@ 0x64
 8007a82:	fb00 f303 	mul.w	r3, r0, r3
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	011b      	lsls	r3, r3, #4
 8007a8a:	3332      	adds	r3, #50	@ 0x32
 8007a8c:	4a07      	ldr	r2, [pc, #28]	@ (8007aac <UART_SetConfig+0x118>)
 8007a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a92:	095b      	lsrs	r3, r3, #5
 8007a94:	f003 020f 	and.w	r2, r3, #15
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	440a      	add	r2, r1
 8007a9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007aa0:	bf00      	nop
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	40013800 	.word	0x40013800
 8007aac:	51eb851f 	.word	0x51eb851f

08007ab0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ab6:	f3ef 8305 	mrs	r3, IPSR
 8007aba:	60bb      	str	r3, [r7, #8]
  return(result);
 8007abc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10f      	bne.n	8007ae2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ac6:	607b      	str	r3, [r7, #4]
  return(result);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d109      	bne.n	8007ae2 <osKernelInitialize+0x32>
 8007ace:	4b10      	ldr	r3, [pc, #64]	@ (8007b10 <osKernelInitialize+0x60>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d109      	bne.n	8007aea <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ad6:	f3ef 8311 	mrs	r3, BASEPRI
 8007ada:	603b      	str	r3, [r7, #0]
  return(result);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d003      	beq.n	8007aea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007ae2:	f06f 0305 	mvn.w	r3, #5
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	e00c      	b.n	8007b04 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007aea:	4b09      	ldr	r3, [pc, #36]	@ (8007b10 <osKernelInitialize+0x60>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d105      	bne.n	8007afe <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007af2:	4b07      	ldr	r3, [pc, #28]	@ (8007b10 <osKernelInitialize+0x60>)
 8007af4:	2201      	movs	r2, #1
 8007af6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	60fb      	str	r3, [r7, #12]
 8007afc:	e002      	b.n	8007b04 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007afe:	f04f 33ff 	mov.w	r3, #4294967295
 8007b02:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007b04:	68fb      	ldr	r3, [r7, #12]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bc80      	pop	{r7}
 8007b0e:	4770      	bx	lr
 8007b10:	20002510 	.word	0x20002510

08007b14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b1a:	f3ef 8305 	mrs	r3, IPSR
 8007b1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10f      	bne.n	8007b46 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b26:	f3ef 8310 	mrs	r3, PRIMASK
 8007b2a:	607b      	str	r3, [r7, #4]
  return(result);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d109      	bne.n	8007b46 <osKernelStart+0x32>
 8007b32:	4b11      	ldr	r3, [pc, #68]	@ (8007b78 <osKernelStart+0x64>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d109      	bne.n	8007b4e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b3a:	f3ef 8311 	mrs	r3, BASEPRI
 8007b3e:	603b      	str	r3, [r7, #0]
  return(result);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d003      	beq.n	8007b4e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007b46:	f06f 0305 	mvn.w	r3, #5
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	e00e      	b.n	8007b6c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b78 <osKernelStart+0x64>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d107      	bne.n	8007b66 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007b56:	4b08      	ldr	r3, [pc, #32]	@ (8007b78 <osKernelStart+0x64>)
 8007b58:	2202      	movs	r2, #2
 8007b5a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007b5c:	f001 fb70 	bl	8009240 <vTaskStartScheduler>
      stat = osOK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	e002      	b.n	8007b6c <osKernelStart+0x58>
    } else {
      stat = osError;
 8007b66:	f04f 33ff 	mov.w	r3, #4294967295
 8007b6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	20002510 	.word	0x20002510

08007b7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b092      	sub	sp, #72	@ 0x48
 8007b80:	af04      	add	r7, sp, #16
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b8c:	f3ef 8305 	mrs	r3, IPSR
 8007b90:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f040 8094 	bne.w	8007cc2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8007b9e:	623b      	str	r3, [r7, #32]
  return(result);
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f040 808d 	bne.w	8007cc2 <osThreadNew+0x146>
 8007ba8:	4b48      	ldr	r3, [pc, #288]	@ (8007ccc <osThreadNew+0x150>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d106      	bne.n	8007bbe <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bb0:	f3ef 8311 	mrs	r3, BASEPRI
 8007bb4:	61fb      	str	r3, [r7, #28]
  return(result);
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f040 8082 	bne.w	8007cc2 <osThreadNew+0x146>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d07e      	beq.n	8007cc2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007bc4:	2380      	movs	r3, #128	@ 0x80
 8007bc6:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007bc8:	2318      	movs	r3, #24
 8007bca:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8007bcc:	2300      	movs	r3, #0
 8007bce:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007bd0:	f107 031b 	add.w	r3, r7, #27
 8007bd4:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8007bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bda:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d045      	beq.n	8007c6e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d002      	beq.n	8007bf0 <osThreadNew+0x74>
        name = attr->name;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d008      	beq.n	8007c16 <osThreadNew+0x9a>
 8007c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c06:	2b38      	cmp	r3, #56	@ 0x38
 8007c08:	d805      	bhi.n	8007c16 <osThreadNew+0x9a>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d001      	beq.n	8007c1a <osThreadNew+0x9e>
        return (NULL);
 8007c16:	2300      	movs	r3, #0
 8007c18:	e054      	b.n	8007cc4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	089b      	lsrs	r3, r3, #2
 8007c28:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00e      	beq.n	8007c50 <osThreadNew+0xd4>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	2bab      	cmp	r3, #171	@ 0xab
 8007c38:	d90a      	bls.n	8007c50 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d006      	beq.n	8007c50 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <osThreadNew+0xd4>
        mem = 1;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c4e:	e010      	b.n	8007c72 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d10c      	bne.n	8007c72 <osThreadNew+0xf6>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d108      	bne.n	8007c72 <osThreadNew+0xf6>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d104      	bne.n	8007c72 <osThreadNew+0xf6>
          mem = 0;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c6c:	e001      	b.n	8007c72 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8007c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d110      	bne.n	8007c9a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c80:	9202      	str	r2, [sp, #8]
 8007c82:	9301      	str	r3, [sp, #4]
 8007c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c8c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f001 f8ea 	bl	8008e68 <xTaskCreateStatic>
 8007c94:	4603      	mov	r3, r0
 8007c96:	617b      	str	r3, [r7, #20]
 8007c98:	e013      	b.n	8007cc2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d110      	bne.n	8007cc2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	f107 0314 	add.w	r3, r7, #20
 8007ca8:	9301      	str	r3, [sp, #4]
 8007caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f001 f937 	bl	8008f26 <xTaskCreate>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d001      	beq.n	8007cc2 <osThreadNew+0x146>
          hTask = NULL;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007cc2:	697b      	ldr	r3, [r7, #20]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3738      	adds	r7, #56	@ 0x38
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	20002510 	.word	0x20002510

08007cd0 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b088      	sub	sp, #32
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cdc:	f3ef 8305 	mrs	r3, IPSR
 8007ce0:	617b      	str	r3, [r7, #20]
  return(result);
 8007ce2:	697b      	ldr	r3, [r7, #20]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d112      	bne.n	8007d0e <osThreadGetStackSpace+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8007cec:	613b      	str	r3, [r7, #16]
  return(result);
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10c      	bne.n	8007d0e <osThreadGetStackSpace+0x3e>
 8007cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8007d28 <osThreadGetStackSpace+0x58>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d105      	bne.n	8007d08 <osThreadGetStackSpace+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cfc:	f3ef 8311 	mrs	r3, BASEPRI
 8007d00:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d102      	bne.n	8007d0e <osThreadGetStackSpace+0x3e>
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d102      	bne.n	8007d14 <osThreadGetStackSpace+0x44>
    sz = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	61fb      	str	r3, [r7, #28]
 8007d12:	e003      	b.n	8007d1c <osThreadGetStackSpace+0x4c>
  } else {
    sz = (uint32_t)uxTaskGetStackHighWaterMark (hTask);
 8007d14:	69b8      	ldr	r0, [r7, #24]
 8007d16:	f001 fee7 	bl	8009ae8 <uxTaskGetStackHighWaterMark>
 8007d1a:	61f8      	str	r0, [r7, #28]
  }

  return (sz);
 8007d1c:	69fb      	ldr	r3, [r7, #28]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3720      	adds	r7, #32
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20002510 	.word	0x20002510

08007d2c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d34:	f3ef 8305 	mrs	r3, IPSR
 8007d38:	613b      	str	r3, [r7, #16]
  return(result);
 8007d3a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10f      	bne.n	8007d60 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d40:	f3ef 8310 	mrs	r3, PRIMASK
 8007d44:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d109      	bne.n	8007d60 <osDelay+0x34>
 8007d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8007d84 <osDelay+0x58>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d109      	bne.n	8007d68 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d54:	f3ef 8311 	mrs	r3, BASEPRI
 8007d58:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <osDelay+0x3c>
    stat = osErrorISR;
 8007d60:	f06f 0305 	mvn.w	r3, #5
 8007d64:	617b      	str	r3, [r7, #20]
 8007d66:	e007      	b.n	8007d78 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f001 fa2e 	bl	80091d4 <vTaskDelay>
    }
  }

  return (stat);
 8007d78:	697b      	ldr	r3, [r7, #20]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20002510 	.word	0x20002510

08007d88 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b08c      	sub	sp, #48	@ 0x30
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007d94:	2300      	movs	r3, #0
 8007d96:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d98:	f3ef 8305 	mrs	r3, IPSR
 8007d9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d9e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d16f      	bne.n	8007e84 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007da4:	f3ef 8310 	mrs	r3, PRIMASK
 8007da8:	617b      	str	r3, [r7, #20]
  return(result);
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d169      	bne.n	8007e84 <osMessageQueueNew+0xfc>
 8007db0:	4b37      	ldr	r3, [pc, #220]	@ (8007e90 <osMessageQueueNew+0x108>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d105      	bne.n	8007dc4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007db8:	f3ef 8311 	mrs	r3, BASEPRI
 8007dbc:	613b      	str	r3, [r7, #16]
  return(result);
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d15f      	bne.n	8007e84 <osMessageQueueNew+0xfc>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d05c      	beq.n	8007e84 <osMessageQueueNew+0xfc>
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d059      	beq.n	8007e84 <osMessageQueueNew+0xfc>
    mem = -1;
 8007dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d029      	beq.n	8007e30 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d012      	beq.n	8007e0a <osMessageQueueNew+0x82>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	2b4f      	cmp	r3, #79	@ 0x4f
 8007dea:	d90e      	bls.n	8007e0a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00a      	beq.n	8007e0a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	695a      	ldr	r2, [r3, #20]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	68b9      	ldr	r1, [r7, #8]
 8007dfc:	fb01 f303 	mul.w	r3, r1, r3
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d302      	bcc.n	8007e0a <osMessageQueueNew+0x82>
        mem = 1;
 8007e04:	2301      	movs	r3, #1
 8007e06:	623b      	str	r3, [r7, #32]
 8007e08:	e014      	b.n	8007e34 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d110      	bne.n	8007e34 <osMessageQueueNew+0xac>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10c      	bne.n	8007e34 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d108      	bne.n	8007e34 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d104      	bne.n	8007e34 <osMessageQueueNew+0xac>
          mem = 0;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	623b      	str	r3, [r7, #32]
 8007e2e:	e001      	b.n	8007e34 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007e30:	2300      	movs	r3, #0
 8007e32:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d10b      	bne.n	8007e52 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	691a      	ldr	r2, [r3, #16]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	2100      	movs	r1, #0
 8007e44:	9100      	str	r1, [sp, #0]
 8007e46:	68b9      	ldr	r1, [r7, #8]
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 fa9d 	bl	8008388 <xQueueGenericCreateStatic>
 8007e4e:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e50:	e008      	b.n	8007e64 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007e52:	6a3b      	ldr	r3, [r7, #32]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d105      	bne.n	8007e64 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007e58:	2200      	movs	r2, #0
 8007e5a:	68b9      	ldr	r1, [r7, #8]
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 fb0f 	bl	8008480 <xQueueGenericCreate>
 8007e62:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00c      	beq.n	8007e84 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d003      	beq.n	8007e78 <osMessageQueueNew+0xf0>
        name = attr->name;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	61fb      	str	r3, [r7, #28]
 8007e76:	e001      	b.n	8007e7c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007e7c:	69f9      	ldr	r1, [r7, #28]
 8007e7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007e80:	f000 ff96 	bl	8008db0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3728      	adds	r7, #40	@ 0x28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20002510 	.word	0x20002510

08007e94 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b08a      	sub	sp, #40	@ 0x28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	603b      	str	r3, [r7, #0]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eac:	f3ef 8305 	mrs	r3, IPSR
 8007eb0:	61fb      	str	r3, [r7, #28]
  return(result);
 8007eb2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10f      	bne.n	8007ed8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8007ebc:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d109      	bne.n	8007ed8 <osMessageQueuePut+0x44>
 8007ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8007f74 <osMessageQueuePut+0xe0>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d12e      	bne.n	8007f2a <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ecc:	f3ef 8311 	mrs	r3, BASEPRI
 8007ed0:	617b      	str	r3, [r7, #20]
  return(result);
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d028      	beq.n	8007f2a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d005      	beq.n	8007eea <osMessageQueuePut+0x56>
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <osMessageQueuePut+0x56>
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007eea:	f06f 0303 	mvn.w	r3, #3
 8007eee:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007ef0:	e039      	b.n	8007f66 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007ef6:	f107 0210 	add.w	r2, r7, #16
 8007efa:	2300      	movs	r3, #0
 8007efc:	68b9      	ldr	r1, [r7, #8]
 8007efe:	6a38      	ldr	r0, [r7, #32]
 8007f00:	f000 fc22 	bl	8008748 <xQueueGenericSendFromISR>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d003      	beq.n	8007f12 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007f0a:	f06f 0302 	mvn.w	r3, #2
 8007f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007f10:	e029      	b.n	8007f66 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d026      	beq.n	8007f66 <osMessageQueuePut+0xd2>
 8007f18:	4b17      	ldr	r3, [pc, #92]	@ (8007f78 <osMessageQueuePut+0xe4>)
 8007f1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f1e:	601a      	str	r2, [r3, #0]
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007f28:	e01d      	b.n	8007f66 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d002      	beq.n	8007f36 <osMessageQueuePut+0xa2>
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d103      	bne.n	8007f3e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007f36:	f06f 0303 	mvn.w	r3, #3
 8007f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f3c:	e014      	b.n	8007f68 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007f3e:	2300      	movs	r3, #0
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	68b9      	ldr	r1, [r7, #8]
 8007f44:	6a38      	ldr	r0, [r7, #32]
 8007f46:	f000 fafd 	bl	8008544 <xQueueGenericSend>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d00b      	beq.n	8007f68 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d003      	beq.n	8007f5e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007f56:	f06f 0301 	mvn.w	r3, #1
 8007f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f5c:	e004      	b.n	8007f68 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007f5e:	f06f 0302 	mvn.w	r3, #2
 8007f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f64:	e000      	b.n	8007f68 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007f66:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3728      	adds	r7, #40	@ 0x28
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20002510 	.word	0x20002510
 8007f78:	e000ed04 	.word	0xe000ed04

08007f7c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b08a      	sub	sp, #40	@ 0x28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
 8007f88:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f92:	f3ef 8305 	mrs	r3, IPSR
 8007f96:	61fb      	str	r3, [r7, #28]
  return(result);
 8007f98:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10f      	bne.n	8007fbe <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8007fa2:	61bb      	str	r3, [r7, #24]
  return(result);
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d109      	bne.n	8007fbe <osMessageQueueGet+0x42>
 8007faa:	4b2b      	ldr	r3, [pc, #172]	@ (8008058 <osMessageQueueGet+0xdc>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d12e      	bne.n	8008010 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007fb2:	f3ef 8311 	mrs	r3, BASEPRI
 8007fb6:	617b      	str	r3, [r7, #20]
  return(result);
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d028      	beq.n	8008010 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007fbe:	6a3b      	ldr	r3, [r7, #32]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d005      	beq.n	8007fd0 <osMessageQueueGet+0x54>
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d002      	beq.n	8007fd0 <osMessageQueueGet+0x54>
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007fd0:	f06f 0303 	mvn.w	r3, #3
 8007fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007fd6:	e038      	b.n	800804a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007fdc:	f107 0310 	add.w	r3, r7, #16
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	68b9      	ldr	r1, [r7, #8]
 8007fe4:	6a38      	ldr	r0, [r7, #32]
 8007fe6:	f000 fd2d 	bl	8008a44 <xQueueReceiveFromISR>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d003      	beq.n	8007ff8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007ff0:	f06f 0302 	mvn.w	r3, #2
 8007ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007ff6:	e028      	b.n	800804a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d025      	beq.n	800804a <osMessageQueueGet+0xce>
 8007ffe:	4b17      	ldr	r3, [pc, #92]	@ (800805c <osMessageQueueGet+0xe0>)
 8008000:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800800e:	e01c      	b.n	800804a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d002      	beq.n	800801c <osMessageQueueGet+0xa0>
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d103      	bne.n	8008024 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800801c:	f06f 0303 	mvn.w	r3, #3
 8008020:	627b      	str	r3, [r7, #36]	@ 0x24
 8008022:	e013      	b.n	800804c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	68b9      	ldr	r1, [r7, #8]
 8008028:	6a38      	ldr	r0, [r7, #32]
 800802a:	f000 fc29 	bl	8008880 <xQueueReceive>
 800802e:	4603      	mov	r3, r0
 8008030:	2b01      	cmp	r3, #1
 8008032:	d00b      	beq.n	800804c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800803a:	f06f 0301 	mvn.w	r3, #1
 800803e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008040:	e004      	b.n	800804c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8008042:	f06f 0302 	mvn.w	r3, #2
 8008046:	627b      	str	r3, [r7, #36]	@ 0x24
 8008048:	e000      	b.n	800804c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800804a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800804c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800804e:	4618      	mov	r0, r3
 8008050:	3728      	adds	r7, #40	@ 0x28
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	20002510 	.word	0x20002510
 800805c:	e000ed04 	.word	0xe000ed04

08008060 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8008060:	b580      	push	{r7, lr}
 8008062:	b08c      	sub	sp, #48	@ 0x30
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800806c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806e:	2b00      	cmp	r3, #0
 8008070:	d102      	bne.n	8008078 <osMessageQueueGetSpace+0x18>
    space = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008076:	e034      	b.n	80080e2 <osMessageQueueGetSpace+0x82>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008078:	f3ef 8305 	mrs	r3, IPSR
 800807c:	623b      	str	r3, [r7, #32]
  return(result);
 800807e:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10f      	bne.n	80080a4 <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008084:	f3ef 8310 	mrs	r3, PRIMASK
 8008088:	61fb      	str	r3, [r7, #28]
  return(result);
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d109      	bne.n	80080a4 <osMessageQueueGetSpace+0x44>
 8008090:	4b16      	ldr	r3, [pc, #88]	@ (80080ec <osMessageQueueGetSpace+0x8c>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b02      	cmp	r3, #2
 8008096:	d120      	bne.n	80080da <osMessageQueueGetSpace+0x7a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008098:	f3ef 8311 	mrs	r3, BASEPRI
 800809c:	61bb      	str	r3, [r7, #24]
  return(result);
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d01a      	beq.n	80080da <osMessageQueueGetSpace+0x7a>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80080a4:	f3ef 8211 	mrs	r2, BASEPRI
 80080a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	613a      	str	r2, [r7, #16]
 80080ba:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80080bc:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 80080be:	627b      	str	r3, [r7, #36]	@ 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 80080c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80080d6:	bf00      	nop

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 80080d8:	e003      	b.n	80080e2 <osMessageQueueGetSpace+0x82>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 80080da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080dc:	f000 fd34 	bl	8008b48 <uxQueueSpacesAvailable>
 80080e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  return (space);
 80080e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3730      	adds	r7, #48	@ 0x30
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	20002510 	.word	0x20002510

080080f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4a06      	ldr	r2, [pc, #24]	@ (8008118 <vApplicationGetIdleTaskMemory+0x28>)
 8008100:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	4a05      	ldr	r2, [pc, #20]	@ (800811c <vApplicationGetIdleTaskMemory+0x2c>)
 8008106:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2280      	movs	r2, #128	@ 0x80
 800810c:	601a      	str	r2, [r3, #0]
}
 800810e:	bf00      	nop
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	bc80      	pop	{r7}
 8008116:	4770      	bx	lr
 8008118:	20002514 	.word	0x20002514
 800811c:	200025c0 	.word	0x200025c0

08008120 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	4a07      	ldr	r2, [pc, #28]	@ (800814c <vApplicationGetTimerTaskMemory+0x2c>)
 8008130:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	4a06      	ldr	r2, [pc, #24]	@ (8008150 <vApplicationGetTimerTaskMemory+0x30>)
 8008136:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800813e:	601a      	str	r2, [r3, #0]
}
 8008140:	bf00      	nop
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	bc80      	pop	{r7}
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	200027c0 	.word	0x200027c0
 8008150:	2000286c 	.word	0x2000286c

08008154 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f103 0208 	add.w	r2, r3, #8
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f04f 32ff 	mov.w	r2, #4294967295
 800816c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f103 0208 	add.w	r2, r3, #8
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f103 0208 	add.w	r2, r3, #8
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr

08008192 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008192:	b480      	push	{r7}
 8008194:	b083      	sub	sp, #12
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bc80      	pop	{r7}
 80081a8:	4770      	bx	lr

080081aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081aa:	b480      	push	{r7}
 80081ac:	b085      	sub	sp, #20
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	689a      	ldr	r2, [r3, #8]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	601a      	str	r2, [r3, #0]
}
 80081e6:	bf00      	nop
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bc80      	pop	{r7}
 80081ee:	4770      	bx	lr

080081f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008206:	d103      	bne.n	8008210 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	60fb      	str	r3, [r7, #12]
 800820e:	e00c      	b.n	800822a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	3308      	adds	r3, #8
 8008214:	60fb      	str	r3, [r7, #12]
 8008216:	e002      	b.n	800821e <vListInsert+0x2e>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	60fb      	str	r3, [r7, #12]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	429a      	cmp	r2, r3
 8008228:	d2f6      	bcs.n	8008218 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	1c5a      	adds	r2, r3, #1
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	601a      	str	r2, [r3, #0]
}
 8008256:	bf00      	nop
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	bc80      	pop	{r7}
 800825e:	4770      	bx	lr

08008260 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	6892      	ldr	r2, [r2, #8]
 8008276:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	6852      	ldr	r2, [r2, #4]
 8008280:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	429a      	cmp	r2, r3
 800828a:	d103      	bne.n	8008294 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	689a      	ldr	r2, [r3, #8]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	1e5a      	subs	r2, r3, #1
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3714      	adds	r7, #20
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bc80      	pop	{r7}
 80082b0:	4770      	bx	lr
	...

080082b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10b      	bne.n	80082e0 <xQueueGenericReset+0x2c>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	60bb      	str	r3, [r7, #8]
}
 80082da:	bf00      	nop
 80082dc:	bf00      	nop
 80082de:	e7fd      	b.n	80082dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80082e0:	f002 fa64 	bl	800a7ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082ec:	68f9      	ldr	r1, [r7, #12]
 80082ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80082f0:	fb01 f303 	mul.w	r3, r1, r3
 80082f4:	441a      	add	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008310:	3b01      	subs	r3, #1
 8008312:	68f9      	ldr	r1, [r7, #12]
 8008314:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008316:	fb01 f303 	mul.w	r3, r1, r3
 800831a:	441a      	add	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	22ff      	movs	r2, #255	@ 0xff
 8008324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	22ff      	movs	r2, #255	@ 0xff
 800832c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d114      	bne.n	8008360 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d01a      	beq.n	8008374 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3310      	adds	r3, #16
 8008342:	4618      	mov	r0, r3
 8008344:	f001 fa44 	bl	80097d0 <xTaskRemoveFromEventList>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d012      	beq.n	8008374 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800834e:	4b0d      	ldr	r3, [pc, #52]	@ (8008384 <xQueueGenericReset+0xd0>)
 8008350:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008354:	601a      	str	r2, [r3, #0]
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	e009      	b.n	8008374 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	3310      	adds	r3, #16
 8008364:	4618      	mov	r0, r3
 8008366:	f7ff fef5 	bl	8008154 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3324      	adds	r3, #36	@ 0x24
 800836e:	4618      	mov	r0, r3
 8008370:	f7ff fef0 	bl	8008154 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008374:	f002 fa4a 	bl	800a80c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008378:	2301      	movs	r3, #1
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	e000ed04 	.word	0xe000ed04

08008388 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08e      	sub	sp, #56	@ 0x38
 800838c:	af02      	add	r7, sp, #8
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10b      	bne.n	80083b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800839c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80083ae:	bf00      	nop
 80083b0:	bf00      	nop
 80083b2:	e7fd      	b.n	80083b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10b      	bne.n	80083d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80083cc:	bf00      	nop
 80083ce:	bf00      	nop
 80083d0:	e7fd      	b.n	80083ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <xQueueGenericCreateStatic+0x56>
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d001      	beq.n	80083e2 <xQueueGenericCreateStatic+0x5a>
 80083de:	2301      	movs	r3, #1
 80083e0:	e000      	b.n	80083e4 <xQueueGenericCreateStatic+0x5c>
 80083e2:	2300      	movs	r3, #0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10b      	bne.n	8008400 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80083e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	623b      	str	r3, [r7, #32]
}
 80083fa:	bf00      	nop
 80083fc:	bf00      	nop
 80083fe:	e7fd      	b.n	80083fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d102      	bne.n	800840c <xQueueGenericCreateStatic+0x84>
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <xQueueGenericCreateStatic+0x88>
 800840c:	2301      	movs	r3, #1
 800840e:	e000      	b.n	8008412 <xQueueGenericCreateStatic+0x8a>
 8008410:	2300      	movs	r3, #0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10b      	bne.n	800842e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841a:	f383 8811 	msr	BASEPRI, r3
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	61fb      	str	r3, [r7, #28]
}
 8008428:	bf00      	nop
 800842a:	bf00      	nop
 800842c:	e7fd      	b.n	800842a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800842e:	2350      	movs	r3, #80	@ 0x50
 8008430:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	2b50      	cmp	r3, #80	@ 0x50
 8008436:	d00b      	beq.n	8008450 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843c:	f383 8811 	msr	BASEPRI, r3
 8008440:	f3bf 8f6f 	isb	sy
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	61bb      	str	r3, [r7, #24]
}
 800844a:	bf00      	nop
 800844c:	bf00      	nop
 800844e:	e7fd      	b.n	800844c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00d      	beq.n	8008476 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800845a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800845c:	2201      	movs	r2, #1
 800845e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008462:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	4613      	mov	r3, r2
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	68b9      	ldr	r1, [r7, #8]
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f000 f844 	bl	80084fe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008478:	4618      	mov	r0, r3
 800847a:	3730      	adds	r7, #48	@ 0x30
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08a      	sub	sp, #40	@ 0x28
 8008484:	af02      	add	r7, sp, #8
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	4613      	mov	r3, r2
 800848c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10b      	bne.n	80084ac <xQueueGenericCreate+0x2c>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	613b      	str	r3, [r7, #16]
}
 80084a6:	bf00      	nop
 80084a8:	bf00      	nop
 80084aa:	e7fd      	b.n	80084a8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d102      	bne.n	80084b8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80084b2:	2300      	movs	r3, #0
 80084b4:	61fb      	str	r3, [r7, #28]
 80084b6:	e004      	b.n	80084c2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	fb02 f303 	mul.w	r3, r2, r3
 80084c0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	3350      	adds	r3, #80	@ 0x50
 80084c6:	4618      	mov	r0, r3
 80084c8:	f002 fa72 	bl	800a9b0 <pvPortMalloc>
 80084cc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00f      	beq.n	80084f4 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	3350      	adds	r3, #80	@ 0x50
 80084d8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80084e2:	79fa      	ldrb	r2, [r7, #7]
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	4613      	mov	r3, r2
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	68b9      	ldr	r1, [r7, #8]
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 f805 	bl	80084fe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80084f4:	69bb      	ldr	r3, [r7, #24]
	}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3720      	adds	r7, #32
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	60f8      	str	r0, [r7, #12]
 8008506:	60b9      	str	r1, [r7, #8]
 8008508:	607a      	str	r2, [r7, #4]
 800850a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d103      	bne.n	800851a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	69ba      	ldr	r2, [r7, #24]
 8008516:	601a      	str	r2, [r3, #0]
 8008518:	e002      	b.n	8008520 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800852c:	2101      	movs	r1, #1
 800852e:	69b8      	ldr	r0, [r7, #24]
 8008530:	f7ff fec0 	bl	80082b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	78fa      	ldrb	r2, [r7, #3]
 8008538:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800853c:	bf00      	nop
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b08e      	sub	sp, #56	@ 0x38
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008552:	2300      	movs	r3, #0
 8008554:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800855a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10b      	bne.n	8008578 <xQueueGenericSend+0x34>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008572:	bf00      	nop
 8008574:	bf00      	nop
 8008576:	e7fd      	b.n	8008574 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d103      	bne.n	8008586 <xQueueGenericSend+0x42>
 800857e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <xQueueGenericSend+0x46>
 8008586:	2301      	movs	r3, #1
 8008588:	e000      	b.n	800858c <xQueueGenericSend+0x48>
 800858a:	2300      	movs	r3, #0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10b      	bne.n	80085a8 <xQueueGenericSend+0x64>
	__asm volatile
 8008590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008594:	f383 8811 	msr	BASEPRI, r3
 8008598:	f3bf 8f6f 	isb	sy
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80085a2:	bf00      	nop
 80085a4:	bf00      	nop
 80085a6:	e7fd      	b.n	80085a4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d103      	bne.n	80085b6 <xQueueGenericSend+0x72>
 80085ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d101      	bne.n	80085ba <xQueueGenericSend+0x76>
 80085b6:	2301      	movs	r3, #1
 80085b8:	e000      	b.n	80085bc <xQueueGenericSend+0x78>
 80085ba:	2300      	movs	r3, #0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10b      	bne.n	80085d8 <xQueueGenericSend+0x94>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	623b      	str	r3, [r7, #32]
}
 80085d2:	bf00      	nop
 80085d4:	bf00      	nop
 80085d6:	e7fd      	b.n	80085d4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085d8:	f001 fafc 	bl	8009bd4 <xTaskGetSchedulerState>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d102      	bne.n	80085e8 <xQueueGenericSend+0xa4>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <xQueueGenericSend+0xa8>
 80085e8:	2301      	movs	r3, #1
 80085ea:	e000      	b.n	80085ee <xQueueGenericSend+0xaa>
 80085ec:	2300      	movs	r3, #0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10b      	bne.n	800860a <xQueueGenericSend+0xc6>
	__asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	61fb      	str	r3, [r7, #28]
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop
 8008608:	e7fd      	b.n	8008606 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800860a:	f002 f8cf 	bl	800a7ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800860e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008610:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008616:	429a      	cmp	r2, r3
 8008618:	d302      	bcc.n	8008620 <xQueueGenericSend+0xdc>
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	2b02      	cmp	r3, #2
 800861e:	d129      	bne.n	8008674 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	68b9      	ldr	r1, [r7, #8]
 8008624:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008626:	f000 fab3 	bl	8008b90 <prvCopyDataToQueue>
 800862a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800862c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008630:	2b00      	cmp	r3, #0
 8008632:	d010      	beq.n	8008656 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008636:	3324      	adds	r3, #36	@ 0x24
 8008638:	4618      	mov	r0, r3
 800863a:	f001 f8c9 	bl	80097d0 <xTaskRemoveFromEventList>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d013      	beq.n	800866c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008644:	4b3f      	ldr	r3, [pc, #252]	@ (8008744 <xQueueGenericSend+0x200>)
 8008646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800864a:	601a      	str	r2, [r3, #0]
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	e00a      	b.n	800866c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008658:	2b00      	cmp	r3, #0
 800865a:	d007      	beq.n	800866c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800865c:	4b39      	ldr	r3, [pc, #228]	@ (8008744 <xQueueGenericSend+0x200>)
 800865e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800866c:	f002 f8ce 	bl	800a80c <vPortExitCritical>
				return pdPASS;
 8008670:	2301      	movs	r3, #1
 8008672:	e063      	b.n	800873c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d103      	bne.n	8008682 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800867a:	f002 f8c7 	bl	800a80c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800867e:	2300      	movs	r3, #0
 8008680:	e05c      	b.n	800873c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008684:	2b00      	cmp	r3, #0
 8008686:	d106      	bne.n	8008696 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008688:	f107 0314 	add.w	r3, r7, #20
 800868c:	4618      	mov	r0, r3
 800868e:	f001 f903 	bl	8009898 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008692:	2301      	movs	r3, #1
 8008694:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008696:	f002 f8b9 	bl	800a80c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800869a:	f000 fe41 	bl	8009320 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800869e:	f002 f885 	bl	800a7ac <vPortEnterCritical>
 80086a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086a8:	b25b      	sxtb	r3, r3
 80086aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ae:	d103      	bne.n	80086b8 <xQueueGenericSend+0x174>
 80086b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086be:	b25b      	sxtb	r3, r3
 80086c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c4:	d103      	bne.n	80086ce <xQueueGenericSend+0x18a>
 80086c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086ce:	f002 f89d 	bl	800a80c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086d2:	1d3a      	adds	r2, r7, #4
 80086d4:	f107 0314 	add.w	r3, r7, #20
 80086d8:	4611      	mov	r1, r2
 80086da:	4618      	mov	r0, r3
 80086dc:	f001 f8f2 	bl	80098c4 <xTaskCheckForTimeOut>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d124      	bne.n	8008730 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80086e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086e8:	f000 fb4a 	bl	8008d80 <prvIsQueueFull>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d018      	beq.n	8008724 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80086f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f4:	3310      	adds	r3, #16
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	4611      	mov	r1, r2
 80086fa:	4618      	mov	r0, r3
 80086fc:	f001 f816 	bl	800972c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008700:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008702:	f000 fad5 	bl	8008cb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008706:	f000 fe19 	bl	800933c <xTaskResumeAll>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	f47f af7c 	bne.w	800860a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008712:	4b0c      	ldr	r3, [pc, #48]	@ (8008744 <xQueueGenericSend+0x200>)
 8008714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008718:	601a      	str	r2, [r3, #0]
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	e772      	b.n	800860a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008724:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008726:	f000 fac3 	bl	8008cb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800872a:	f000 fe07 	bl	800933c <xTaskResumeAll>
 800872e:	e76c      	b.n	800860a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008730:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008732:	f000 fabd 	bl	8008cb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008736:	f000 fe01 	bl	800933c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800873a:	2300      	movs	r3, #0
		}
	}
}
 800873c:	4618      	mov	r0, r3
 800873e:	3738      	adds	r7, #56	@ 0x38
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	e000ed04 	.word	0xe000ed04

08008748 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b08e      	sub	sp, #56	@ 0x38
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
 8008754:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800875a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875c:	2b00      	cmp	r3, #0
 800875e:	d10b      	bne.n	8008778 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008772:	bf00      	nop
 8008774:	bf00      	nop
 8008776:	e7fd      	b.n	8008774 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d103      	bne.n	8008786 <xQueueGenericSendFromISR+0x3e>
 800877e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008782:	2b00      	cmp	r3, #0
 8008784:	d101      	bne.n	800878a <xQueueGenericSendFromISR+0x42>
 8008786:	2301      	movs	r3, #1
 8008788:	e000      	b.n	800878c <xQueueGenericSendFromISR+0x44>
 800878a:	2300      	movs	r3, #0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10b      	bne.n	80087a8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	623b      	str	r3, [r7, #32]
}
 80087a2:	bf00      	nop
 80087a4:	bf00      	nop
 80087a6:	e7fd      	b.n	80087a4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d103      	bne.n	80087b6 <xQueueGenericSendFromISR+0x6e>
 80087ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d101      	bne.n	80087ba <xQueueGenericSendFromISR+0x72>
 80087b6:	2301      	movs	r3, #1
 80087b8:	e000      	b.n	80087bc <xQueueGenericSendFromISR+0x74>
 80087ba:	2300      	movs	r3, #0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10b      	bne.n	80087d8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80087c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	61fb      	str	r3, [r7, #28]
}
 80087d2:	bf00      	nop
 80087d4:	bf00      	nop
 80087d6:	e7fd      	b.n	80087d4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087d8:	f002 f8aa 	bl	800a930 <vPortValidateInterruptPriority>
	__asm volatile
 80087dc:	f3ef 8211 	mrs	r2, BASEPRI
 80087e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	61ba      	str	r2, [r7, #24]
 80087f2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80087f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008800:	429a      	cmp	r2, r3
 8008802:	d302      	bcc.n	800880a <xQueueGenericSendFromISR+0xc2>
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	2b02      	cmp	r3, #2
 8008808:	d12c      	bne.n	8008864 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800880a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008810:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	68b9      	ldr	r1, [r7, #8]
 8008818:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800881a:	f000 f9b9 	bl	8008b90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800881e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008826:	d112      	bne.n	800884e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800882c:	2b00      	cmp	r3, #0
 800882e:	d016      	beq.n	800885e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008832:	3324      	adds	r3, #36	@ 0x24
 8008834:	4618      	mov	r0, r3
 8008836:	f000 ffcb 	bl	80097d0 <xTaskRemoveFromEventList>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00e      	beq.n	800885e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00b      	beq.n	800885e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	e007      	b.n	800885e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800884e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008852:	3301      	adds	r3, #1
 8008854:	b2db      	uxtb	r3, r3
 8008856:	b25a      	sxtb	r2, r3
 8008858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800885e:	2301      	movs	r3, #1
 8008860:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8008862:	e001      	b.n	8008868 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008864:	2300      	movs	r3, #0
 8008866:	637b      	str	r3, [r7, #52]	@ 0x34
 8008868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800886a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	f383 8811 	msr	BASEPRI, r3
}
 8008872:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008876:	4618      	mov	r0, r3
 8008878:	3738      	adds	r7, #56	@ 0x38
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
	...

08008880 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08c      	sub	sp, #48	@ 0x30
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800888c:	2300      	movs	r3, #0
 800888e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10b      	bne.n	80088b2 <xQueueReceive+0x32>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	623b      	str	r3, [r7, #32]
}
 80088ac:	bf00      	nop
 80088ae:	bf00      	nop
 80088b0:	e7fd      	b.n	80088ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d103      	bne.n	80088c0 <xQueueReceive+0x40>
 80088b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <xQueueReceive+0x44>
 80088c0:	2301      	movs	r3, #1
 80088c2:	e000      	b.n	80088c6 <xQueueReceive+0x46>
 80088c4:	2300      	movs	r3, #0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10b      	bne.n	80088e2 <xQueueReceive+0x62>
	__asm volatile
 80088ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	61fb      	str	r3, [r7, #28]
}
 80088dc:	bf00      	nop
 80088de:	bf00      	nop
 80088e0:	e7fd      	b.n	80088de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088e2:	f001 f977 	bl	8009bd4 <xTaskGetSchedulerState>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d102      	bne.n	80088f2 <xQueueReceive+0x72>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <xQueueReceive+0x76>
 80088f2:	2301      	movs	r3, #1
 80088f4:	e000      	b.n	80088f8 <xQueueReceive+0x78>
 80088f6:	2300      	movs	r3, #0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d10b      	bne.n	8008914 <xQueueReceive+0x94>
	__asm volatile
 80088fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	61bb      	str	r3, [r7, #24]
}
 800890e:	bf00      	nop
 8008910:	bf00      	nop
 8008912:	e7fd      	b.n	8008910 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008914:	f001 ff4a 	bl	800a7ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800891c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800891e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008920:	2b00      	cmp	r3, #0
 8008922:	d01f      	beq.n	8008964 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008924:	68b9      	ldr	r1, [r7, #8]
 8008926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008928:	f000 f99c 	bl	8008c64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800892c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892e:	1e5a      	subs	r2, r3, #1
 8008930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008932:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00f      	beq.n	800895c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800893c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800893e:	3310      	adds	r3, #16
 8008940:	4618      	mov	r0, r3
 8008942:	f000 ff45 	bl	80097d0 <xTaskRemoveFromEventList>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d007      	beq.n	800895c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800894c:	4b3c      	ldr	r3, [pc, #240]	@ (8008a40 <xQueueReceive+0x1c0>)
 800894e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800895c:	f001 ff56 	bl	800a80c <vPortExitCritical>
				return pdPASS;
 8008960:	2301      	movs	r3, #1
 8008962:	e069      	b.n	8008a38 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d103      	bne.n	8008972 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800896a:	f001 ff4f 	bl	800a80c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800896e:	2300      	movs	r3, #0
 8008970:	e062      	b.n	8008a38 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008974:	2b00      	cmp	r3, #0
 8008976:	d106      	bne.n	8008986 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008978:	f107 0310 	add.w	r3, r7, #16
 800897c:	4618      	mov	r0, r3
 800897e:	f000 ff8b 	bl	8009898 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008982:	2301      	movs	r3, #1
 8008984:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008986:	f001 ff41 	bl	800a80c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800898a:	f000 fcc9 	bl	8009320 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800898e:	f001 ff0d 	bl	800a7ac <vPortEnterCritical>
 8008992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008994:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008998:	b25b      	sxtb	r3, r3
 800899a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800899e:	d103      	bne.n	80089a8 <xQueueReceive+0x128>
 80089a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089ae:	b25b      	sxtb	r3, r3
 80089b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b4:	d103      	bne.n	80089be <xQueueReceive+0x13e>
 80089b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089be:	f001 ff25 	bl	800a80c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089c2:	1d3a      	adds	r2, r7, #4
 80089c4:	f107 0310 	add.w	r3, r7, #16
 80089c8:	4611      	mov	r1, r2
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 ff7a 	bl	80098c4 <xTaskCheckForTimeOut>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d123      	bne.n	8008a1e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089d8:	f000 f9bc 	bl	8008d54 <prvIsQueueEmpty>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d017      	beq.n	8008a12 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80089e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e4:	3324      	adds	r3, #36	@ 0x24
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	4611      	mov	r1, r2
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 fe9e 	bl	800972c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80089f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089f2:	f000 f95d 	bl	8008cb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089f6:	f000 fca1 	bl	800933c <xTaskResumeAll>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d189      	bne.n	8008914 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008a00:	4b0f      	ldr	r3, [pc, #60]	@ (8008a40 <xQueueReceive+0x1c0>)
 8008a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	e780      	b.n	8008914 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008a12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a14:	f000 f94c 	bl	8008cb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a18:	f000 fc90 	bl	800933c <xTaskResumeAll>
 8008a1c:	e77a      	b.n	8008914 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008a1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a20:	f000 f946 	bl	8008cb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a24:	f000 fc8a 	bl	800933c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a2a:	f000 f993 	bl	8008d54 <prvIsQueueEmpty>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f43f af6f 	beq.w	8008914 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3730      	adds	r7, #48	@ 0x30
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	e000ed04 	.word	0xe000ed04

08008a44 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b08e      	sub	sp, #56	@ 0x38
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d10b      	bne.n	8008a72 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	623b      	str	r3, [r7, #32]
}
 8008a6c:	bf00      	nop
 8008a6e:	bf00      	nop
 8008a70:	e7fd      	b.n	8008a6e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d103      	bne.n	8008a80 <xQueueReceiveFromISR+0x3c>
 8008a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d101      	bne.n	8008a84 <xQueueReceiveFromISR+0x40>
 8008a80:	2301      	movs	r3, #1
 8008a82:	e000      	b.n	8008a86 <xQueueReceiveFromISR+0x42>
 8008a84:	2300      	movs	r3, #0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10b      	bne.n	8008aa2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	61fb      	str	r3, [r7, #28]
}
 8008a9c:	bf00      	nop
 8008a9e:	bf00      	nop
 8008aa0:	e7fd      	b.n	8008a9e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008aa2:	f001 ff45 	bl	800a930 <vPortValidateInterruptPriority>
	__asm volatile
 8008aa6:	f3ef 8211 	mrs	r2, BASEPRI
 8008aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aae:	f383 8811 	msr	BASEPRI, r3
 8008ab2:	f3bf 8f6f 	isb	sy
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	61ba      	str	r2, [r7, #24]
 8008abc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008abe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ac6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d02f      	beq.n	8008b2e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ad4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ad8:	68b9      	ldr	r1, [r7, #8]
 8008ada:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008adc:	f000 f8c2 	bl	8008c64 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae2:	1e5a      	subs	r2, r3, #1
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008ae8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af0:	d112      	bne.n	8008b18 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d016      	beq.n	8008b28 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afc:	3310      	adds	r3, #16
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 fe66 	bl	80097d0 <xTaskRemoveFromEventList>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00e      	beq.n	8008b28 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00b      	beq.n	8008b28 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	601a      	str	r2, [r3, #0]
 8008b16:	e007      	b.n	8008b28 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008b18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	b25a      	sxtb	r2, r3
 8008b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b2c:	e001      	b.n	8008b32 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b34:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f383 8811 	msr	BASEPRI, r3
}
 8008b3c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3738      	adds	r7, #56	@ 0x38
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	617b      	str	r3, [r7, #20]
	configASSERT( pxQueue );
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10b      	bne.n	8008b72 <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 8008b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	60fb      	str	r3, [r7, #12]
}
 8008b6c:	bf00      	nop
 8008b6e:	bf00      	nop
 8008b70:	e7fd      	b.n	8008b6e <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 8008b72:	f001 fe1b 	bl	800a7ac <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008b82:	f001 fe43 	bl	800a80c <vPortExitCritical>

	return uxReturn;
 8008b86:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10d      	bne.n	8008bca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d14d      	bne.n	8008c52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f001 f828 	bl	8009c10 <xTaskPriorityDisinherit>
 8008bc0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	605a      	str	r2, [r3, #4]
 8008bc8:	e043      	b.n	8008c52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d119      	bne.n	8008c04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6898      	ldr	r0, [r3, #8]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd8:	461a      	mov	r2, r3
 8008bda:	68b9      	ldr	r1, [r7, #8]
 8008bdc:	f002 f97a 	bl	800aed4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	689a      	ldr	r2, [r3, #8]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be8:	441a      	add	r2, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	689a      	ldr	r2, [r3, #8]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d32b      	bcc.n	8008c52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	609a      	str	r2, [r3, #8]
 8008c02:	e026      	b.n	8008c52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	68d8      	ldr	r0, [r3, #12]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	68b9      	ldr	r1, [r7, #8]
 8008c10:	f002 f960 	bl	800aed4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	68da      	ldr	r2, [r3, #12]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c1c:	425b      	negs	r3, r3
 8008c1e:	441a      	add	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	68da      	ldr	r2, [r3, #12]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d207      	bcs.n	8008c40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	685a      	ldr	r2, [r3, #4]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c38:	425b      	negs	r3, r3
 8008c3a:	441a      	add	r2, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d105      	bne.n	8008c52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d002      	beq.n	8008c52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	1c5a      	adds	r2, r3, #1
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008c5a:	697b      	ldr	r3, [r7, #20]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d018      	beq.n	8008ca8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	68da      	ldr	r2, [r3, #12]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c7e:	441a      	add	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68da      	ldr	r2, [r3, #12]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d303      	bcc.n	8008c98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68d9      	ldr	r1, [r3, #12]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	6838      	ldr	r0, [r7, #0]
 8008ca4:	f002 f916 	bl	800aed4 <memcpy>
	}
}
 8008ca8:	bf00      	nop
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008cb8:	f001 fd78 	bl	800a7ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cc4:	e011      	b.n	8008cea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d012      	beq.n	8008cf4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	3324      	adds	r3, #36	@ 0x24
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 fd7c 	bl	80097d0 <xTaskRemoveFromEventList>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008cde:	f000 fe55 	bl	800998c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	dce9      	bgt.n	8008cc6 <prvUnlockQueue+0x16>
 8008cf2:	e000      	b.n	8008cf6 <prvUnlockQueue+0x46>
					break;
 8008cf4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	22ff      	movs	r2, #255	@ 0xff
 8008cfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008cfe:	f001 fd85 	bl	800a80c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d02:	f001 fd53 	bl	800a7ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d0e:	e011      	b.n	8008d34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d012      	beq.n	8008d3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3310      	adds	r3, #16
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f000 fd57 	bl	80097d0 <xTaskRemoveFromEventList>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d28:	f000 fe30 	bl	800998c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	dce9      	bgt.n	8008d10 <prvUnlockQueue+0x60>
 8008d3c:	e000      	b.n	8008d40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	22ff      	movs	r2, #255	@ 0xff
 8008d44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008d48:	f001 fd60 	bl	800a80c <vPortExitCritical>
}
 8008d4c:	bf00      	nop
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d5c:	f001 fd26 	bl	800a7ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d102      	bne.n	8008d6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	60fb      	str	r3, [r7, #12]
 8008d6c:	e001      	b.n	8008d72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d72:	f001 fd4b 	bl	800a80c <vPortExitCritical>

	return xReturn;
 8008d76:	68fb      	ldr	r3, [r7, #12]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d88:	f001 fd10 	bl	800a7ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d102      	bne.n	8008d9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	60fb      	str	r3, [r7, #12]
 8008d9c:	e001      	b.n	8008da2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008da2:	f001 fd33 	bl	800a80c <vPortExitCritical>

	return xReturn;
 8008da6:	68fb      	ldr	r3, [r7, #12]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008dba:	2300      	movs	r3, #0
 8008dbc:	60fb      	str	r3, [r7, #12]
 8008dbe:	e014      	b.n	8008dea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008dc0:	4a0e      	ldr	r2, [pc, #56]	@ (8008dfc <vQueueAddToRegistry+0x4c>)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10b      	bne.n	8008de4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008dcc:	490b      	ldr	r1, [pc, #44]	@ (8008dfc <vQueueAddToRegistry+0x4c>)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008dd6:	4a09      	ldr	r2, [pc, #36]	@ (8008dfc <vQueueAddToRegistry+0x4c>)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	4413      	add	r3, r2
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008de2:	e006      	b.n	8008df2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	3301      	adds	r3, #1
 8008de8:	60fb      	str	r3, [r7, #12]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2b07      	cmp	r3, #7
 8008dee:	d9e7      	bls.n	8008dc0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008df0:	bf00      	nop
 8008df2:	bf00      	nop
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bc80      	pop	{r7}
 8008dfa:	4770      	bx	lr
 8008dfc:	20002c6c 	.word	0x20002c6c

08008e00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e10:	f001 fccc 	bl	800a7ac <vPortEnterCritical>
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e1a:	b25b      	sxtb	r3, r3
 8008e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e20:	d103      	bne.n	8008e2a <vQueueWaitForMessageRestricted+0x2a>
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e30:	b25b      	sxtb	r3, r3
 8008e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e36:	d103      	bne.n	8008e40 <vQueueWaitForMessageRestricted+0x40>
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e40:	f001 fce4 	bl	800a80c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d106      	bne.n	8008e5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	3324      	adds	r3, #36	@ 0x24
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	68b9      	ldr	r1, [r7, #8]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 fc8f 	bl	8009778 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e5a:	6978      	ldr	r0, [r7, #20]
 8008e5c:	f7ff ff28 	bl	8008cb0 <prvUnlockQueue>
	}
 8008e60:	bf00      	nop
 8008e62:	3718      	adds	r7, #24
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b08e      	sub	sp, #56	@ 0x38
 8008e6c:	af04      	add	r7, sp, #16
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
 8008e74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10b      	bne.n	8008e94 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	623b      	str	r3, [r7, #32]
}
 8008e8e:	bf00      	nop
 8008e90:	bf00      	nop
 8008e92:	e7fd      	b.n	8008e90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10b      	bne.n	8008eb2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	61fb      	str	r3, [r7, #28]
}
 8008eac:	bf00      	nop
 8008eae:	bf00      	nop
 8008eb0:	e7fd      	b.n	8008eae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008eb2:	23ac      	movs	r3, #172	@ 0xac
 8008eb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	2bac      	cmp	r3, #172	@ 0xac
 8008eba:	d00b      	beq.n	8008ed4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	61bb      	str	r3, [r7, #24]
}
 8008ece:	bf00      	nop
 8008ed0:	bf00      	nop
 8008ed2:	e7fd      	b.n	8008ed0 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d01e      	beq.n	8008f18 <xTaskCreateStatic+0xb0>
 8008eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d01b      	beq.n	8008f18 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ee8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eec:	2202      	movs	r2, #2
 8008eee:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	9303      	str	r3, [sp, #12]
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef8:	9302      	str	r3, [sp, #8]
 8008efa:	f107 0314 	add.w	r3, r7, #20
 8008efe:	9301      	str	r3, [sp, #4]
 8008f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f02:	9300      	str	r3, [sp, #0]
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	68b9      	ldr	r1, [r7, #8]
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f000 f850 	bl	8008fb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f12:	f000 f8ef 	bl	80090f4 <prvAddNewTaskToReadyList>
 8008f16:	e001      	b.n	8008f1c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008f1c:	697b      	ldr	r3, [r7, #20]
	}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3728      	adds	r7, #40	@ 0x28
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b08c      	sub	sp, #48	@ 0x30
 8008f2a:	af04      	add	r7, sp, #16
 8008f2c:	60f8      	str	r0, [r7, #12]
 8008f2e:	60b9      	str	r1, [r7, #8]
 8008f30:	603b      	str	r3, [r7, #0]
 8008f32:	4613      	mov	r3, r2
 8008f34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f36:	88fb      	ldrh	r3, [r7, #6]
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f001 fd38 	bl	800a9b0 <pvPortMalloc>
 8008f40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00e      	beq.n	8008f66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008f48:	20ac      	movs	r0, #172	@ 0xac
 8008f4a:	f001 fd31 	bl	800a9b0 <pvPortMalloc>
 8008f4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d003      	beq.n	8008f5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	697a      	ldr	r2, [r7, #20]
 8008f5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f5c:	e005      	b.n	8008f6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f5e:	6978      	ldr	r0, [r7, #20]
 8008f60:	f001 fdee 	bl	800ab40 <vPortFree>
 8008f64:	e001      	b.n	8008f6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f66:	2300      	movs	r3, #0
 8008f68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d017      	beq.n	8008fa0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f78:	88fa      	ldrh	r2, [r7, #6]
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	9303      	str	r3, [sp, #12]
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	9302      	str	r3, [sp, #8]
 8008f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f84:	9301      	str	r3, [sp, #4]
 8008f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	68b9      	ldr	r1, [r7, #8]
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f000 f80e 	bl	8008fb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f94:	69f8      	ldr	r0, [r7, #28]
 8008f96:	f000 f8ad 	bl	80090f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	61bb      	str	r3, [r7, #24]
 8008f9e:	e002      	b.n	8008fa6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8008fa4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008fa6:	69bb      	ldr	r3, [r7, #24]
	}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3720      	adds	r7, #32
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b088      	sub	sp, #32
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
 8008fbc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	21a5      	movs	r1, #165	@ 0xa5
 8008fca:	f001 fef9 	bl	800adc0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4413      	add	r3, r2
 8008fde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	f023 0307 	bic.w	r3, r3, #7
 8008fe6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	f003 0307 	and.w	r3, r3, #7
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00b      	beq.n	800900a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff6:	f383 8811 	msr	BASEPRI, r3
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	617b      	str	r3, [r7, #20]
}
 8009004:	bf00      	nop
 8009006:	bf00      	nop
 8009008:	e7fd      	b.n	8009006 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800900a:	2300      	movs	r3, #0
 800900c:	61fb      	str	r3, [r7, #28]
 800900e:	e012      	b.n	8009036 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	4413      	add	r3, r2
 8009016:	7819      	ldrb	r1, [r3, #0]
 8009018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	4413      	add	r3, r2
 800901e:	3334      	adds	r3, #52	@ 0x34
 8009020:	460a      	mov	r2, r1
 8009022:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	4413      	add	r3, r2
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d006      	beq.n	800903e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	3301      	adds	r3, #1
 8009034:	61fb      	str	r3, [r7, #28]
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	2b0f      	cmp	r3, #15
 800903a:	d9e9      	bls.n	8009010 <prvInitialiseNewTask+0x60>
 800903c:	e000      	b.n	8009040 <prvInitialiseNewTask+0x90>
		{
			break;
 800903e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009042:	2200      	movs	r2, #0
 8009044:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800904a:	2b37      	cmp	r3, #55	@ 0x37
 800904c:	d901      	bls.n	8009052 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800904e:	2337      	movs	r3, #55	@ 0x37
 8009050:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009054:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009056:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800905c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800905e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009060:	2200      	movs	r2, #0
 8009062:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009066:	3304      	adds	r3, #4
 8009068:	4618      	mov	r0, r3
 800906a:	f7ff f892 	bl	8008192 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800906e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009070:	3318      	adds	r3, #24
 8009072:	4618      	mov	r0, r3
 8009074:	f7ff f88d 	bl	8008192 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800907c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800907e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009080:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009086:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800908c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800908e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009090:	2200      	movs	r2, #0
 8009092:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009096:	2200      	movs	r2, #0
 8009098:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800909c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80090a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a6:	3358      	adds	r3, #88	@ 0x58
 80090a8:	224c      	movs	r2, #76	@ 0x4c
 80090aa:	2100      	movs	r1, #0
 80090ac:	4618      	mov	r0, r3
 80090ae:	f001 fe87 	bl	800adc0 <memset>
 80090b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b4:	4a0c      	ldr	r2, [pc, #48]	@ (80090e8 <prvInitialiseNewTask+0x138>)
 80090b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80090b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ba:	4a0c      	ldr	r2, [pc, #48]	@ (80090ec <prvInitialiseNewTask+0x13c>)
 80090bc:	661a      	str	r2, [r3, #96]	@ 0x60
 80090be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c0:	4a0b      	ldr	r2, [pc, #44]	@ (80090f0 <prvInitialiseNewTask+0x140>)
 80090c2:	665a      	str	r2, [r3, #100]	@ 0x64
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	68f9      	ldr	r1, [r7, #12]
 80090c8:	69b8      	ldr	r0, [r7, #24]
 80090ca:	f001 fa7f 	bl	800a5cc <pxPortInitialiseStack>
 80090ce:	4602      	mov	r2, r0
 80090d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80090d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d002      	beq.n	80090e0 <prvInitialiseNewTask+0x130>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80090da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090e0:	bf00      	nop
 80090e2:	3720      	adds	r7, #32
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	20003f14 	.word	0x20003f14
 80090ec:	20003f7c 	.word	0x20003f7c
 80090f0:	20003fe4 	.word	0x20003fe4

080090f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80090fc:	f001 fb56 	bl	800a7ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009100:	4b2d      	ldr	r3, [pc, #180]	@ (80091b8 <prvAddNewTaskToReadyList+0xc4>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	3301      	adds	r3, #1
 8009106:	4a2c      	ldr	r2, [pc, #176]	@ (80091b8 <prvAddNewTaskToReadyList+0xc4>)
 8009108:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800910a:	4b2c      	ldr	r3, [pc, #176]	@ (80091bc <prvAddNewTaskToReadyList+0xc8>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d109      	bne.n	8009126 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009112:	4a2a      	ldr	r2, [pc, #168]	@ (80091bc <prvAddNewTaskToReadyList+0xc8>)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009118:	4b27      	ldr	r3, [pc, #156]	@ (80091b8 <prvAddNewTaskToReadyList+0xc4>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d110      	bne.n	8009142 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009120:	f000 fc58 	bl	80099d4 <prvInitialiseTaskLists>
 8009124:	e00d      	b.n	8009142 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009126:	4b26      	ldr	r3, [pc, #152]	@ (80091c0 <prvAddNewTaskToReadyList+0xcc>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d109      	bne.n	8009142 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800912e:	4b23      	ldr	r3, [pc, #140]	@ (80091bc <prvAddNewTaskToReadyList+0xc8>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009138:	429a      	cmp	r2, r3
 800913a:	d802      	bhi.n	8009142 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800913c:	4a1f      	ldr	r2, [pc, #124]	@ (80091bc <prvAddNewTaskToReadyList+0xc8>)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009142:	4b20      	ldr	r3, [pc, #128]	@ (80091c4 <prvAddNewTaskToReadyList+0xd0>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3301      	adds	r3, #1
 8009148:	4a1e      	ldr	r2, [pc, #120]	@ (80091c4 <prvAddNewTaskToReadyList+0xd0>)
 800914a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800914c:	4b1d      	ldr	r3, [pc, #116]	@ (80091c4 <prvAddNewTaskToReadyList+0xd0>)
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009158:	4b1b      	ldr	r3, [pc, #108]	@ (80091c8 <prvAddNewTaskToReadyList+0xd4>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	429a      	cmp	r2, r3
 800915e:	d903      	bls.n	8009168 <prvAddNewTaskToReadyList+0x74>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009164:	4a18      	ldr	r2, [pc, #96]	@ (80091c8 <prvAddNewTaskToReadyList+0xd4>)
 8009166:	6013      	str	r3, [r2, #0]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800916c:	4613      	mov	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	4413      	add	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4a15      	ldr	r2, [pc, #84]	@ (80091cc <prvAddNewTaskToReadyList+0xd8>)
 8009176:	441a      	add	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3304      	adds	r3, #4
 800917c:	4619      	mov	r1, r3
 800917e:	4610      	mov	r0, r2
 8009180:	f7ff f813 	bl	80081aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009184:	f001 fb42 	bl	800a80c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009188:	4b0d      	ldr	r3, [pc, #52]	@ (80091c0 <prvAddNewTaskToReadyList+0xcc>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00e      	beq.n	80091ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009190:	4b0a      	ldr	r3, [pc, #40]	@ (80091bc <prvAddNewTaskToReadyList+0xc8>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919a:	429a      	cmp	r2, r3
 800919c:	d207      	bcs.n	80091ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800919e:	4b0c      	ldr	r3, [pc, #48]	@ (80091d0 <prvAddNewTaskToReadyList+0xdc>)
 80091a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091ae:	bf00      	nop
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20003180 	.word	0x20003180
 80091bc:	20002cac 	.word	0x20002cac
 80091c0:	2000318c 	.word	0x2000318c
 80091c4:	2000319c 	.word	0x2000319c
 80091c8:	20003188 	.word	0x20003188
 80091cc:	20002cb0 	.word	0x20002cb0
 80091d0:	e000ed04 	.word	0xe000ed04

080091d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80091dc:	2300      	movs	r3, #0
 80091de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d018      	beq.n	8009218 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80091e6:	4b14      	ldr	r3, [pc, #80]	@ (8009238 <vTaskDelay+0x64>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00b      	beq.n	8009206 <vTaskDelay+0x32>
	__asm volatile
 80091ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f2:	f383 8811 	msr	BASEPRI, r3
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	f3bf 8f4f 	dsb	sy
 80091fe:	60bb      	str	r3, [r7, #8]
}
 8009200:	bf00      	nop
 8009202:	bf00      	nop
 8009204:	e7fd      	b.n	8009202 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009206:	f000 f88b 	bl	8009320 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800920a:	2100      	movs	r1, #0
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fe69 	bl	8009ee4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009212:	f000 f893 	bl	800933c <xTaskResumeAll>
 8009216:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d107      	bne.n	800922e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800921e:	4b07      	ldr	r3, [pc, #28]	@ (800923c <vTaskDelay+0x68>)
 8009220:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009224:	601a      	str	r2, [r3, #0]
 8009226:	f3bf 8f4f 	dsb	sy
 800922a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800922e:	bf00      	nop
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	200031a8 	.word	0x200031a8
 800923c:	e000ed04 	.word	0xe000ed04

08009240 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b08a      	sub	sp, #40	@ 0x28
 8009244:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009246:	2300      	movs	r3, #0
 8009248:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800924a:	2300      	movs	r3, #0
 800924c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800924e:	463a      	mov	r2, r7
 8009250:	1d39      	adds	r1, r7, #4
 8009252:	f107 0308 	add.w	r3, r7, #8
 8009256:	4618      	mov	r0, r3
 8009258:	f7fe ff4a 	bl	80080f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	9202      	str	r2, [sp, #8]
 8009264:	9301      	str	r3, [sp, #4]
 8009266:	2300      	movs	r3, #0
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	2300      	movs	r3, #0
 800926c:	460a      	mov	r2, r1
 800926e:	4924      	ldr	r1, [pc, #144]	@ (8009300 <vTaskStartScheduler+0xc0>)
 8009270:	4824      	ldr	r0, [pc, #144]	@ (8009304 <vTaskStartScheduler+0xc4>)
 8009272:	f7ff fdf9 	bl	8008e68 <xTaskCreateStatic>
 8009276:	4603      	mov	r3, r0
 8009278:	4a23      	ldr	r2, [pc, #140]	@ (8009308 <vTaskStartScheduler+0xc8>)
 800927a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800927c:	4b22      	ldr	r3, [pc, #136]	@ (8009308 <vTaskStartScheduler+0xc8>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009284:	2301      	movs	r3, #1
 8009286:	617b      	str	r3, [r7, #20]
 8009288:	e001      	b.n	800928e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800928a:	2300      	movs	r3, #0
 800928c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d102      	bne.n	800929a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009294:	f000 fe7a 	bl	8009f8c <xTimerCreateTimerTask>
 8009298:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d11b      	bne.n	80092d8 <vTaskStartScheduler+0x98>
	__asm volatile
 80092a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a4:	f383 8811 	msr	BASEPRI, r3
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	613b      	str	r3, [r7, #16]
}
 80092b2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80092b4:	4b15      	ldr	r3, [pc, #84]	@ (800930c <vTaskStartScheduler+0xcc>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	3358      	adds	r3, #88	@ 0x58
 80092ba:	4a15      	ldr	r2, [pc, #84]	@ (8009310 <vTaskStartScheduler+0xd0>)
 80092bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80092be:	4b15      	ldr	r3, [pc, #84]	@ (8009314 <vTaskStartScheduler+0xd4>)
 80092c0:	f04f 32ff 	mov.w	r2, #4294967295
 80092c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80092c6:	4b14      	ldr	r3, [pc, #80]	@ (8009318 <vTaskStartScheduler+0xd8>)
 80092c8:	2201      	movs	r2, #1
 80092ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80092cc:	4b13      	ldr	r3, [pc, #76]	@ (800931c <vTaskStartScheduler+0xdc>)
 80092ce:	2200      	movs	r2, #0
 80092d0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80092d2:	f001 f9f9 	bl	800a6c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092d6:	e00f      	b.n	80092f8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092de:	d10b      	bne.n	80092f8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80092e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	60fb      	str	r3, [r7, #12]
}
 80092f2:	bf00      	nop
 80092f4:	bf00      	nop
 80092f6:	e7fd      	b.n	80092f4 <vTaskStartScheduler+0xb4>
}
 80092f8:	bf00      	nop
 80092fa:	3718      	adds	r7, #24
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	0800ca74 	.word	0x0800ca74
 8009304:	080099a5 	.word	0x080099a5
 8009308:	200031a4 	.word	0x200031a4
 800930c:	20002cac 	.word	0x20002cac
 8009310:	20001030 	.word	0x20001030
 8009314:	200031a0 	.word	0x200031a0
 8009318:	2000318c 	.word	0x2000318c
 800931c:	20003184 	.word	0x20003184

08009320 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009320:	b480      	push	{r7}
 8009322:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009324:	4b04      	ldr	r3, [pc, #16]	@ (8009338 <vTaskSuspendAll+0x18>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	3301      	adds	r3, #1
 800932a:	4a03      	ldr	r2, [pc, #12]	@ (8009338 <vTaskSuspendAll+0x18>)
 800932c:	6013      	str	r3, [r2, #0]
}
 800932e:	bf00      	nop
 8009330:	46bd      	mov	sp, r7
 8009332:	bc80      	pop	{r7}
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	200031a8 	.word	0x200031a8

0800933c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009342:	2300      	movs	r3, #0
 8009344:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009346:	2300      	movs	r3, #0
 8009348:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800934a:	4b42      	ldr	r3, [pc, #264]	@ (8009454 <xTaskResumeAll+0x118>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10b      	bne.n	800936a <xTaskResumeAll+0x2e>
	__asm volatile
 8009352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	603b      	str	r3, [r7, #0]
}
 8009364:	bf00      	nop
 8009366:	bf00      	nop
 8009368:	e7fd      	b.n	8009366 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800936a:	f001 fa1f 	bl	800a7ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800936e:	4b39      	ldr	r3, [pc, #228]	@ (8009454 <xTaskResumeAll+0x118>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3b01      	subs	r3, #1
 8009374:	4a37      	ldr	r2, [pc, #220]	@ (8009454 <xTaskResumeAll+0x118>)
 8009376:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009378:	4b36      	ldr	r3, [pc, #216]	@ (8009454 <xTaskResumeAll+0x118>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d162      	bne.n	8009446 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009380:	4b35      	ldr	r3, [pc, #212]	@ (8009458 <xTaskResumeAll+0x11c>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d05e      	beq.n	8009446 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009388:	e02f      	b.n	80093ea <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800938a:	4b34      	ldr	r3, [pc, #208]	@ (800945c <xTaskResumeAll+0x120>)
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	3318      	adds	r3, #24
 8009396:	4618      	mov	r0, r3
 8009398:	f7fe ff62 	bl	8008260 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	3304      	adds	r3, #4
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fe ff5d 	bl	8008260 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093aa:	4b2d      	ldr	r3, [pc, #180]	@ (8009460 <xTaskResumeAll+0x124>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d903      	bls.n	80093ba <xTaskResumeAll+0x7e>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b6:	4a2a      	ldr	r2, [pc, #168]	@ (8009460 <xTaskResumeAll+0x124>)
 80093b8:	6013      	str	r3, [r2, #0]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093be:	4613      	mov	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	4a27      	ldr	r2, [pc, #156]	@ (8009464 <xTaskResumeAll+0x128>)
 80093c8:	441a      	add	r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	3304      	adds	r3, #4
 80093ce:	4619      	mov	r1, r3
 80093d0:	4610      	mov	r0, r2
 80093d2:	f7fe feea 	bl	80081aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093da:	4b23      	ldr	r3, [pc, #140]	@ (8009468 <xTaskResumeAll+0x12c>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d302      	bcc.n	80093ea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80093e4:	4b21      	ldr	r3, [pc, #132]	@ (800946c <xTaskResumeAll+0x130>)
 80093e6:	2201      	movs	r2, #1
 80093e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093ea:	4b1c      	ldr	r3, [pc, #112]	@ (800945c <xTaskResumeAll+0x120>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1cb      	bne.n	800938a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d001      	beq.n	80093fc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093f8:	f000 fbc8 	bl	8009b8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80093fc:	4b1c      	ldr	r3, [pc, #112]	@ (8009470 <xTaskResumeAll+0x134>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d010      	beq.n	800942a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009408:	f000 f844 	bl	8009494 <xTaskIncrementTick>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d002      	beq.n	8009418 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009412:	4b16      	ldr	r3, [pc, #88]	@ (800946c <xTaskResumeAll+0x130>)
 8009414:	2201      	movs	r2, #1
 8009416:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	3b01      	subs	r3, #1
 800941c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1f1      	bne.n	8009408 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009424:	4b12      	ldr	r3, [pc, #72]	@ (8009470 <xTaskResumeAll+0x134>)
 8009426:	2200      	movs	r2, #0
 8009428:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800942a:	4b10      	ldr	r3, [pc, #64]	@ (800946c <xTaskResumeAll+0x130>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d009      	beq.n	8009446 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009432:	2301      	movs	r3, #1
 8009434:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009436:	4b0f      	ldr	r3, [pc, #60]	@ (8009474 <xTaskResumeAll+0x138>)
 8009438:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800943c:	601a      	str	r2, [r3, #0]
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009446:	f001 f9e1 	bl	800a80c <vPortExitCritical>

	return xAlreadyYielded;
 800944a:	68bb      	ldr	r3, [r7, #8]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	200031a8 	.word	0x200031a8
 8009458:	20003180 	.word	0x20003180
 800945c:	20003140 	.word	0x20003140
 8009460:	20003188 	.word	0x20003188
 8009464:	20002cb0 	.word	0x20002cb0
 8009468:	20002cac 	.word	0x20002cac
 800946c:	20003194 	.word	0x20003194
 8009470:	20003190 	.word	0x20003190
 8009474:	e000ed04 	.word	0xe000ed04

08009478 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800947e:	4b04      	ldr	r3, [pc, #16]	@ (8009490 <xTaskGetTickCount+0x18>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009484:	687b      	ldr	r3, [r7, #4]
}
 8009486:	4618      	mov	r0, r3
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	bc80      	pop	{r7}
 800948e:	4770      	bx	lr
 8009490:	20003184 	.word	0x20003184

08009494 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800949a:	2300      	movs	r3, #0
 800949c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800949e:	4b52      	ldr	r3, [pc, #328]	@ (80095e8 <xTaskIncrementTick+0x154>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f040 808f 	bne.w	80095c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80094a8:	4b50      	ldr	r3, [pc, #320]	@ (80095ec <xTaskIncrementTick+0x158>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	3301      	adds	r3, #1
 80094ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80094b0:	4a4e      	ldr	r2, [pc, #312]	@ (80095ec <xTaskIncrementTick+0x158>)
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d121      	bne.n	8009500 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80094bc:	4b4c      	ldr	r3, [pc, #304]	@ (80095f0 <xTaskIncrementTick+0x15c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00b      	beq.n	80094de <xTaskIncrementTick+0x4a>
	__asm volatile
 80094c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ca:	f383 8811 	msr	BASEPRI, r3
 80094ce:	f3bf 8f6f 	isb	sy
 80094d2:	f3bf 8f4f 	dsb	sy
 80094d6:	603b      	str	r3, [r7, #0]
}
 80094d8:	bf00      	nop
 80094da:	bf00      	nop
 80094dc:	e7fd      	b.n	80094da <xTaskIncrementTick+0x46>
 80094de:	4b44      	ldr	r3, [pc, #272]	@ (80095f0 <xTaskIncrementTick+0x15c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	60fb      	str	r3, [r7, #12]
 80094e4:	4b43      	ldr	r3, [pc, #268]	@ (80095f4 <xTaskIncrementTick+0x160>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a41      	ldr	r2, [pc, #260]	@ (80095f0 <xTaskIncrementTick+0x15c>)
 80094ea:	6013      	str	r3, [r2, #0]
 80094ec:	4a41      	ldr	r2, [pc, #260]	@ (80095f4 <xTaskIncrementTick+0x160>)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6013      	str	r3, [r2, #0]
 80094f2:	4b41      	ldr	r3, [pc, #260]	@ (80095f8 <xTaskIncrementTick+0x164>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	3301      	adds	r3, #1
 80094f8:	4a3f      	ldr	r2, [pc, #252]	@ (80095f8 <xTaskIncrementTick+0x164>)
 80094fa:	6013      	str	r3, [r2, #0]
 80094fc:	f000 fb46 	bl	8009b8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009500:	4b3e      	ldr	r3, [pc, #248]	@ (80095fc <xTaskIncrementTick+0x168>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	429a      	cmp	r2, r3
 8009508:	d34e      	bcc.n	80095a8 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800950a:	4b39      	ldr	r3, [pc, #228]	@ (80095f0 <xTaskIncrementTick+0x15c>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <xTaskIncrementTick+0x84>
 8009514:	2301      	movs	r3, #1
 8009516:	e000      	b.n	800951a <xTaskIncrementTick+0x86>
 8009518:	2300      	movs	r3, #0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d004      	beq.n	8009528 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800951e:	4b37      	ldr	r3, [pc, #220]	@ (80095fc <xTaskIncrementTick+0x168>)
 8009520:	f04f 32ff 	mov.w	r2, #4294967295
 8009524:	601a      	str	r2, [r3, #0]
					break;
 8009526:	e03f      	b.n	80095a8 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009528:	4b31      	ldr	r3, [pc, #196]	@ (80095f0 <xTaskIncrementTick+0x15c>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	429a      	cmp	r2, r3
 800953e:	d203      	bcs.n	8009548 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009540:	4a2e      	ldr	r2, [pc, #184]	@ (80095fc <xTaskIncrementTick+0x168>)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6013      	str	r3, [r2, #0]
						break;
 8009546:	e02f      	b.n	80095a8 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	3304      	adds	r3, #4
 800954c:	4618      	mov	r0, r3
 800954e:	f7fe fe87 	bl	8008260 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009556:	2b00      	cmp	r3, #0
 8009558:	d004      	beq.n	8009564 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	3318      	adds	r3, #24
 800955e:	4618      	mov	r0, r3
 8009560:	f7fe fe7e 	bl	8008260 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009568:	4b25      	ldr	r3, [pc, #148]	@ (8009600 <xTaskIncrementTick+0x16c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	429a      	cmp	r2, r3
 800956e:	d903      	bls.n	8009578 <xTaskIncrementTick+0xe4>
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009574:	4a22      	ldr	r2, [pc, #136]	@ (8009600 <xTaskIncrementTick+0x16c>)
 8009576:	6013      	str	r3, [r2, #0]
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800957c:	4613      	mov	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	4413      	add	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4a1f      	ldr	r2, [pc, #124]	@ (8009604 <xTaskIncrementTick+0x170>)
 8009586:	441a      	add	r2, r3
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	3304      	adds	r3, #4
 800958c:	4619      	mov	r1, r3
 800958e:	4610      	mov	r0, r2
 8009590:	f7fe fe0b 	bl	80081aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009598:	4b1b      	ldr	r3, [pc, #108]	@ (8009608 <xTaskIncrementTick+0x174>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800959e:	429a      	cmp	r2, r3
 80095a0:	d3b3      	bcc.n	800950a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80095a2:	2301      	movs	r3, #1
 80095a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095a6:	e7b0      	b.n	800950a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80095a8:	4b17      	ldr	r3, [pc, #92]	@ (8009608 <xTaskIncrementTick+0x174>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ae:	4915      	ldr	r1, [pc, #84]	@ (8009604 <xTaskIncrementTick+0x170>)
 80095b0:	4613      	mov	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4413      	add	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	440b      	add	r3, r1
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d907      	bls.n	80095d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80095c0:	2301      	movs	r3, #1
 80095c2:	617b      	str	r3, [r7, #20]
 80095c4:	e004      	b.n	80095d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80095c6:	4b11      	ldr	r3, [pc, #68]	@ (800960c <xTaskIncrementTick+0x178>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	3301      	adds	r3, #1
 80095cc:	4a0f      	ldr	r2, [pc, #60]	@ (800960c <xTaskIncrementTick+0x178>)
 80095ce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80095d0:	4b0f      	ldr	r3, [pc, #60]	@ (8009610 <xTaskIncrementTick+0x17c>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80095d8:	2301      	movs	r3, #1
 80095da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80095dc:	697b      	ldr	r3, [r7, #20]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3718      	adds	r7, #24
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	200031a8 	.word	0x200031a8
 80095ec:	20003184 	.word	0x20003184
 80095f0:	20003138 	.word	0x20003138
 80095f4:	2000313c 	.word	0x2000313c
 80095f8:	20003198 	.word	0x20003198
 80095fc:	200031a0 	.word	0x200031a0
 8009600:	20003188 	.word	0x20003188
 8009604:	20002cb0 	.word	0x20002cb0
 8009608:	20002cac 	.word	0x20002cac
 800960c:	20003190 	.word	0x20003190
 8009610:	20003194 	.word	0x20003194

08009614 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d103      	bne.n	800962c <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8009624:	4b08      	ldr	r3, [pc, #32]	@ (8009648 <vTaskSetApplicationTaskTag+0x34>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	60fb      	str	r3, [r7, #12]
 800962a:	e001      	b.n	8009630 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8009630:	f001 f8bc 	bl	800a7ac <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	655a      	str	r2, [r3, #84]	@ 0x54
		taskEXIT_CRITICAL();
 800963a:	f001 f8e7 	bl	800a80c <vPortExitCritical>
	}
 800963e:	bf00      	nop
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	20002cac 	.word	0x20002cac

0800964c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009652:	4b30      	ldr	r3, [pc, #192]	@ (8009714 <vTaskSwitchContext+0xc8>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d003      	beq.n	8009662 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800965a:	4b2f      	ldr	r3, [pc, #188]	@ (8009718 <vTaskSwitchContext+0xcc>)
 800965c:	2201      	movs	r2, #1
 800965e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009660:	e053      	b.n	800970a <vTaskSwitchContext+0xbe>
		xYieldPending = pdFALSE;
 8009662:	4b2d      	ldr	r3, [pc, #180]	@ (8009718 <vTaskSwitchContext+0xcc>)
 8009664:	2200      	movs	r2, #0
 8009666:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8009668:	4b2c      	ldr	r3, [pc, #176]	@ (800971c <vTaskSwitchContext+0xd0>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800966e:	4618      	mov	r0, r3
 8009670:	f7f8 f95c 	bl	800192c <callback_out>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009674:	4b2a      	ldr	r3, [pc, #168]	@ (8009720 <vTaskSwitchContext+0xd4>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	60fb      	str	r3, [r7, #12]
 800967a:	e011      	b.n	80096a0 <vTaskSwitchContext+0x54>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10b      	bne.n	800969a <vTaskSwitchContext+0x4e>
	__asm volatile
 8009682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009686:	f383 8811 	msr	BASEPRI, r3
 800968a:	f3bf 8f6f 	isb	sy
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	607b      	str	r3, [r7, #4]
}
 8009694:	bf00      	nop
 8009696:	bf00      	nop
 8009698:	e7fd      	b.n	8009696 <vTaskSwitchContext+0x4a>
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	3b01      	subs	r3, #1
 800969e:	60fb      	str	r3, [r7, #12]
 80096a0:	4920      	ldr	r1, [pc, #128]	@ (8009724 <vTaskSwitchContext+0xd8>)
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	4613      	mov	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	440b      	add	r3, r1
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d0e3      	beq.n	800967c <vTaskSwitchContext+0x30>
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	4613      	mov	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	4413      	add	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4a19      	ldr	r2, [pc, #100]	@ (8009724 <vTaskSwitchContext+0xd8>)
 80096c0:	4413      	add	r3, r2
 80096c2:	60bb      	str	r3, [r7, #8]
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	685a      	ldr	r2, [r3, #4]
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	605a      	str	r2, [r3, #4]
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	685a      	ldr	r2, [r3, #4]
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	3308      	adds	r3, #8
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d104      	bne.n	80096e4 <vTaskSwitchContext+0x98>
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	685a      	ldr	r2, [r3, #4]
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	605a      	str	r2, [r3, #4]
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	4a0c      	ldr	r2, [pc, #48]	@ (800971c <vTaskSwitchContext+0xd0>)
 80096ec:	6013      	str	r3, [r2, #0]
 80096ee:	4a0c      	ldr	r2, [pc, #48]	@ (8009720 <vTaskSwitchContext+0xd4>)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80096f4:	4b09      	ldr	r3, [pc, #36]	@ (800971c <vTaskSwitchContext+0xd0>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7f8 f8d2 	bl	80018a4 <callback_in>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009700:	4b06      	ldr	r3, [pc, #24]	@ (800971c <vTaskSwitchContext+0xd0>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	3358      	adds	r3, #88	@ 0x58
 8009706:	4a08      	ldr	r2, [pc, #32]	@ (8009728 <vTaskSwitchContext+0xdc>)
 8009708:	6013      	str	r3, [r2, #0]
}
 800970a:	bf00      	nop
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	200031a8 	.word	0x200031a8
 8009718:	20003194 	.word	0x20003194
 800971c:	20002cac 	.word	0x20002cac
 8009720:	20003188 	.word	0x20003188
 8009724:	20002cb0 	.word	0x20002cb0
 8009728:	20001030 	.word	0x20001030

0800972c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10b      	bne.n	8009754 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800973c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	60fb      	str	r3, [r7, #12]
}
 800974e:	bf00      	nop
 8009750:	bf00      	nop
 8009752:	e7fd      	b.n	8009750 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009754:	4b07      	ldr	r3, [pc, #28]	@ (8009774 <vTaskPlaceOnEventList+0x48>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3318      	adds	r3, #24
 800975a:	4619      	mov	r1, r3
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f7fe fd47 	bl	80081f0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009762:	2101      	movs	r1, #1
 8009764:	6838      	ldr	r0, [r7, #0]
 8009766:	f000 fbbd 	bl	8009ee4 <prvAddCurrentTaskToDelayedList>
}
 800976a:	bf00      	nop
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	20002cac 	.word	0x20002cac

08009778 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009778:	b580      	push	{r7, lr}
 800977a:	b086      	sub	sp, #24
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10b      	bne.n	80097a2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800978a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978e:	f383 8811 	msr	BASEPRI, r3
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	617b      	str	r3, [r7, #20]
}
 800979c:	bf00      	nop
 800979e:	bf00      	nop
 80097a0:	e7fd      	b.n	800979e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097a2:	4b0a      	ldr	r3, [pc, #40]	@ (80097cc <vTaskPlaceOnEventListRestricted+0x54>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	3318      	adds	r3, #24
 80097a8:	4619      	mov	r1, r3
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f7fe fcfd 	bl	80081aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d002      	beq.n	80097bc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80097b6:	f04f 33ff 	mov.w	r3, #4294967295
 80097ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80097bc:	6879      	ldr	r1, [r7, #4]
 80097be:	68b8      	ldr	r0, [r7, #8]
 80097c0:	f000 fb90 	bl	8009ee4 <prvAddCurrentTaskToDelayedList>
	}
 80097c4:	bf00      	nop
 80097c6:	3718      	adds	r7, #24
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	20002cac 	.word	0x20002cac

080097d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b086      	sub	sp, #24
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10b      	bne.n	80097fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80097e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	60fb      	str	r3, [r7, #12]
}
 80097f8:	bf00      	nop
 80097fa:	bf00      	nop
 80097fc:	e7fd      	b.n	80097fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	3318      	adds	r3, #24
 8009802:	4618      	mov	r0, r3
 8009804:	f7fe fd2c 	bl	8008260 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009808:	4b1d      	ldr	r3, [pc, #116]	@ (8009880 <xTaskRemoveFromEventList+0xb0>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d11d      	bne.n	800984c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	3304      	adds	r3, #4
 8009814:	4618      	mov	r0, r3
 8009816:	f7fe fd23 	bl	8008260 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800981e:	4b19      	ldr	r3, [pc, #100]	@ (8009884 <xTaskRemoveFromEventList+0xb4>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	429a      	cmp	r2, r3
 8009824:	d903      	bls.n	800982e <xTaskRemoveFromEventList+0x5e>
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800982a:	4a16      	ldr	r2, [pc, #88]	@ (8009884 <xTaskRemoveFromEventList+0xb4>)
 800982c:	6013      	str	r3, [r2, #0]
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009832:	4613      	mov	r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	4413      	add	r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4a13      	ldr	r2, [pc, #76]	@ (8009888 <xTaskRemoveFromEventList+0xb8>)
 800983c:	441a      	add	r2, r3
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	3304      	adds	r3, #4
 8009842:	4619      	mov	r1, r3
 8009844:	4610      	mov	r0, r2
 8009846:	f7fe fcb0 	bl	80081aa <vListInsertEnd>
 800984a:	e005      	b.n	8009858 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	3318      	adds	r3, #24
 8009850:	4619      	mov	r1, r3
 8009852:	480e      	ldr	r0, [pc, #56]	@ (800988c <xTaskRemoveFromEventList+0xbc>)
 8009854:	f7fe fca9 	bl	80081aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800985c:	4b0c      	ldr	r3, [pc, #48]	@ (8009890 <xTaskRemoveFromEventList+0xc0>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009862:	429a      	cmp	r2, r3
 8009864:	d905      	bls.n	8009872 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009866:	2301      	movs	r3, #1
 8009868:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800986a:	4b0a      	ldr	r3, [pc, #40]	@ (8009894 <xTaskRemoveFromEventList+0xc4>)
 800986c:	2201      	movs	r2, #1
 800986e:	601a      	str	r2, [r3, #0]
 8009870:	e001      	b.n	8009876 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009872:	2300      	movs	r3, #0
 8009874:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009876:	697b      	ldr	r3, [r7, #20]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3718      	adds	r7, #24
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	200031a8 	.word	0x200031a8
 8009884:	20003188 	.word	0x20003188
 8009888:	20002cb0 	.word	0x20002cb0
 800988c:	20003140 	.word	0x20003140
 8009890:	20002cac 	.word	0x20002cac
 8009894:	20003194 	.word	0x20003194

08009898 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098a0:	4b06      	ldr	r3, [pc, #24]	@ (80098bc <vTaskInternalSetTimeOutState+0x24>)
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80098a8:	4b05      	ldr	r3, [pc, #20]	@ (80098c0 <vTaskInternalSetTimeOutState+0x28>)
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	605a      	str	r2, [r3, #4]
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bc80      	pop	{r7}
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	20003198 	.word	0x20003198
 80098c0:	20003184 	.word	0x20003184

080098c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b088      	sub	sp, #32
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10b      	bne.n	80098ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80098d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	613b      	str	r3, [r7, #16]
}
 80098e6:	bf00      	nop
 80098e8:	bf00      	nop
 80098ea:	e7fd      	b.n	80098e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10b      	bne.n	800990a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80098f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f6:	f383 8811 	msr	BASEPRI, r3
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	60fb      	str	r3, [r7, #12]
}
 8009904:	bf00      	nop
 8009906:	bf00      	nop
 8009908:	e7fd      	b.n	8009906 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800990a:	f000 ff4f 	bl	800a7ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800990e:	4b1d      	ldr	r3, [pc, #116]	@ (8009984 <xTaskCheckForTimeOut+0xc0>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	69ba      	ldr	r2, [r7, #24]
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009926:	d102      	bne.n	800992e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009928:	2300      	movs	r3, #0
 800992a:	61fb      	str	r3, [r7, #28]
 800992c:	e023      	b.n	8009976 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	4b15      	ldr	r3, [pc, #84]	@ (8009988 <xTaskCheckForTimeOut+0xc4>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	429a      	cmp	r2, r3
 8009938:	d007      	beq.n	800994a <xTaskCheckForTimeOut+0x86>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	69ba      	ldr	r2, [r7, #24]
 8009940:	429a      	cmp	r2, r3
 8009942:	d302      	bcc.n	800994a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009944:	2301      	movs	r3, #1
 8009946:	61fb      	str	r3, [r7, #28]
 8009948:	e015      	b.n	8009976 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	429a      	cmp	r2, r3
 8009952:	d20b      	bcs.n	800996c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	1ad2      	subs	r2, r2, r3
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7ff ff99 	bl	8009898 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009966:	2300      	movs	r3, #0
 8009968:	61fb      	str	r3, [r7, #28]
 800996a:	e004      	b.n	8009976 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	2200      	movs	r2, #0
 8009970:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009972:	2301      	movs	r3, #1
 8009974:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009976:	f000 ff49 	bl	800a80c <vPortExitCritical>

	return xReturn;
 800997a:	69fb      	ldr	r3, [r7, #28]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3720      	adds	r7, #32
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	20003184 	.word	0x20003184
 8009988:	20003198 	.word	0x20003198

0800998c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800998c:	b480      	push	{r7}
 800998e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009990:	4b03      	ldr	r3, [pc, #12]	@ (80099a0 <vTaskMissedYield+0x14>)
 8009992:	2201      	movs	r2, #1
 8009994:	601a      	str	r2, [r3, #0]
}
 8009996:	bf00      	nop
 8009998:	46bd      	mov	sp, r7
 800999a:	bc80      	pop	{r7}
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	20003194 	.word	0x20003194

080099a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80099ac:	f000 f852 	bl	8009a54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099b0:	4b06      	ldr	r3, [pc, #24]	@ (80099cc <prvIdleTask+0x28>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d9f9      	bls.n	80099ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80099b8:	4b05      	ldr	r3, [pc, #20]	@ (80099d0 <prvIdleTask+0x2c>)
 80099ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099be:	601a      	str	r2, [r3, #0]
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099c8:	e7f0      	b.n	80099ac <prvIdleTask+0x8>
 80099ca:	bf00      	nop
 80099cc:	20002cb0 	.word	0x20002cb0
 80099d0:	e000ed04 	.word	0xe000ed04

080099d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099da:	2300      	movs	r3, #0
 80099dc:	607b      	str	r3, [r7, #4]
 80099de:	e00c      	b.n	80099fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	4613      	mov	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4a12      	ldr	r2, [pc, #72]	@ (8009a34 <prvInitialiseTaskLists+0x60>)
 80099ec:	4413      	add	r3, r2
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fe fbb0 	bl	8008154 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	3301      	adds	r3, #1
 80099f8:	607b      	str	r3, [r7, #4]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2b37      	cmp	r3, #55	@ 0x37
 80099fe:	d9ef      	bls.n	80099e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a00:	480d      	ldr	r0, [pc, #52]	@ (8009a38 <prvInitialiseTaskLists+0x64>)
 8009a02:	f7fe fba7 	bl	8008154 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a06:	480d      	ldr	r0, [pc, #52]	@ (8009a3c <prvInitialiseTaskLists+0x68>)
 8009a08:	f7fe fba4 	bl	8008154 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a0c:	480c      	ldr	r0, [pc, #48]	@ (8009a40 <prvInitialiseTaskLists+0x6c>)
 8009a0e:	f7fe fba1 	bl	8008154 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a12:	480c      	ldr	r0, [pc, #48]	@ (8009a44 <prvInitialiseTaskLists+0x70>)
 8009a14:	f7fe fb9e 	bl	8008154 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a18:	480b      	ldr	r0, [pc, #44]	@ (8009a48 <prvInitialiseTaskLists+0x74>)
 8009a1a:	f7fe fb9b 	bl	8008154 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8009a4c <prvInitialiseTaskLists+0x78>)
 8009a20:	4a05      	ldr	r2, [pc, #20]	@ (8009a38 <prvInitialiseTaskLists+0x64>)
 8009a22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a24:	4b0a      	ldr	r3, [pc, #40]	@ (8009a50 <prvInitialiseTaskLists+0x7c>)
 8009a26:	4a05      	ldr	r2, [pc, #20]	@ (8009a3c <prvInitialiseTaskLists+0x68>)
 8009a28:	601a      	str	r2, [r3, #0]
}
 8009a2a:	bf00      	nop
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20002cb0 	.word	0x20002cb0
 8009a38:	20003110 	.word	0x20003110
 8009a3c:	20003124 	.word	0x20003124
 8009a40:	20003140 	.word	0x20003140
 8009a44:	20003154 	.word	0x20003154
 8009a48:	2000316c 	.word	0x2000316c
 8009a4c:	20003138 	.word	0x20003138
 8009a50:	2000313c 	.word	0x2000313c

08009a54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a5a:	e019      	b.n	8009a90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a5c:	f000 fea6 	bl	800a7ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009a60:	4b10      	ldr	r3, [pc, #64]	@ (8009aa4 <prvCheckTasksWaitingTermination+0x50>)
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fe fbf7 	bl	8008260 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a72:	4b0d      	ldr	r3, [pc, #52]	@ (8009aa8 <prvCheckTasksWaitingTermination+0x54>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	3b01      	subs	r3, #1
 8009a78:	4a0b      	ldr	r2, [pc, #44]	@ (8009aa8 <prvCheckTasksWaitingTermination+0x54>)
 8009a7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8009aac <prvCheckTasksWaitingTermination+0x58>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	3b01      	subs	r3, #1
 8009a82:	4a0a      	ldr	r2, [pc, #40]	@ (8009aac <prvCheckTasksWaitingTermination+0x58>)
 8009a84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a86:	f000 fec1 	bl	800a80c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f848 	bl	8009b20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a90:	4b06      	ldr	r3, [pc, #24]	@ (8009aac <prvCheckTasksWaitingTermination+0x58>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1e1      	bne.n	8009a5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a98:	bf00      	nop
 8009a9a:	bf00      	nop
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20003154 	.word	0x20003154
 8009aa8:	20003180 	.word	0x20003180
 8009aac:	20003168 	.word	0x20003168

08009ab0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009abc:	e005      	b.n	8009aca <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	607b      	str	r3, [r7, #4]
			ulCount++;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	2ba5      	cmp	r3, #165	@ 0xa5
 8009ad0:	d0f5      	beq.n	8009abe <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	089b      	lsrs	r3, r3, #2
 8009ad6:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	b29b      	uxth	r3, r3
	}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3714      	adds	r7, #20
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bc80      	pop	{r7}
 8009ae4:	4770      	bx	lr
	...

08009ae8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d102      	bne.n	8009afc <uxTaskGetStackHighWaterMark+0x14>
 8009af6:	4b09      	ldr	r3, [pc, #36]	@ (8009b1c <uxTaskGetStackHighWaterMark+0x34>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	e000      	b.n	8009afe <uxTaskGetStackHighWaterMark+0x16>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b04:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8009b06:	6938      	ldr	r0, [r7, #16]
 8009b08:	f7ff ffd2 	bl	8009ab0 <prvTaskCheckFreeStackSpace>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8009b10:	68fb      	ldr	r3, [r7, #12]
	}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3718      	adds	r7, #24
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	20002cac 	.word	0x20002cac

08009b20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3358      	adds	r3, #88	@ 0x58
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f001 f94f 	bl	800add0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d108      	bne.n	8009b4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b40:	4618      	mov	r0, r3
 8009b42:	f000 fffd 	bl	800ab40 <vPortFree>
				vPortFree( pxTCB );
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fffa 	bl	800ab40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b4c:	e019      	b.n	8009b82 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d103      	bne.n	8009b60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fff1 	bl	800ab40 <vPortFree>
	}
 8009b5e:	e010      	b.n	8009b82 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	d00b      	beq.n	8009b82 <prvDeleteTCB+0x62>
	__asm volatile
 8009b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	60fb      	str	r3, [r7, #12]
}
 8009b7c:	bf00      	nop
 8009b7e:	bf00      	nop
 8009b80:	e7fd      	b.n	8009b7e <prvDeleteTCB+0x5e>
	}
 8009b82:	bf00      	nop
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
	...

08009b8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b92:	4b0e      	ldr	r3, [pc, #56]	@ (8009bcc <prvResetNextTaskUnblockTime+0x40>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d101      	bne.n	8009ba0 <prvResetNextTaskUnblockTime+0x14>
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e000      	b.n	8009ba2 <prvResetNextTaskUnblockTime+0x16>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d004      	beq.n	8009bb0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8009bd0 <prvResetNextTaskUnblockTime+0x44>)
 8009ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009bae:	e008      	b.n	8009bc2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009bb0:	4b06      	ldr	r3, [pc, #24]	@ (8009bcc <prvResetNextTaskUnblockTime+0x40>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	4a04      	ldr	r2, [pc, #16]	@ (8009bd0 <prvResetNextTaskUnblockTime+0x44>)
 8009bc0:	6013      	str	r3, [r2, #0]
}
 8009bc2:	bf00      	nop
 8009bc4:	370c      	adds	r7, #12
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bc80      	pop	{r7}
 8009bca:	4770      	bx	lr
 8009bcc:	20003138 	.word	0x20003138
 8009bd0:	200031a0 	.word	0x200031a0

08009bd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009bda:	4b0b      	ldr	r3, [pc, #44]	@ (8009c08 <xTaskGetSchedulerState+0x34>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d102      	bne.n	8009be8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009be2:	2301      	movs	r3, #1
 8009be4:	607b      	str	r3, [r7, #4]
 8009be6:	e008      	b.n	8009bfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009be8:	4b08      	ldr	r3, [pc, #32]	@ (8009c0c <xTaskGetSchedulerState+0x38>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d102      	bne.n	8009bf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	607b      	str	r3, [r7, #4]
 8009bf4:	e001      	b.n	8009bfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009bfa:	687b      	ldr	r3, [r7, #4]
	}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bc80      	pop	{r7}
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	2000318c 	.word	0x2000318c
 8009c0c:	200031a8 	.word	0x200031a8

08009c10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d058      	beq.n	8009cd8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c26:	4b2f      	ldr	r3, [pc, #188]	@ (8009ce4 <xTaskPriorityDisinherit+0xd4>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d00b      	beq.n	8009c48 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	60fb      	str	r3, [r7, #12]
}
 8009c42:	bf00      	nop
 8009c44:	bf00      	nop
 8009c46:	e7fd      	b.n	8009c44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d10b      	bne.n	8009c68 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c54:	f383 8811 	msr	BASEPRI, r3
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	60bb      	str	r3, [r7, #8]
}
 8009c62:	bf00      	nop
 8009c64:	bf00      	nop
 8009c66:	e7fd      	b.n	8009c64 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c6c:	1e5a      	subs	r2, r3, #1
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d02c      	beq.n	8009cd8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d128      	bne.n	8009cd8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	3304      	adds	r3, #4
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fe fae8 	bl	8008260 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8009ce8 <xTaskPriorityDisinherit+0xd8>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d903      	bls.n	8009cb8 <xTaskPriorityDisinherit+0xa8>
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8009ce8 <xTaskPriorityDisinherit+0xd8>)
 8009cb6:	6013      	str	r3, [r2, #0]
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4413      	add	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4a09      	ldr	r2, [pc, #36]	@ (8009cec <xTaskPriorityDisinherit+0xdc>)
 8009cc6:	441a      	add	r2, r3
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	3304      	adds	r3, #4
 8009ccc:	4619      	mov	r1, r3
 8009cce:	4610      	mov	r0, r2
 8009cd0:	f7fe fa6b 	bl	80081aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009cd8:	697b      	ldr	r3, [r7, #20]
	}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3718      	adds	r7, #24
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20002cac 	.word	0x20002cac
 8009ce8:	20003188 	.word	0x20003188
 8009cec:	20002cb0 	.word	0x20002cb0

08009cf0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8009cfa:	f000 fd57 	bl	800a7ac <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8009cfe:	4b20      	ldr	r3, [pc, #128]	@ (8009d80 <ulTaskNotifyTake+0x90>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d113      	bne.n	8009d32 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8009d80 <ulTaskNotifyTake+0x90>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

				if( xTicksToWait > ( TickType_t ) 0 )
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00b      	beq.n	8009d32 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d1a:	2101      	movs	r1, #1
 8009d1c:	6838      	ldr	r0, [r7, #0]
 8009d1e:	f000 f8e1 	bl	8009ee4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009d22:	4b18      	ldr	r3, [pc, #96]	@ (8009d84 <ulTaskNotifyTake+0x94>)
 8009d24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009d32:	f000 fd6b 	bl	800a80c <vPortExitCritical>

		taskENTER_CRITICAL();
 8009d36:	f000 fd39 	bl	800a7ac <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8009d3a:	4b11      	ldr	r3, [pc, #68]	@ (8009d80 <ulTaskNotifyTake+0x90>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d42:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00e      	beq.n	8009d68 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d005      	beq.n	8009d5c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8009d50:	4b0b      	ldr	r3, [pc, #44]	@ (8009d80 <ulTaskNotifyTake+0x90>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8009d5a:	e005      	b.n	8009d68 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8009d5c:	4b08      	ldr	r3, [pc, #32]	@ (8009d80 <ulTaskNotifyTake+0x90>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	3a01      	subs	r2, #1
 8009d64:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d68:	4b05      	ldr	r3, [pc, #20]	@ (8009d80 <ulTaskNotifyTake+0x90>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
		}
		taskEXIT_CRITICAL();
 8009d72:	f000 fd4b 	bl	800a80c <vPortExitCritical>

		return ulReturn;
 8009d76:	68fb      	ldr	r3, [r7, #12]
	}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	20002cac 	.word	0x20002cac
 8009d84:	e000ed04 	.word	0xe000ed04

08009d88 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b08a      	sub	sp, #40	@ 0x28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	603b      	str	r3, [r7, #0]
 8009d94:	4613      	mov	r3, r2
 8009d96:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10b      	bne.n	8009dba <xTaskGenericNotify+0x32>
	__asm volatile
 8009da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da6:	f383 8811 	msr	BASEPRI, r3
 8009daa:	f3bf 8f6f 	isb	sy
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	61bb      	str	r3, [r7, #24]
}
 8009db4:	bf00      	nop
 8009db6:	bf00      	nop
 8009db8:	e7fd      	b.n	8009db6 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009dbe:	f000 fcf5 	bl	800a7ac <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d004      	beq.n	8009dd2 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009dc8:	6a3b      	ldr	r3, [r7, #32]
 8009dca:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009dd2:	6a3b      	ldr	r3, [r7, #32]
 8009dd4:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8009dd8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009dda:	6a3b      	ldr	r3, [r7, #32]
 8009ddc:	2202      	movs	r2, #2
 8009dde:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

			switch( eAction )
 8009de2:	79fb      	ldrb	r3, [r7, #7]
 8009de4:	2b04      	cmp	r3, #4
 8009de6:	d82e      	bhi.n	8009e46 <xTaskGenericNotify+0xbe>
 8009de8:	a201      	add	r2, pc, #4	@ (adr r2, 8009df0 <xTaskGenericNotify+0x68>)
 8009dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dee:	bf00      	nop
 8009df0:	08009e47 	.word	0x08009e47
 8009df4:	08009e05 	.word	0x08009e05
 8009df8:	08009e17 	.word	0x08009e17
 8009dfc:	08009e27 	.word	0x08009e27
 8009e00:	08009e31 	.word	0x08009e31
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009e04:	6a3b      	ldr	r3, [r7, #32]
 8009e06:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	431a      	orrs	r2, r3
 8009e0e:	6a3b      	ldr	r3, [r7, #32]
 8009e10:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8009e14:	e017      	b.n	8009e46 <xTaskGenericNotify+0xbe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009e16:	6a3b      	ldr	r3, [r7, #32]
 8009e18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e1c:	1c5a      	adds	r2, r3, #1
 8009e1e:	6a3b      	ldr	r3, [r7, #32]
 8009e20:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8009e24:	e00f      	b.n	8009e46 <xTaskGenericNotify+0xbe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009e26:	6a3b      	ldr	r3, [r7, #32]
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8009e2e:	e00a      	b.n	8009e46 <xTaskGenericNotify+0xbe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009e30:	7ffb      	ldrb	r3, [r7, #31]
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d004      	beq.n	8009e40 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009e36:	6a3b      	ldr	r3, [r7, #32]
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009e3e:	e001      	b.n	8009e44 <xTaskGenericNotify+0xbc>
						xReturn = pdFAIL;
 8009e40:	2300      	movs	r3, #0
 8009e42:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8009e44:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009e46:	7ffb      	ldrb	r3, [r7, #31]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d13b      	bne.n	8009ec4 <xTaskGenericNotify+0x13c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e4c:	6a3b      	ldr	r3, [r7, #32]
 8009e4e:	3304      	adds	r3, #4
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7fe fa05 	bl	8008260 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009e56:	6a3b      	ldr	r3, [r7, #32]
 8009e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8009ed4 <xTaskGenericNotify+0x14c>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d903      	bls.n	8009e6a <xTaskGenericNotify+0xe2>
 8009e62:	6a3b      	ldr	r3, [r7, #32]
 8009e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e66:	4a1b      	ldr	r2, [pc, #108]	@ (8009ed4 <xTaskGenericNotify+0x14c>)
 8009e68:	6013      	str	r3, [r2, #0]
 8009e6a:	6a3b      	ldr	r3, [r7, #32]
 8009e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e6e:	4613      	mov	r3, r2
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4a18      	ldr	r2, [pc, #96]	@ (8009ed8 <xTaskGenericNotify+0x150>)
 8009e78:	441a      	add	r2, r3
 8009e7a:	6a3b      	ldr	r3, [r7, #32]
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	4619      	mov	r1, r3
 8009e80:	4610      	mov	r0, r2
 8009e82:	f7fe f992 	bl	80081aa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009e86:	6a3b      	ldr	r3, [r7, #32]
 8009e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00b      	beq.n	8009ea6 <xTaskGenericNotify+0x11e>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	617b      	str	r3, [r7, #20]
}
 8009ea0:	bf00      	nop
 8009ea2:	bf00      	nop
 8009ea4:	e7fd      	b.n	8009ea2 <xTaskGenericNotify+0x11a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8009edc <xTaskGenericNotify+0x154>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d907      	bls.n	8009ec4 <xTaskGenericNotify+0x13c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8009ee0 <xTaskGenericNotify+0x158>)
 8009eb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009eba:	601a      	str	r2, [r3, #0]
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009ec4:	f000 fca2 	bl	800a80c <vPortExitCritical>

		return xReturn;
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3728      	adds	r7, #40	@ 0x28
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	20003188 	.word	0x20003188
 8009ed8:	20002cb0 	.word	0x20002cb0
 8009edc:	20002cac 	.word	0x20002cac
 8009ee0:	e000ed04 	.word	0xe000ed04

08009ee4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009eee:	4b21      	ldr	r3, [pc, #132]	@ (8009f74 <prvAddCurrentTaskToDelayedList+0x90>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ef4:	4b20      	ldr	r3, [pc, #128]	@ (8009f78 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	3304      	adds	r3, #4
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fe f9b0 	bl	8008260 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f06:	d10a      	bne.n	8009f1e <prvAddCurrentTaskToDelayedList+0x3a>
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d007      	beq.n	8009f1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8009f78 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3304      	adds	r3, #4
 8009f14:	4619      	mov	r1, r3
 8009f16:	4819      	ldr	r0, [pc, #100]	@ (8009f7c <prvAddCurrentTaskToDelayedList+0x98>)
 8009f18:	f7fe f947 	bl	80081aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f1c:	e026      	b.n	8009f6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4413      	add	r3, r2
 8009f24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f26:	4b14      	ldr	r3, [pc, #80]	@ (8009f78 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68ba      	ldr	r2, [r7, #8]
 8009f2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d209      	bcs.n	8009f4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f36:	4b12      	ldr	r3, [pc, #72]	@ (8009f80 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8009f78 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	3304      	adds	r3, #4
 8009f40:	4619      	mov	r1, r3
 8009f42:	4610      	mov	r0, r2
 8009f44:	f7fe f954 	bl	80081f0 <vListInsert>
}
 8009f48:	e010      	b.n	8009f6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8009f84 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8009f78 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	3304      	adds	r3, #4
 8009f54:	4619      	mov	r1, r3
 8009f56:	4610      	mov	r0, r2
 8009f58:	f7fe f94a 	bl	80081f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d202      	bcs.n	8009f6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009f66:	4a08      	ldr	r2, [pc, #32]	@ (8009f88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	6013      	str	r3, [r2, #0]
}
 8009f6c:	bf00      	nop
 8009f6e:	3710      	adds	r7, #16
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	20003184 	.word	0x20003184
 8009f78:	20002cac 	.word	0x20002cac
 8009f7c:	2000316c 	.word	0x2000316c
 8009f80:	2000313c 	.word	0x2000313c
 8009f84:	20003138 	.word	0x20003138
 8009f88:	200031a0 	.word	0x200031a0

08009f8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b08a      	sub	sp, #40	@ 0x28
 8009f90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009f92:	2300      	movs	r3, #0
 8009f94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009f96:	f000 fad9 	bl	800a54c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009f9a:	4b1d      	ldr	r3, [pc, #116]	@ (800a010 <xTimerCreateTimerTask+0x84>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d021      	beq.n	8009fe6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009faa:	1d3a      	adds	r2, r7, #4
 8009fac:	f107 0108 	add.w	r1, r7, #8
 8009fb0:	f107 030c 	add.w	r3, r7, #12
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7fe f8b3 	bl	8008120 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009fba:	6879      	ldr	r1, [r7, #4]
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	9202      	str	r2, [sp, #8]
 8009fc2:	9301      	str	r3, [sp, #4]
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	2300      	movs	r3, #0
 8009fca:	460a      	mov	r2, r1
 8009fcc:	4911      	ldr	r1, [pc, #68]	@ (800a014 <xTimerCreateTimerTask+0x88>)
 8009fce:	4812      	ldr	r0, [pc, #72]	@ (800a018 <xTimerCreateTimerTask+0x8c>)
 8009fd0:	f7fe ff4a 	bl	8008e68 <xTaskCreateStatic>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	4a11      	ldr	r2, [pc, #68]	@ (800a01c <xTimerCreateTimerTask+0x90>)
 8009fd8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009fda:	4b10      	ldr	r3, [pc, #64]	@ (800a01c <xTimerCreateTimerTask+0x90>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10b      	bne.n	800a004 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	613b      	str	r3, [r7, #16]
}
 8009ffe:	bf00      	nop
 800a000:	bf00      	nop
 800a002:	e7fd      	b.n	800a000 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a004:	697b      	ldr	r3, [r7, #20]
}
 800a006:	4618      	mov	r0, r3
 800a008:	3718      	adds	r7, #24
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	200031dc 	.word	0x200031dc
 800a014:	0800ca7c 	.word	0x0800ca7c
 800a018:	0800a141 	.word	0x0800a141
 800a01c:	200031e0 	.word	0x200031e0

0800a020 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b08a      	sub	sp, #40	@ 0x28
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
 800a02c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a02e:	2300      	movs	r3, #0
 800a030:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d10b      	bne.n	800a050 <xTimerGenericCommand+0x30>
	__asm volatile
 800a038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a03c:	f383 8811 	msr	BASEPRI, r3
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	623b      	str	r3, [r7, #32]
}
 800a04a:	bf00      	nop
 800a04c:	bf00      	nop
 800a04e:	e7fd      	b.n	800a04c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a050:	4b19      	ldr	r3, [pc, #100]	@ (800a0b8 <xTimerGenericCommand+0x98>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d02a      	beq.n	800a0ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	2b05      	cmp	r3, #5
 800a068:	dc18      	bgt.n	800a09c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a06a:	f7ff fdb3 	bl	8009bd4 <xTaskGetSchedulerState>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b02      	cmp	r3, #2
 800a072:	d109      	bne.n	800a088 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a074:	4b10      	ldr	r3, [pc, #64]	@ (800a0b8 <xTimerGenericCommand+0x98>)
 800a076:	6818      	ldr	r0, [r3, #0]
 800a078:	f107 0110 	add.w	r1, r7, #16
 800a07c:	2300      	movs	r3, #0
 800a07e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a080:	f7fe fa60 	bl	8008544 <xQueueGenericSend>
 800a084:	6278      	str	r0, [r7, #36]	@ 0x24
 800a086:	e012      	b.n	800a0ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a088:	4b0b      	ldr	r3, [pc, #44]	@ (800a0b8 <xTimerGenericCommand+0x98>)
 800a08a:	6818      	ldr	r0, [r3, #0]
 800a08c:	f107 0110 	add.w	r1, r7, #16
 800a090:	2300      	movs	r3, #0
 800a092:	2200      	movs	r2, #0
 800a094:	f7fe fa56 	bl	8008544 <xQueueGenericSend>
 800a098:	6278      	str	r0, [r7, #36]	@ 0x24
 800a09a:	e008      	b.n	800a0ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a09c:	4b06      	ldr	r3, [pc, #24]	@ (800a0b8 <xTimerGenericCommand+0x98>)
 800a09e:	6818      	ldr	r0, [r3, #0]
 800a0a0:	f107 0110 	add.w	r1, r7, #16
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	683a      	ldr	r2, [r7, #0]
 800a0a8:	f7fe fb4e 	bl	8008748 <xQueueGenericSendFromISR>
 800a0ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3728      	adds	r7, #40	@ 0x28
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	200031dc 	.word	0x200031dc

0800a0bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b088      	sub	sp, #32
 800a0c0:	af02      	add	r7, sp, #8
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0c6:	4b1d      	ldr	r3, [pc, #116]	@ (800a13c <prvProcessExpiredTimer+0x80>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	3304      	adds	r3, #4
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7fe f8c3 	bl	8008260 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	69db      	ldr	r3, [r3, #28]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d123      	bne.n	800a12a <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	699a      	ldr	r2, [r3, #24]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	18d1      	adds	r1, r2, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	683a      	ldr	r2, [r7, #0]
 800a0ee:	6978      	ldr	r0, [r7, #20]
 800a0f0:	f000 f8cc 	bl	800a28c <prvInsertTimerInActiveList>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d017      	beq.n	800a12a <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	9300      	str	r3, [sp, #0]
 800a0fe:	2300      	movs	r3, #0
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	2100      	movs	r1, #0
 800a104:	6978      	ldr	r0, [r7, #20]
 800a106:	f7ff ff8b 	bl	800a020 <xTimerGenericCommand>
 800a10a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10b      	bne.n	800a12a <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	60fb      	str	r3, [r7, #12]
}
 800a124:	bf00      	nop
 800a126:	bf00      	nop
 800a128:	e7fd      	b.n	800a126 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a12e:	6978      	ldr	r0, [r7, #20]
 800a130:	4798      	blx	r3
}
 800a132:	bf00      	nop
 800a134:	3718      	adds	r7, #24
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	200031d4 	.word	0x200031d4

0800a140 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a148:	f107 0308 	add.w	r3, r7, #8
 800a14c:	4618      	mov	r0, r3
 800a14e:	f000 f859 	bl	800a204 <prvGetNextExpireTime>
 800a152:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	4619      	mov	r1, r3
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f000 f805 	bl	800a168 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a15e:	f000 f8d7 	bl	800a310 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a162:	bf00      	nop
 800a164:	e7f0      	b.n	800a148 <prvTimerTask+0x8>
	...

0800a168 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a172:	f7ff f8d5 	bl	8009320 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a176:	f107 0308 	add.w	r3, r7, #8
 800a17a:	4618      	mov	r0, r3
 800a17c:	f000 f866 	bl	800a24c <prvSampleTimeNow>
 800a180:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d130      	bne.n	800a1ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10a      	bne.n	800a1a4 <prvProcessTimerOrBlockTask+0x3c>
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	429a      	cmp	r2, r3
 800a194:	d806      	bhi.n	800a1a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a196:	f7ff f8d1 	bl	800933c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a19a:	68f9      	ldr	r1, [r7, #12]
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7ff ff8d 	bl	800a0bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a1a2:	e024      	b.n	800a1ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d008      	beq.n	800a1bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a1aa:	4b13      	ldr	r3, [pc, #76]	@ (800a1f8 <prvProcessTimerOrBlockTask+0x90>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	bf0c      	ite	eq
 800a1b4:	2301      	moveq	r3, #1
 800a1b6:	2300      	movne	r3, #0
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a1bc:	4b0f      	ldr	r3, [pc, #60]	@ (800a1fc <prvProcessTimerOrBlockTask+0x94>)
 800a1be:	6818      	ldr	r0, [r3, #0]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	683a      	ldr	r2, [r7, #0]
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	f7fe fe19 	bl	8008e00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a1ce:	f7ff f8b5 	bl	800933c <xTaskResumeAll>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10a      	bne.n	800a1ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a1d8:	4b09      	ldr	r3, [pc, #36]	@ (800a200 <prvProcessTimerOrBlockTask+0x98>)
 800a1da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1de:	601a      	str	r2, [r3, #0]
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	f3bf 8f6f 	isb	sy
}
 800a1e8:	e001      	b.n	800a1ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a1ea:	f7ff f8a7 	bl	800933c <xTaskResumeAll>
}
 800a1ee:	bf00      	nop
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	200031d8 	.word	0x200031d8
 800a1fc:	200031dc 	.word	0x200031dc
 800a200:	e000ed04 	.word	0xe000ed04

0800a204 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a20c:	4b0e      	ldr	r3, [pc, #56]	@ (800a248 <prvGetNextExpireTime+0x44>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	bf0c      	ite	eq
 800a216:	2301      	moveq	r3, #1
 800a218:	2300      	movne	r3, #0
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	461a      	mov	r2, r3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d105      	bne.n	800a236 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a22a:	4b07      	ldr	r3, [pc, #28]	@ (800a248 <prvGetNextExpireTime+0x44>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	60fb      	str	r3, [r7, #12]
 800a234:	e001      	b.n	800a23a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a236:	2300      	movs	r3, #0
 800a238:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a23a:	68fb      	ldr	r3, [r7, #12]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3714      	adds	r7, #20
 800a240:	46bd      	mov	sp, r7
 800a242:	bc80      	pop	{r7}
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	200031d4 	.word	0x200031d4

0800a24c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a254:	f7ff f910 	bl	8009478 <xTaskGetTickCount>
 800a258:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a25a:	4b0b      	ldr	r3, [pc, #44]	@ (800a288 <prvSampleTimeNow+0x3c>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	429a      	cmp	r2, r3
 800a262:	d205      	bcs.n	800a270 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a264:	f000 f910 	bl	800a488 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	601a      	str	r2, [r3, #0]
 800a26e:	e002      	b.n	800a276 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a276:	4a04      	ldr	r2, [pc, #16]	@ (800a288 <prvSampleTimeNow+0x3c>)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a27c:	68fb      	ldr	r3, [r7, #12]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	200031e4 	.word	0x200031e4

0800a28c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b086      	sub	sp, #24
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
 800a298:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a29a:	2300      	movs	r3, #0
 800a29c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	68ba      	ldr	r2, [r7, #8]
 800a2a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d812      	bhi.n	800a2d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	1ad2      	subs	r2, r2, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	699b      	ldr	r3, [r3, #24]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d302      	bcc.n	800a2c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	617b      	str	r3, [r7, #20]
 800a2c4:	e01b      	b.n	800a2fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a2c6:	4b10      	ldr	r3, [pc, #64]	@ (800a308 <prvInsertTimerInActiveList+0x7c>)
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	3304      	adds	r3, #4
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	f7fd ff8d 	bl	80081f0 <vListInsert>
 800a2d6:	e012      	b.n	800a2fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d206      	bcs.n	800a2ee <prvInsertTimerInActiveList+0x62>
 800a2e0:	68ba      	ldr	r2, [r7, #8]
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d302      	bcc.n	800a2ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	617b      	str	r3, [r7, #20]
 800a2ec:	e007      	b.n	800a2fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2ee:	4b07      	ldr	r3, [pc, #28]	@ (800a30c <prvInsertTimerInActiveList+0x80>)
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	3304      	adds	r3, #4
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	4610      	mov	r0, r2
 800a2fa:	f7fd ff79 	bl	80081f0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a2fe:	697b      	ldr	r3, [r7, #20]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3718      	adds	r7, #24
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	200031d8 	.word	0x200031d8
 800a30c:	200031d4 	.word	0x200031d4

0800a310 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b08e      	sub	sp, #56	@ 0x38
 800a314:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a316:	e0a5      	b.n	800a464 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	da19      	bge.n	800a352 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a31e:	1d3b      	adds	r3, r7, #4
 800a320:	3304      	adds	r3, #4
 800a322:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10b      	bne.n	800a342 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	61fb      	str	r3, [r7, #28]
}
 800a33c:	bf00      	nop
 800a33e:	bf00      	nop
 800a340:	e7fd      	b.n	800a33e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a348:	6850      	ldr	r0, [r2, #4]
 800a34a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a34c:	6892      	ldr	r2, [r2, #8]
 800a34e:	4611      	mov	r1, r2
 800a350:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2b00      	cmp	r3, #0
 800a356:	f2c0 8085 	blt.w	800a464 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a360:	695b      	ldr	r3, [r3, #20]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d004      	beq.n	800a370 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a368:	3304      	adds	r3, #4
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7fd ff78 	bl	8008260 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a370:	463b      	mov	r3, r7
 800a372:	4618      	mov	r0, r3
 800a374:	f7ff ff6a 	bl	800a24c <prvSampleTimeNow>
 800a378:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2b09      	cmp	r3, #9
 800a37e:	d86c      	bhi.n	800a45a <prvProcessReceivedCommands+0x14a>
 800a380:	a201      	add	r2, pc, #4	@ (adr r2, 800a388 <prvProcessReceivedCommands+0x78>)
 800a382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a386:	bf00      	nop
 800a388:	0800a3b1 	.word	0x0800a3b1
 800a38c:	0800a3b1 	.word	0x0800a3b1
 800a390:	0800a3b1 	.word	0x0800a3b1
 800a394:	0800a45b 	.word	0x0800a45b
 800a398:	0800a40f 	.word	0x0800a40f
 800a39c:	0800a449 	.word	0x0800a449
 800a3a0:	0800a3b1 	.word	0x0800a3b1
 800a3a4:	0800a3b1 	.word	0x0800a3b1
 800a3a8:	0800a45b 	.word	0x0800a45b
 800a3ac:	0800a40f 	.word	0x0800a40f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a3b0:	68ba      	ldr	r2, [r7, #8]
 800a3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	18d1      	adds	r1, r2, r3
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3be:	f7ff ff65 	bl	800a28c <prvInsertTimerInActiveList>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d04a      	beq.n	800a45e <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3ce:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3d2:	69db      	ldr	r3, [r3, #28]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d142      	bne.n	800a45e <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a3d8:	68ba      	ldr	r2, [r7, #8]
 800a3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3dc:	699b      	ldr	r3, [r3, #24]
 800a3de:	441a      	add	r2, r3
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	9300      	str	r3, [sp, #0]
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3ea:	f7ff fe19 	bl	800a020 <xTimerGenericCommand>
 800a3ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d133      	bne.n	800a45e <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800a3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	61bb      	str	r3, [r7, #24]
}
 800a408:	bf00      	nop
 800a40a:	bf00      	nop
 800a40c:	e7fd      	b.n	800a40a <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a40e:	68ba      	ldr	r2, [r7, #8]
 800a410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a412:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a416:	699b      	ldr	r3, [r3, #24]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10b      	bne.n	800a434 <prvProcessReceivedCommands+0x124>
	__asm volatile
 800a41c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a420:	f383 8811 	msr	BASEPRI, r3
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	617b      	str	r3, [r7, #20]
}
 800a42e:	bf00      	nop
 800a430:	bf00      	nop
 800a432:	e7fd      	b.n	800a430 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a436:	699a      	ldr	r2, [r3, #24]
 800a438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43a:	18d1      	adds	r1, r2, r3
 800a43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a440:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a442:	f7ff ff23 	bl	800a28c <prvInsertTimerInActiveList>
					break;
 800a446:	e00d      	b.n	800a464 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a44a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d107      	bne.n	800a462 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800a452:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a454:	f000 fb74 	bl	800ab40 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a458:	e003      	b.n	800a462 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800a45a:	bf00      	nop
 800a45c:	e002      	b.n	800a464 <prvProcessReceivedCommands+0x154>
					break;
 800a45e:	bf00      	nop
 800a460:	e000      	b.n	800a464 <prvProcessReceivedCommands+0x154>
					break;
 800a462:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a464:	4b07      	ldr	r3, [pc, #28]	@ (800a484 <prvProcessReceivedCommands+0x174>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	1d39      	adds	r1, r7, #4
 800a46a:	2200      	movs	r2, #0
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fe fa07 	bl	8008880 <xQueueReceive>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	f47f af4f 	bne.w	800a318 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a47a:	bf00      	nop
 800a47c:	bf00      	nop
 800a47e:	3730      	adds	r7, #48	@ 0x30
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	200031dc 	.word	0x200031dc

0800a488 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b088      	sub	sp, #32
 800a48c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a48e:	e046      	b.n	800a51e <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a490:	4b2c      	ldr	r3, [pc, #176]	@ (800a544 <prvSwitchTimerLists+0xbc>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a49a:	4b2a      	ldr	r3, [pc, #168]	@ (800a544 <prvSwitchTimerLists+0xbc>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	3304      	adds	r3, #4
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7fd fed9 	bl	8008260 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	69db      	ldr	r3, [r3, #28]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d12f      	bne.n	800a51e <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	693a      	ldr	r2, [r7, #16]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d90e      	bls.n	800a4ee <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	68ba      	ldr	r2, [r7, #8]
 800a4d4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4dc:	4b19      	ldr	r3, [pc, #100]	@ (800a544 <prvSwitchTimerLists+0xbc>)
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	4610      	mov	r0, r2
 800a4e8:	f7fd fe82 	bl	80081f0 <vListInsert>
 800a4ec:	e017      	b.n	800a51e <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	9300      	str	r3, [sp, #0]
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f7ff fd91 	bl	800a020 <xTimerGenericCommand>
 800a4fe:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10b      	bne.n	800a51e <prvSwitchTimerLists+0x96>
	__asm volatile
 800a506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	603b      	str	r3, [r7, #0]
}
 800a518:	bf00      	nop
 800a51a:	bf00      	nop
 800a51c:	e7fd      	b.n	800a51a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a51e:	4b09      	ldr	r3, [pc, #36]	@ (800a544 <prvSwitchTimerLists+0xbc>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1b3      	bne.n	800a490 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a528:	4b06      	ldr	r3, [pc, #24]	@ (800a544 <prvSwitchTimerLists+0xbc>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a52e:	4b06      	ldr	r3, [pc, #24]	@ (800a548 <prvSwitchTimerLists+0xc0>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a04      	ldr	r2, [pc, #16]	@ (800a544 <prvSwitchTimerLists+0xbc>)
 800a534:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a536:	4a04      	ldr	r2, [pc, #16]	@ (800a548 <prvSwitchTimerLists+0xc0>)
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	6013      	str	r3, [r2, #0]
}
 800a53c:	bf00      	nop
 800a53e:	3718      	adds	r7, #24
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	200031d4 	.word	0x200031d4
 800a548:	200031d8 	.word	0x200031d8

0800a54c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a552:	f000 f92b 	bl	800a7ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a556:	4b15      	ldr	r3, [pc, #84]	@ (800a5ac <prvCheckForValidListAndQueue+0x60>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d120      	bne.n	800a5a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a55e:	4814      	ldr	r0, [pc, #80]	@ (800a5b0 <prvCheckForValidListAndQueue+0x64>)
 800a560:	f7fd fdf8 	bl	8008154 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a564:	4813      	ldr	r0, [pc, #76]	@ (800a5b4 <prvCheckForValidListAndQueue+0x68>)
 800a566:	f7fd fdf5 	bl	8008154 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a56a:	4b13      	ldr	r3, [pc, #76]	@ (800a5b8 <prvCheckForValidListAndQueue+0x6c>)
 800a56c:	4a10      	ldr	r2, [pc, #64]	@ (800a5b0 <prvCheckForValidListAndQueue+0x64>)
 800a56e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a570:	4b12      	ldr	r3, [pc, #72]	@ (800a5bc <prvCheckForValidListAndQueue+0x70>)
 800a572:	4a10      	ldr	r2, [pc, #64]	@ (800a5b4 <prvCheckForValidListAndQueue+0x68>)
 800a574:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a576:	2300      	movs	r3, #0
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	4b11      	ldr	r3, [pc, #68]	@ (800a5c0 <prvCheckForValidListAndQueue+0x74>)
 800a57c:	4a11      	ldr	r2, [pc, #68]	@ (800a5c4 <prvCheckForValidListAndQueue+0x78>)
 800a57e:	2110      	movs	r1, #16
 800a580:	200a      	movs	r0, #10
 800a582:	f7fd ff01 	bl	8008388 <xQueueGenericCreateStatic>
 800a586:	4603      	mov	r3, r0
 800a588:	4a08      	ldr	r2, [pc, #32]	@ (800a5ac <prvCheckForValidListAndQueue+0x60>)
 800a58a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a58c:	4b07      	ldr	r3, [pc, #28]	@ (800a5ac <prvCheckForValidListAndQueue+0x60>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d005      	beq.n	800a5a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a594:	4b05      	ldr	r3, [pc, #20]	@ (800a5ac <prvCheckForValidListAndQueue+0x60>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	490b      	ldr	r1, [pc, #44]	@ (800a5c8 <prvCheckForValidListAndQueue+0x7c>)
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fe fc08 	bl	8008db0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a5a0:	f000 f934 	bl	800a80c <vPortExitCritical>
}
 800a5a4:	bf00      	nop
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	200031dc 	.word	0x200031dc
 800a5b0:	200031ac 	.word	0x200031ac
 800a5b4:	200031c0 	.word	0x200031c0
 800a5b8:	200031d4 	.word	0x200031d4
 800a5bc:	200031d8 	.word	0x200031d8
 800a5c0:	20003288 	.word	0x20003288
 800a5c4:	200031e8 	.word	0x200031e8
 800a5c8:	0800ca84 	.word	0x0800ca84

0800a5cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	3b04      	subs	r3, #4
 800a5dc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a5e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	3b04      	subs	r3, #4
 800a5ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	f023 0201 	bic.w	r2, r3, #1
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	3b04      	subs	r3, #4
 800a5fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a5fc:	4a08      	ldr	r2, [pc, #32]	@ (800a620 <pxPortInitialiseStack+0x54>)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	3b14      	subs	r3, #20
 800a606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	3b20      	subs	r3, #32
 800a612:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a614:	68fb      	ldr	r3, [r7, #12]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3714      	adds	r7, #20
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bc80      	pop	{r7}
 800a61e:	4770      	bx	lr
 800a620:	0800a625 	.word	0x0800a625

0800a624 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a62a:	2300      	movs	r3, #0
 800a62c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a62e:	4b12      	ldr	r3, [pc, #72]	@ (800a678 <prvTaskExitError+0x54>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a636:	d00b      	beq.n	800a650 <prvTaskExitError+0x2c>
	__asm volatile
 800a638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a63c:	f383 8811 	msr	BASEPRI, r3
 800a640:	f3bf 8f6f 	isb	sy
 800a644:	f3bf 8f4f 	dsb	sy
 800a648:	60fb      	str	r3, [r7, #12]
}
 800a64a:	bf00      	nop
 800a64c:	bf00      	nop
 800a64e:	e7fd      	b.n	800a64c <prvTaskExitError+0x28>
	__asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	60bb      	str	r3, [r7, #8]
}
 800a662:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a664:	bf00      	nop
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d0fc      	beq.n	800a666 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a66c:	bf00      	nop
 800a66e:	bf00      	nop
 800a670:	3714      	adds	r7, #20
 800a672:	46bd      	mov	sp, r7
 800a674:	bc80      	pop	{r7}
 800a676:	4770      	bx	lr
 800a678:	2000102c 	.word	0x2000102c
 800a67c:	00000000 	.word	0x00000000

0800a680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a680:	4b07      	ldr	r3, [pc, #28]	@ (800a6a0 <pxCurrentTCBConst2>)
 800a682:	6819      	ldr	r1, [r3, #0]
 800a684:	6808      	ldr	r0, [r1, #0]
 800a686:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a68a:	f380 8809 	msr	PSP, r0
 800a68e:	f3bf 8f6f 	isb	sy
 800a692:	f04f 0000 	mov.w	r0, #0
 800a696:	f380 8811 	msr	BASEPRI, r0
 800a69a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a69e:	4770      	bx	lr

0800a6a0 <pxCurrentTCBConst2>:
 800a6a0:	20002cac 	.word	0x20002cac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a6a4:	bf00      	nop
 800a6a6:	bf00      	nop

0800a6a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a6a8:	4806      	ldr	r0, [pc, #24]	@ (800a6c4 <prvPortStartFirstTask+0x1c>)
 800a6aa:	6800      	ldr	r0, [r0, #0]
 800a6ac:	6800      	ldr	r0, [r0, #0]
 800a6ae:	f380 8808 	msr	MSP, r0
 800a6b2:	b662      	cpsie	i
 800a6b4:	b661      	cpsie	f
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	df00      	svc	0
 800a6c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a6c2:	bf00      	nop
 800a6c4:	e000ed08 	.word	0xe000ed08

0800a6c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a6ce:	4b32      	ldr	r3, [pc, #200]	@ (800a798 <xPortStartScheduler+0xd0>)
 800a6d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	22ff      	movs	r2, #255	@ 0xff
 800a6de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6e8:	78fb      	ldrb	r3, [r7, #3]
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a6f0:	b2da      	uxtb	r2, r3
 800a6f2:	4b2a      	ldr	r3, [pc, #168]	@ (800a79c <xPortStartScheduler+0xd4>)
 800a6f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a6f6:	4b2a      	ldr	r3, [pc, #168]	@ (800a7a0 <xPortStartScheduler+0xd8>)
 800a6f8:	2207      	movs	r2, #7
 800a6fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6fc:	e009      	b.n	800a712 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a6fe:	4b28      	ldr	r3, [pc, #160]	@ (800a7a0 <xPortStartScheduler+0xd8>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	3b01      	subs	r3, #1
 800a704:	4a26      	ldr	r2, [pc, #152]	@ (800a7a0 <xPortStartScheduler+0xd8>)
 800a706:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a708:	78fb      	ldrb	r3, [r7, #3]
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	005b      	lsls	r3, r3, #1
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a712:	78fb      	ldrb	r3, [r7, #3]
 800a714:	b2db      	uxtb	r3, r3
 800a716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a71a:	2b80      	cmp	r3, #128	@ 0x80
 800a71c:	d0ef      	beq.n	800a6fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a71e:	4b20      	ldr	r3, [pc, #128]	@ (800a7a0 <xPortStartScheduler+0xd8>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f1c3 0307 	rsb	r3, r3, #7
 800a726:	2b04      	cmp	r3, #4
 800a728:	d00b      	beq.n	800a742 <xPortStartScheduler+0x7a>
	__asm volatile
 800a72a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72e:	f383 8811 	msr	BASEPRI, r3
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	60bb      	str	r3, [r7, #8]
}
 800a73c:	bf00      	nop
 800a73e:	bf00      	nop
 800a740:	e7fd      	b.n	800a73e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a742:	4b17      	ldr	r3, [pc, #92]	@ (800a7a0 <xPortStartScheduler+0xd8>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	021b      	lsls	r3, r3, #8
 800a748:	4a15      	ldr	r2, [pc, #84]	@ (800a7a0 <xPortStartScheduler+0xd8>)
 800a74a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a74c:	4b14      	ldr	r3, [pc, #80]	@ (800a7a0 <xPortStartScheduler+0xd8>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a754:	4a12      	ldr	r2, [pc, #72]	@ (800a7a0 <xPortStartScheduler+0xd8>)
 800a756:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a760:	4b10      	ldr	r3, [pc, #64]	@ (800a7a4 <xPortStartScheduler+0xdc>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a0f      	ldr	r2, [pc, #60]	@ (800a7a4 <xPortStartScheduler+0xdc>)
 800a766:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a76a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a76c:	4b0d      	ldr	r3, [pc, #52]	@ (800a7a4 <xPortStartScheduler+0xdc>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a0c      	ldr	r2, [pc, #48]	@ (800a7a4 <xPortStartScheduler+0xdc>)
 800a772:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a776:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a778:	f000 f8b8 	bl	800a8ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a77c:	4b0a      	ldr	r3, [pc, #40]	@ (800a7a8 <xPortStartScheduler+0xe0>)
 800a77e:	2200      	movs	r2, #0
 800a780:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a782:	f7ff ff91 	bl	800a6a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a786:	f7fe ff61 	bl	800964c <vTaskSwitchContext>
	prvTaskExitError();
 800a78a:	f7ff ff4b 	bl	800a624 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	e000e400 	.word	0xe000e400
 800a79c:	200032d8 	.word	0x200032d8
 800a7a0:	200032dc 	.word	0x200032dc
 800a7a4:	e000ed20 	.word	0xe000ed20
 800a7a8:	2000102c 	.word	0x2000102c

0800a7ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	607b      	str	r3, [r7, #4]
}
 800a7c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a7c6:	4b0f      	ldr	r3, [pc, #60]	@ (800a804 <vPortEnterCritical+0x58>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	4a0d      	ldr	r2, [pc, #52]	@ (800a804 <vPortEnterCritical+0x58>)
 800a7ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a7d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a804 <vPortEnterCritical+0x58>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d110      	bne.n	800a7fa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a7d8:	4b0b      	ldr	r3, [pc, #44]	@ (800a808 <vPortEnterCritical+0x5c>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00b      	beq.n	800a7fa <vPortEnterCritical+0x4e>
	__asm volatile
 800a7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e6:	f383 8811 	msr	BASEPRI, r3
 800a7ea:	f3bf 8f6f 	isb	sy
 800a7ee:	f3bf 8f4f 	dsb	sy
 800a7f2:	603b      	str	r3, [r7, #0]
}
 800a7f4:	bf00      	nop
 800a7f6:	bf00      	nop
 800a7f8:	e7fd      	b.n	800a7f6 <vPortEnterCritical+0x4a>
	}
}
 800a7fa:	bf00      	nop
 800a7fc:	370c      	adds	r7, #12
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bc80      	pop	{r7}
 800a802:	4770      	bx	lr
 800a804:	2000102c 	.word	0x2000102c
 800a808:	e000ed04 	.word	0xe000ed04

0800a80c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a812:	4b12      	ldr	r3, [pc, #72]	@ (800a85c <vPortExitCritical+0x50>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d10b      	bne.n	800a832 <vPortExitCritical+0x26>
	__asm volatile
 800a81a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	607b      	str	r3, [r7, #4]
}
 800a82c:	bf00      	nop
 800a82e:	bf00      	nop
 800a830:	e7fd      	b.n	800a82e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a832:	4b0a      	ldr	r3, [pc, #40]	@ (800a85c <vPortExitCritical+0x50>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	3b01      	subs	r3, #1
 800a838:	4a08      	ldr	r2, [pc, #32]	@ (800a85c <vPortExitCritical+0x50>)
 800a83a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a83c:	4b07      	ldr	r3, [pc, #28]	@ (800a85c <vPortExitCritical+0x50>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d105      	bne.n	800a850 <vPortExitCritical+0x44>
 800a844:	2300      	movs	r3, #0
 800a846:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	f383 8811 	msr	BASEPRI, r3
}
 800a84e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a850:	bf00      	nop
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	bc80      	pop	{r7}
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	2000102c 	.word	0x2000102c

0800a860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a860:	f3ef 8009 	mrs	r0, PSP
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	4b0d      	ldr	r3, [pc, #52]	@ (800a8a0 <pxCurrentTCBConst>)
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a870:	6010      	str	r0, [r2, #0]
 800a872:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a876:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a87a:	f380 8811 	msr	BASEPRI, r0
 800a87e:	f7fe fee5 	bl	800964c <vTaskSwitchContext>
 800a882:	f04f 0000 	mov.w	r0, #0
 800a886:	f380 8811 	msr	BASEPRI, r0
 800a88a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a88e:	6819      	ldr	r1, [r3, #0]
 800a890:	6808      	ldr	r0, [r1, #0]
 800a892:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a896:	f380 8809 	msr	PSP, r0
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	4770      	bx	lr

0800a8a0 <pxCurrentTCBConst>:
 800a8a0:	20002cac 	.word	0x20002cac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a8a4:	bf00      	nop
 800a8a6:	bf00      	nop

0800a8a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	607b      	str	r3, [r7, #4]
}
 800a8c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a8c2:	f7fe fde7 	bl	8009494 <xTaskIncrementTick>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d003      	beq.n	800a8d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a8cc:	4b06      	ldr	r3, [pc, #24]	@ (800a8e8 <SysTick_Handler+0x40>)
 800a8ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8d2:	601a      	str	r2, [r3, #0]
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	f383 8811 	msr	BASEPRI, r3
}
 800a8de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a8e0:	bf00      	nop
 800a8e2:	3708      	adds	r7, #8
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	e000ed04 	.word	0xe000ed04

0800a8ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a8f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a91c <vPortSetupTimerInterrupt+0x30>)
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a8f6:	4b0a      	ldr	r3, [pc, #40]	@ (800a920 <vPortSetupTimerInterrupt+0x34>)
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8fc:	4b09      	ldr	r3, [pc, #36]	@ (800a924 <vPortSetupTimerInterrupt+0x38>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a09      	ldr	r2, [pc, #36]	@ (800a928 <vPortSetupTimerInterrupt+0x3c>)
 800a902:	fba2 2303 	umull	r2, r3, r2, r3
 800a906:	099b      	lsrs	r3, r3, #6
 800a908:	4a08      	ldr	r2, [pc, #32]	@ (800a92c <vPortSetupTimerInterrupt+0x40>)
 800a90a:	3b01      	subs	r3, #1
 800a90c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a90e:	4b03      	ldr	r3, [pc, #12]	@ (800a91c <vPortSetupTimerInterrupt+0x30>)
 800a910:	2207      	movs	r2, #7
 800a912:	601a      	str	r2, [r3, #0]
}
 800a914:	bf00      	nop
 800a916:	46bd      	mov	sp, r7
 800a918:	bc80      	pop	{r7}
 800a91a:	4770      	bx	lr
 800a91c:	e000e010 	.word	0xe000e010
 800a920:	e000e018 	.word	0xe000e018
 800a924:	2000101c 	.word	0x2000101c
 800a928:	10624dd3 	.word	0x10624dd3
 800a92c:	e000e014 	.word	0xe000e014

0800a930 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a930:	b480      	push	{r7}
 800a932:	b085      	sub	sp, #20
 800a934:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a936:	f3ef 8305 	mrs	r3, IPSR
 800a93a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2b0f      	cmp	r3, #15
 800a940:	d915      	bls.n	800a96e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a942:	4a17      	ldr	r2, [pc, #92]	@ (800a9a0 <vPortValidateInterruptPriority+0x70>)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	4413      	add	r3, r2
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a94c:	4b15      	ldr	r3, [pc, #84]	@ (800a9a4 <vPortValidateInterruptPriority+0x74>)
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	7afa      	ldrb	r2, [r7, #11]
 800a952:	429a      	cmp	r2, r3
 800a954:	d20b      	bcs.n	800a96e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a95a:	f383 8811 	msr	BASEPRI, r3
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	607b      	str	r3, [r7, #4]
}
 800a968:	bf00      	nop
 800a96a:	bf00      	nop
 800a96c:	e7fd      	b.n	800a96a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a96e:	4b0e      	ldr	r3, [pc, #56]	@ (800a9a8 <vPortValidateInterruptPriority+0x78>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a976:	4b0d      	ldr	r3, [pc, #52]	@ (800a9ac <vPortValidateInterruptPriority+0x7c>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d90b      	bls.n	800a996 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	603b      	str	r3, [r7, #0]
}
 800a990:	bf00      	nop
 800a992:	bf00      	nop
 800a994:	e7fd      	b.n	800a992 <vPortValidateInterruptPriority+0x62>
	}
 800a996:	bf00      	nop
 800a998:	3714      	adds	r7, #20
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bc80      	pop	{r7}
 800a99e:	4770      	bx	lr
 800a9a0:	e000e3f0 	.word	0xe000e3f0
 800a9a4:	200032d8 	.word	0x200032d8
 800a9a8:	e000ed0c 	.word	0xe000ed0c
 800a9ac:	200032dc 	.word	0x200032dc

0800a9b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b08a      	sub	sp, #40	@ 0x28
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a9bc:	f7fe fcb0 	bl	8009320 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a9c0:	4b5a      	ldr	r3, [pc, #360]	@ (800ab2c <pvPortMalloc+0x17c>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d101      	bne.n	800a9cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a9c8:	f000 f920 	bl	800ac0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a9cc:	4b58      	ldr	r3, [pc, #352]	@ (800ab30 <pvPortMalloc+0x180>)
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f040 8090 	bne.w	800aafa <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d01e      	beq.n	800aa1e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a9e0:	2208      	movs	r2, #8
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f003 0307 	and.w	r3, r3, #7
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d015      	beq.n	800aa1e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f023 0307 	bic.w	r3, r3, #7
 800a9f8:	3308      	adds	r3, #8
 800a9fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f003 0307 	and.w	r3, r3, #7
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d00b      	beq.n	800aa1e <pvPortMalloc+0x6e>
	__asm volatile
 800aa06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0a:	f383 8811 	msr	BASEPRI, r3
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f3bf 8f4f 	dsb	sy
 800aa16:	617b      	str	r3, [r7, #20]
}
 800aa18:	bf00      	nop
 800aa1a:	bf00      	nop
 800aa1c:	e7fd      	b.n	800aa1a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d06a      	beq.n	800aafa <pvPortMalloc+0x14a>
 800aa24:	4b43      	ldr	r3, [pc, #268]	@ (800ab34 <pvPortMalloc+0x184>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d865      	bhi.n	800aafa <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa2e:	4b42      	ldr	r3, [pc, #264]	@ (800ab38 <pvPortMalloc+0x188>)
 800aa30:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa32:	4b41      	ldr	r3, [pc, #260]	@ (800ab38 <pvPortMalloc+0x188>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa38:	e004      	b.n	800aa44 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d903      	bls.n	800aa56 <pvPortMalloc+0xa6>
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1f1      	bne.n	800aa3a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa56:	4b35      	ldr	r3, [pc, #212]	@ (800ab2c <pvPortMalloc+0x17c>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d04c      	beq.n	800aafa <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa60:	6a3b      	ldr	r3, [r7, #32]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2208      	movs	r2, #8
 800aa66:	4413      	add	r3, r2
 800aa68:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	6a3b      	ldr	r3, [r7, #32]
 800aa70:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa74:	685a      	ldr	r2, [r3, #4]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	1ad2      	subs	r2, r2, r3
 800aa7a:	2308      	movs	r3, #8
 800aa7c:	005b      	lsls	r3, r3, #1
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d920      	bls.n	800aac4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4413      	add	r3, r2
 800aa88:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	f003 0307 	and.w	r3, r3, #7
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d00b      	beq.n	800aaac <pvPortMalloc+0xfc>
	__asm volatile
 800aa94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa98:	f383 8811 	msr	BASEPRI, r3
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f3bf 8f4f 	dsb	sy
 800aaa4:	613b      	str	r3, [r7, #16]
}
 800aaa6:	bf00      	nop
 800aaa8:	bf00      	nop
 800aaaa:	e7fd      	b.n	800aaa8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aaac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaae:	685a      	ldr	r2, [r3, #4]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	1ad2      	subs	r2, r2, r3
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aabe:	69b8      	ldr	r0, [r7, #24]
 800aac0:	f000 f906 	bl	800acd0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aac4:	4b1b      	ldr	r3, [pc, #108]	@ (800ab34 <pvPortMalloc+0x184>)
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	4a19      	ldr	r2, [pc, #100]	@ (800ab34 <pvPortMalloc+0x184>)
 800aad0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aad2:	4b18      	ldr	r3, [pc, #96]	@ (800ab34 <pvPortMalloc+0x184>)
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	4b19      	ldr	r3, [pc, #100]	@ (800ab3c <pvPortMalloc+0x18c>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d203      	bcs.n	800aae6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aade:	4b15      	ldr	r3, [pc, #84]	@ (800ab34 <pvPortMalloc+0x184>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a16      	ldr	r2, [pc, #88]	@ (800ab3c <pvPortMalloc+0x18c>)
 800aae4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae8:	685a      	ldr	r2, [r3, #4]
 800aaea:	4b11      	ldr	r3, [pc, #68]	@ (800ab30 <pvPortMalloc+0x180>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	431a      	orrs	r2, r3
 800aaf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aafa:	f7fe fc1f 	bl	800933c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aafe:	69fb      	ldr	r3, [r7, #28]
 800ab00:	f003 0307 	and.w	r3, r3, #7
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d00b      	beq.n	800ab20 <pvPortMalloc+0x170>
	__asm volatile
 800ab08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab0c:	f383 8811 	msr	BASEPRI, r3
 800ab10:	f3bf 8f6f 	isb	sy
 800ab14:	f3bf 8f4f 	dsb	sy
 800ab18:	60fb      	str	r3, [r7, #12]
}
 800ab1a:	bf00      	nop
 800ab1c:	bf00      	nop
 800ab1e:	e7fd      	b.n	800ab1c <pvPortMalloc+0x16c>
	return pvReturn;
 800ab20:	69fb      	ldr	r3, [r7, #28]
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3728      	adds	r7, #40	@ 0x28
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	20003f04 	.word	0x20003f04
 800ab30:	20003f10 	.word	0x20003f10
 800ab34:	20003f08 	.word	0x20003f08
 800ab38:	20003efc 	.word	0x20003efc
 800ab3c:	20003f0c 	.word	0x20003f0c

0800ab40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b086      	sub	sp, #24
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d04a      	beq.n	800abe8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab52:	2308      	movs	r3, #8
 800ab54:	425b      	negs	r3, r3
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	4413      	add	r3, r2
 800ab5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	685a      	ldr	r2, [r3, #4]
 800ab64:	4b22      	ldr	r3, [pc, #136]	@ (800abf0 <vPortFree+0xb0>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4013      	ands	r3, r2
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d10b      	bne.n	800ab86 <vPortFree+0x46>
	__asm volatile
 800ab6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab72:	f383 8811 	msr	BASEPRI, r3
 800ab76:	f3bf 8f6f 	isb	sy
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	60fb      	str	r3, [r7, #12]
}
 800ab80:	bf00      	nop
 800ab82:	bf00      	nop
 800ab84:	e7fd      	b.n	800ab82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00b      	beq.n	800aba6 <vPortFree+0x66>
	__asm volatile
 800ab8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab92:	f383 8811 	msr	BASEPRI, r3
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	60bb      	str	r3, [r7, #8]
}
 800aba0:	bf00      	nop
 800aba2:	bf00      	nop
 800aba4:	e7fd      	b.n	800aba2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	685a      	ldr	r2, [r3, #4]
 800abaa:	4b11      	ldr	r3, [pc, #68]	@ (800abf0 <vPortFree+0xb0>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4013      	ands	r3, r2
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d019      	beq.n	800abe8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d115      	bne.n	800abe8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	685a      	ldr	r2, [r3, #4]
 800abc0:	4b0b      	ldr	r3, [pc, #44]	@ (800abf0 <vPortFree+0xb0>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	43db      	mvns	r3, r3
 800abc6:	401a      	ands	r2, r3
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800abcc:	f7fe fba8 	bl	8009320 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	685a      	ldr	r2, [r3, #4]
 800abd4:	4b07      	ldr	r3, [pc, #28]	@ (800abf4 <vPortFree+0xb4>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4413      	add	r3, r2
 800abda:	4a06      	ldr	r2, [pc, #24]	@ (800abf4 <vPortFree+0xb4>)
 800abdc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800abde:	6938      	ldr	r0, [r7, #16]
 800abe0:	f000 f876 	bl	800acd0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800abe4:	f7fe fbaa 	bl	800933c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800abe8:	bf00      	nop
 800abea:	3718      	adds	r7, #24
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}
 800abf0:	20003f10 	.word	0x20003f10
 800abf4:	20003f08 	.word	0x20003f08

0800abf8 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800abf8:	b480      	push	{r7}
 800abfa:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800abfc:	4b02      	ldr	r3, [pc, #8]	@ (800ac08 <xPortGetFreeHeapSize+0x10>)
 800abfe:	681b      	ldr	r3, [r3, #0]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bc80      	pop	{r7}
 800ac06:	4770      	bx	lr
 800ac08:	20003f08 	.word	0x20003f08

0800ac0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac12:	f640 431c 	movw	r3, #3100	@ 0xc1c
 800ac16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac18:	4b27      	ldr	r3, [pc, #156]	@ (800acb8 <prvHeapInit+0xac>)
 800ac1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f003 0307 	and.w	r3, r3, #7
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00c      	beq.n	800ac40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	3307      	adds	r3, #7
 800ac2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f023 0307 	bic.w	r3, r3, #7
 800ac32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac34:	68ba      	ldr	r2, [r7, #8]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	4a1f      	ldr	r2, [pc, #124]	@ (800acb8 <prvHeapInit+0xac>)
 800ac3c:	4413      	add	r3, r2
 800ac3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac44:	4a1d      	ldr	r2, [pc, #116]	@ (800acbc <prvHeapInit+0xb0>)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac4a:	4b1c      	ldr	r3, [pc, #112]	@ (800acbc <prvHeapInit+0xb0>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	68ba      	ldr	r2, [r7, #8]
 800ac54:	4413      	add	r3, r2
 800ac56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac58:	2208      	movs	r2, #8
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	1a9b      	subs	r3, r3, r2
 800ac5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f023 0307 	bic.w	r3, r3, #7
 800ac66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	4a15      	ldr	r2, [pc, #84]	@ (800acc0 <prvHeapInit+0xb4>)
 800ac6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ac6e:	4b14      	ldr	r3, [pc, #80]	@ (800acc0 <prvHeapInit+0xb4>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2200      	movs	r2, #0
 800ac74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ac76:	4b12      	ldr	r3, [pc, #72]	@ (800acc0 <prvHeapInit+0xb4>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	1ad2      	subs	r2, r2, r3
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac8c:	4b0c      	ldr	r3, [pc, #48]	@ (800acc0 <prvHeapInit+0xb4>)
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	4a0a      	ldr	r2, [pc, #40]	@ (800acc4 <prvHeapInit+0xb8>)
 800ac9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	4a09      	ldr	r2, [pc, #36]	@ (800acc8 <prvHeapInit+0xbc>)
 800aca2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aca4:	4b09      	ldr	r3, [pc, #36]	@ (800accc <prvHeapInit+0xc0>)
 800aca6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800acaa:	601a      	str	r2, [r3, #0]
}
 800acac:	bf00      	nop
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bc80      	pop	{r7}
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop
 800acb8:	200032e0 	.word	0x200032e0
 800acbc:	20003efc 	.word	0x20003efc
 800acc0:	20003f04 	.word	0x20003f04
 800acc4:	20003f0c 	.word	0x20003f0c
 800acc8:	20003f08 	.word	0x20003f08
 800accc:	20003f10 	.word	0x20003f10

0800acd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800acd8:	4b27      	ldr	r3, [pc, #156]	@ (800ad78 <prvInsertBlockIntoFreeList+0xa8>)
 800acda:	60fb      	str	r3, [r7, #12]
 800acdc:	e002      	b.n	800ace4 <prvInsertBlockIntoFreeList+0x14>
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	60fb      	str	r3, [r7, #12]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	429a      	cmp	r2, r3
 800acec:	d8f7      	bhi.n	800acde <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	68ba      	ldr	r2, [r7, #8]
 800acf8:	4413      	add	r3, r2
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d108      	bne.n	800ad12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	685a      	ldr	r2, [r3, #4]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	441a      	add	r2, r3
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	68ba      	ldr	r2, [r7, #8]
 800ad1c:	441a      	add	r2, r3
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d118      	bne.n	800ad58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	4b14      	ldr	r3, [pc, #80]	@ (800ad7c <prvInsertBlockIntoFreeList+0xac>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d00d      	beq.n	800ad4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	441a      	add	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	601a      	str	r2, [r3, #0]
 800ad4c:	e008      	b.n	800ad60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ad7c <prvInsertBlockIntoFreeList+0xac>)
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	601a      	str	r2, [r3, #0]
 800ad56:	e003      	b.n	800ad60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d002      	beq.n	800ad6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad6e:	bf00      	nop
 800ad70:	3714      	adds	r7, #20
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bc80      	pop	{r7}
 800ad76:	4770      	bx	lr
 800ad78:	20003efc 	.word	0x20003efc
 800ad7c:	20003f04 	.word	0x20003f04

0800ad80 <siprintf>:
 800ad80:	b40e      	push	{r1, r2, r3}
 800ad82:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad86:	b500      	push	{lr}
 800ad88:	b09c      	sub	sp, #112	@ 0x70
 800ad8a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ad8c:	9002      	str	r0, [sp, #8]
 800ad8e:	9006      	str	r0, [sp, #24]
 800ad90:	9107      	str	r1, [sp, #28]
 800ad92:	9104      	str	r1, [sp, #16]
 800ad94:	4808      	ldr	r0, [pc, #32]	@ (800adb8 <siprintf+0x38>)
 800ad96:	4909      	ldr	r1, [pc, #36]	@ (800adbc <siprintf+0x3c>)
 800ad98:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad9c:	9105      	str	r1, [sp, #20]
 800ad9e:	6800      	ldr	r0, [r0, #0]
 800ada0:	a902      	add	r1, sp, #8
 800ada2:	9301      	str	r3, [sp, #4]
 800ada4:	f000 f9f6 	bl	800b194 <_svfiprintf_r>
 800ada8:	2200      	movs	r2, #0
 800adaa:	9b02      	ldr	r3, [sp, #8]
 800adac:	701a      	strb	r2, [r3, #0]
 800adae:	b01c      	add	sp, #112	@ 0x70
 800adb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800adb4:	b003      	add	sp, #12
 800adb6:	4770      	bx	lr
 800adb8:	20001030 	.word	0x20001030
 800adbc:	ffff0208 	.word	0xffff0208

0800adc0 <memset>:
 800adc0:	4603      	mov	r3, r0
 800adc2:	4402      	add	r2, r0
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d100      	bne.n	800adca <memset+0xa>
 800adc8:	4770      	bx	lr
 800adca:	f803 1b01 	strb.w	r1, [r3], #1
 800adce:	e7f9      	b.n	800adc4 <memset+0x4>

0800add0 <_reclaim_reent>:
 800add0:	4b29      	ldr	r3, [pc, #164]	@ (800ae78 <_reclaim_reent+0xa8>)
 800add2:	b570      	push	{r4, r5, r6, lr}
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4604      	mov	r4, r0
 800add8:	4283      	cmp	r3, r0
 800adda:	d04b      	beq.n	800ae74 <_reclaim_reent+0xa4>
 800addc:	69c3      	ldr	r3, [r0, #28]
 800adde:	b1ab      	cbz	r3, 800ae0c <_reclaim_reent+0x3c>
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	b16b      	cbz	r3, 800ae00 <_reclaim_reent+0x30>
 800ade4:	2500      	movs	r5, #0
 800ade6:	69e3      	ldr	r3, [r4, #28]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	5959      	ldr	r1, [r3, r5]
 800adec:	2900      	cmp	r1, #0
 800adee:	d13b      	bne.n	800ae68 <_reclaim_reent+0x98>
 800adf0:	3504      	adds	r5, #4
 800adf2:	2d80      	cmp	r5, #128	@ 0x80
 800adf4:	d1f7      	bne.n	800ade6 <_reclaim_reent+0x16>
 800adf6:	69e3      	ldr	r3, [r4, #28]
 800adf8:	4620      	mov	r0, r4
 800adfa:	68d9      	ldr	r1, [r3, #12]
 800adfc:	f000 f878 	bl	800aef0 <_free_r>
 800ae00:	69e3      	ldr	r3, [r4, #28]
 800ae02:	6819      	ldr	r1, [r3, #0]
 800ae04:	b111      	cbz	r1, 800ae0c <_reclaim_reent+0x3c>
 800ae06:	4620      	mov	r0, r4
 800ae08:	f000 f872 	bl	800aef0 <_free_r>
 800ae0c:	6961      	ldr	r1, [r4, #20]
 800ae0e:	b111      	cbz	r1, 800ae16 <_reclaim_reent+0x46>
 800ae10:	4620      	mov	r0, r4
 800ae12:	f000 f86d 	bl	800aef0 <_free_r>
 800ae16:	69e1      	ldr	r1, [r4, #28]
 800ae18:	b111      	cbz	r1, 800ae20 <_reclaim_reent+0x50>
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f000 f868 	bl	800aef0 <_free_r>
 800ae20:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ae22:	b111      	cbz	r1, 800ae2a <_reclaim_reent+0x5a>
 800ae24:	4620      	mov	r0, r4
 800ae26:	f000 f863 	bl	800aef0 <_free_r>
 800ae2a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae2c:	b111      	cbz	r1, 800ae34 <_reclaim_reent+0x64>
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f000 f85e 	bl	800aef0 <_free_r>
 800ae34:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ae36:	b111      	cbz	r1, 800ae3e <_reclaim_reent+0x6e>
 800ae38:	4620      	mov	r0, r4
 800ae3a:	f000 f859 	bl	800aef0 <_free_r>
 800ae3e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ae40:	b111      	cbz	r1, 800ae48 <_reclaim_reent+0x78>
 800ae42:	4620      	mov	r0, r4
 800ae44:	f000 f854 	bl	800aef0 <_free_r>
 800ae48:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ae4a:	b111      	cbz	r1, 800ae52 <_reclaim_reent+0x82>
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	f000 f84f 	bl	800aef0 <_free_r>
 800ae52:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ae54:	b111      	cbz	r1, 800ae5c <_reclaim_reent+0x8c>
 800ae56:	4620      	mov	r0, r4
 800ae58:	f000 f84a 	bl	800aef0 <_free_r>
 800ae5c:	6a23      	ldr	r3, [r4, #32]
 800ae5e:	b14b      	cbz	r3, 800ae74 <_reclaim_reent+0xa4>
 800ae60:	4620      	mov	r0, r4
 800ae62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae66:	4718      	bx	r3
 800ae68:	680e      	ldr	r6, [r1, #0]
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f000 f840 	bl	800aef0 <_free_r>
 800ae70:	4631      	mov	r1, r6
 800ae72:	e7bb      	b.n	800adec <_reclaim_reent+0x1c>
 800ae74:	bd70      	pop	{r4, r5, r6, pc}
 800ae76:	bf00      	nop
 800ae78:	20001030 	.word	0x20001030

0800ae7c <__errno>:
 800ae7c:	4b01      	ldr	r3, [pc, #4]	@ (800ae84 <__errno+0x8>)
 800ae7e:	6818      	ldr	r0, [r3, #0]
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	20001030 	.word	0x20001030

0800ae88 <__libc_init_array>:
 800ae88:	b570      	push	{r4, r5, r6, lr}
 800ae8a:	2600      	movs	r6, #0
 800ae8c:	4d0c      	ldr	r5, [pc, #48]	@ (800aec0 <__libc_init_array+0x38>)
 800ae8e:	4c0d      	ldr	r4, [pc, #52]	@ (800aec4 <__libc_init_array+0x3c>)
 800ae90:	1b64      	subs	r4, r4, r5
 800ae92:	10a4      	asrs	r4, r4, #2
 800ae94:	42a6      	cmp	r6, r4
 800ae96:	d109      	bne.n	800aeac <__libc_init_array+0x24>
 800ae98:	f001 fd4a 	bl	800c930 <_init>
 800ae9c:	2600      	movs	r6, #0
 800ae9e:	4d0a      	ldr	r5, [pc, #40]	@ (800aec8 <__libc_init_array+0x40>)
 800aea0:	4c0a      	ldr	r4, [pc, #40]	@ (800aecc <__libc_init_array+0x44>)
 800aea2:	1b64      	subs	r4, r4, r5
 800aea4:	10a4      	asrs	r4, r4, #2
 800aea6:	42a6      	cmp	r6, r4
 800aea8:	d105      	bne.n	800aeb6 <__libc_init_array+0x2e>
 800aeaa:	bd70      	pop	{r4, r5, r6, pc}
 800aeac:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeb0:	4798      	blx	r3
 800aeb2:	3601      	adds	r6, #1
 800aeb4:	e7ee      	b.n	800ae94 <__libc_init_array+0xc>
 800aeb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeba:	4798      	blx	r3
 800aebc:	3601      	adds	r6, #1
 800aebe:	e7f2      	b.n	800aea6 <__libc_init_array+0x1e>
 800aec0:	0800e248 	.word	0x0800e248
 800aec4:	0800e248 	.word	0x0800e248
 800aec8:	0800e248 	.word	0x0800e248
 800aecc:	0800e24c 	.word	0x0800e24c

0800aed0 <__retarget_lock_acquire_recursive>:
 800aed0:	4770      	bx	lr

0800aed2 <__retarget_lock_release_recursive>:
 800aed2:	4770      	bx	lr

0800aed4 <memcpy>:
 800aed4:	440a      	add	r2, r1
 800aed6:	4291      	cmp	r1, r2
 800aed8:	f100 33ff 	add.w	r3, r0, #4294967295
 800aedc:	d100      	bne.n	800aee0 <memcpy+0xc>
 800aede:	4770      	bx	lr
 800aee0:	b510      	push	{r4, lr}
 800aee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aee6:	4291      	cmp	r1, r2
 800aee8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aeec:	d1f9      	bne.n	800aee2 <memcpy+0xe>
 800aeee:	bd10      	pop	{r4, pc}

0800aef0 <_free_r>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	4605      	mov	r5, r0
 800aef4:	2900      	cmp	r1, #0
 800aef6:	d040      	beq.n	800af7a <_free_r+0x8a>
 800aef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aefc:	1f0c      	subs	r4, r1, #4
 800aefe:	2b00      	cmp	r3, #0
 800af00:	bfb8      	it	lt
 800af02:	18e4      	addlt	r4, r4, r3
 800af04:	f000 f8de 	bl	800b0c4 <__malloc_lock>
 800af08:	4a1c      	ldr	r2, [pc, #112]	@ (800af7c <_free_r+0x8c>)
 800af0a:	6813      	ldr	r3, [r2, #0]
 800af0c:	b933      	cbnz	r3, 800af1c <_free_r+0x2c>
 800af0e:	6063      	str	r3, [r4, #4]
 800af10:	6014      	str	r4, [r2, #0]
 800af12:	4628      	mov	r0, r5
 800af14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af18:	f000 b8da 	b.w	800b0d0 <__malloc_unlock>
 800af1c:	42a3      	cmp	r3, r4
 800af1e:	d908      	bls.n	800af32 <_free_r+0x42>
 800af20:	6820      	ldr	r0, [r4, #0]
 800af22:	1821      	adds	r1, r4, r0
 800af24:	428b      	cmp	r3, r1
 800af26:	bf01      	itttt	eq
 800af28:	6819      	ldreq	r1, [r3, #0]
 800af2a:	685b      	ldreq	r3, [r3, #4]
 800af2c:	1809      	addeq	r1, r1, r0
 800af2e:	6021      	streq	r1, [r4, #0]
 800af30:	e7ed      	b.n	800af0e <_free_r+0x1e>
 800af32:	461a      	mov	r2, r3
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	b10b      	cbz	r3, 800af3c <_free_r+0x4c>
 800af38:	42a3      	cmp	r3, r4
 800af3a:	d9fa      	bls.n	800af32 <_free_r+0x42>
 800af3c:	6811      	ldr	r1, [r2, #0]
 800af3e:	1850      	adds	r0, r2, r1
 800af40:	42a0      	cmp	r0, r4
 800af42:	d10b      	bne.n	800af5c <_free_r+0x6c>
 800af44:	6820      	ldr	r0, [r4, #0]
 800af46:	4401      	add	r1, r0
 800af48:	1850      	adds	r0, r2, r1
 800af4a:	4283      	cmp	r3, r0
 800af4c:	6011      	str	r1, [r2, #0]
 800af4e:	d1e0      	bne.n	800af12 <_free_r+0x22>
 800af50:	6818      	ldr	r0, [r3, #0]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	4408      	add	r0, r1
 800af56:	6010      	str	r0, [r2, #0]
 800af58:	6053      	str	r3, [r2, #4]
 800af5a:	e7da      	b.n	800af12 <_free_r+0x22>
 800af5c:	d902      	bls.n	800af64 <_free_r+0x74>
 800af5e:	230c      	movs	r3, #12
 800af60:	602b      	str	r3, [r5, #0]
 800af62:	e7d6      	b.n	800af12 <_free_r+0x22>
 800af64:	6820      	ldr	r0, [r4, #0]
 800af66:	1821      	adds	r1, r4, r0
 800af68:	428b      	cmp	r3, r1
 800af6a:	bf01      	itttt	eq
 800af6c:	6819      	ldreq	r1, [r3, #0]
 800af6e:	685b      	ldreq	r3, [r3, #4]
 800af70:	1809      	addeq	r1, r1, r0
 800af72:	6021      	streq	r1, [r4, #0]
 800af74:	6063      	str	r3, [r4, #4]
 800af76:	6054      	str	r4, [r2, #4]
 800af78:	e7cb      	b.n	800af12 <_free_r+0x22>
 800af7a:	bd38      	pop	{r3, r4, r5, pc}
 800af7c:	20004058 	.word	0x20004058

0800af80 <sbrk_aligned>:
 800af80:	b570      	push	{r4, r5, r6, lr}
 800af82:	4e0f      	ldr	r6, [pc, #60]	@ (800afc0 <sbrk_aligned+0x40>)
 800af84:	460c      	mov	r4, r1
 800af86:	6831      	ldr	r1, [r6, #0]
 800af88:	4605      	mov	r5, r0
 800af8a:	b911      	cbnz	r1, 800af92 <sbrk_aligned+0x12>
 800af8c:	f000 fbaa 	bl	800b6e4 <_sbrk_r>
 800af90:	6030      	str	r0, [r6, #0]
 800af92:	4621      	mov	r1, r4
 800af94:	4628      	mov	r0, r5
 800af96:	f000 fba5 	bl	800b6e4 <_sbrk_r>
 800af9a:	1c43      	adds	r3, r0, #1
 800af9c:	d103      	bne.n	800afa6 <sbrk_aligned+0x26>
 800af9e:	f04f 34ff 	mov.w	r4, #4294967295
 800afa2:	4620      	mov	r0, r4
 800afa4:	bd70      	pop	{r4, r5, r6, pc}
 800afa6:	1cc4      	adds	r4, r0, #3
 800afa8:	f024 0403 	bic.w	r4, r4, #3
 800afac:	42a0      	cmp	r0, r4
 800afae:	d0f8      	beq.n	800afa2 <sbrk_aligned+0x22>
 800afb0:	1a21      	subs	r1, r4, r0
 800afb2:	4628      	mov	r0, r5
 800afb4:	f000 fb96 	bl	800b6e4 <_sbrk_r>
 800afb8:	3001      	adds	r0, #1
 800afba:	d1f2      	bne.n	800afa2 <sbrk_aligned+0x22>
 800afbc:	e7ef      	b.n	800af9e <sbrk_aligned+0x1e>
 800afbe:	bf00      	nop
 800afc0:	20004054 	.word	0x20004054

0800afc4 <_malloc_r>:
 800afc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afc8:	1ccd      	adds	r5, r1, #3
 800afca:	f025 0503 	bic.w	r5, r5, #3
 800afce:	3508      	adds	r5, #8
 800afd0:	2d0c      	cmp	r5, #12
 800afd2:	bf38      	it	cc
 800afd4:	250c      	movcc	r5, #12
 800afd6:	2d00      	cmp	r5, #0
 800afd8:	4606      	mov	r6, r0
 800afda:	db01      	blt.n	800afe0 <_malloc_r+0x1c>
 800afdc:	42a9      	cmp	r1, r5
 800afde:	d904      	bls.n	800afea <_malloc_r+0x26>
 800afe0:	230c      	movs	r3, #12
 800afe2:	6033      	str	r3, [r6, #0]
 800afe4:	2000      	movs	r0, #0
 800afe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b0c0 <_malloc_r+0xfc>
 800afee:	f000 f869 	bl	800b0c4 <__malloc_lock>
 800aff2:	f8d8 3000 	ldr.w	r3, [r8]
 800aff6:	461c      	mov	r4, r3
 800aff8:	bb44      	cbnz	r4, 800b04c <_malloc_r+0x88>
 800affa:	4629      	mov	r1, r5
 800affc:	4630      	mov	r0, r6
 800affe:	f7ff ffbf 	bl	800af80 <sbrk_aligned>
 800b002:	1c43      	adds	r3, r0, #1
 800b004:	4604      	mov	r4, r0
 800b006:	d158      	bne.n	800b0ba <_malloc_r+0xf6>
 800b008:	f8d8 4000 	ldr.w	r4, [r8]
 800b00c:	4627      	mov	r7, r4
 800b00e:	2f00      	cmp	r7, #0
 800b010:	d143      	bne.n	800b09a <_malloc_r+0xd6>
 800b012:	2c00      	cmp	r4, #0
 800b014:	d04b      	beq.n	800b0ae <_malloc_r+0xea>
 800b016:	6823      	ldr	r3, [r4, #0]
 800b018:	4639      	mov	r1, r7
 800b01a:	4630      	mov	r0, r6
 800b01c:	eb04 0903 	add.w	r9, r4, r3
 800b020:	f000 fb60 	bl	800b6e4 <_sbrk_r>
 800b024:	4581      	cmp	r9, r0
 800b026:	d142      	bne.n	800b0ae <_malloc_r+0xea>
 800b028:	6821      	ldr	r1, [r4, #0]
 800b02a:	4630      	mov	r0, r6
 800b02c:	1a6d      	subs	r5, r5, r1
 800b02e:	4629      	mov	r1, r5
 800b030:	f7ff ffa6 	bl	800af80 <sbrk_aligned>
 800b034:	3001      	adds	r0, #1
 800b036:	d03a      	beq.n	800b0ae <_malloc_r+0xea>
 800b038:	6823      	ldr	r3, [r4, #0]
 800b03a:	442b      	add	r3, r5
 800b03c:	6023      	str	r3, [r4, #0]
 800b03e:	f8d8 3000 	ldr.w	r3, [r8]
 800b042:	685a      	ldr	r2, [r3, #4]
 800b044:	bb62      	cbnz	r2, 800b0a0 <_malloc_r+0xdc>
 800b046:	f8c8 7000 	str.w	r7, [r8]
 800b04a:	e00f      	b.n	800b06c <_malloc_r+0xa8>
 800b04c:	6822      	ldr	r2, [r4, #0]
 800b04e:	1b52      	subs	r2, r2, r5
 800b050:	d420      	bmi.n	800b094 <_malloc_r+0xd0>
 800b052:	2a0b      	cmp	r2, #11
 800b054:	d917      	bls.n	800b086 <_malloc_r+0xc2>
 800b056:	1961      	adds	r1, r4, r5
 800b058:	42a3      	cmp	r3, r4
 800b05a:	6025      	str	r5, [r4, #0]
 800b05c:	bf18      	it	ne
 800b05e:	6059      	strne	r1, [r3, #4]
 800b060:	6863      	ldr	r3, [r4, #4]
 800b062:	bf08      	it	eq
 800b064:	f8c8 1000 	streq.w	r1, [r8]
 800b068:	5162      	str	r2, [r4, r5]
 800b06a:	604b      	str	r3, [r1, #4]
 800b06c:	4630      	mov	r0, r6
 800b06e:	f000 f82f 	bl	800b0d0 <__malloc_unlock>
 800b072:	f104 000b 	add.w	r0, r4, #11
 800b076:	1d23      	adds	r3, r4, #4
 800b078:	f020 0007 	bic.w	r0, r0, #7
 800b07c:	1ac2      	subs	r2, r0, r3
 800b07e:	bf1c      	itt	ne
 800b080:	1a1b      	subne	r3, r3, r0
 800b082:	50a3      	strne	r3, [r4, r2]
 800b084:	e7af      	b.n	800afe6 <_malloc_r+0x22>
 800b086:	6862      	ldr	r2, [r4, #4]
 800b088:	42a3      	cmp	r3, r4
 800b08a:	bf0c      	ite	eq
 800b08c:	f8c8 2000 	streq.w	r2, [r8]
 800b090:	605a      	strne	r2, [r3, #4]
 800b092:	e7eb      	b.n	800b06c <_malloc_r+0xa8>
 800b094:	4623      	mov	r3, r4
 800b096:	6864      	ldr	r4, [r4, #4]
 800b098:	e7ae      	b.n	800aff8 <_malloc_r+0x34>
 800b09a:	463c      	mov	r4, r7
 800b09c:	687f      	ldr	r7, [r7, #4]
 800b09e:	e7b6      	b.n	800b00e <_malloc_r+0x4a>
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	42a3      	cmp	r3, r4
 800b0a6:	d1fb      	bne.n	800b0a0 <_malloc_r+0xdc>
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	6053      	str	r3, [r2, #4]
 800b0ac:	e7de      	b.n	800b06c <_malloc_r+0xa8>
 800b0ae:	230c      	movs	r3, #12
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	6033      	str	r3, [r6, #0]
 800b0b4:	f000 f80c 	bl	800b0d0 <__malloc_unlock>
 800b0b8:	e794      	b.n	800afe4 <_malloc_r+0x20>
 800b0ba:	6005      	str	r5, [r0, #0]
 800b0bc:	e7d6      	b.n	800b06c <_malloc_r+0xa8>
 800b0be:	bf00      	nop
 800b0c0:	20004058 	.word	0x20004058

0800b0c4 <__malloc_lock>:
 800b0c4:	4801      	ldr	r0, [pc, #4]	@ (800b0cc <__malloc_lock+0x8>)
 800b0c6:	f7ff bf03 	b.w	800aed0 <__retarget_lock_acquire_recursive>
 800b0ca:	bf00      	nop
 800b0cc:	20004050 	.word	0x20004050

0800b0d0 <__malloc_unlock>:
 800b0d0:	4801      	ldr	r0, [pc, #4]	@ (800b0d8 <__malloc_unlock+0x8>)
 800b0d2:	f7ff befe 	b.w	800aed2 <__retarget_lock_release_recursive>
 800b0d6:	bf00      	nop
 800b0d8:	20004050 	.word	0x20004050

0800b0dc <__ssputs_r>:
 800b0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0e0:	461f      	mov	r7, r3
 800b0e2:	688e      	ldr	r6, [r1, #8]
 800b0e4:	4682      	mov	sl, r0
 800b0e6:	42be      	cmp	r6, r7
 800b0e8:	460c      	mov	r4, r1
 800b0ea:	4690      	mov	r8, r2
 800b0ec:	680b      	ldr	r3, [r1, #0]
 800b0ee:	d82d      	bhi.n	800b14c <__ssputs_r+0x70>
 800b0f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b0f8:	d026      	beq.n	800b148 <__ssputs_r+0x6c>
 800b0fa:	6965      	ldr	r5, [r4, #20]
 800b0fc:	6909      	ldr	r1, [r1, #16]
 800b0fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b102:	eba3 0901 	sub.w	r9, r3, r1
 800b106:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b10a:	1c7b      	adds	r3, r7, #1
 800b10c:	444b      	add	r3, r9
 800b10e:	106d      	asrs	r5, r5, #1
 800b110:	429d      	cmp	r5, r3
 800b112:	bf38      	it	cc
 800b114:	461d      	movcc	r5, r3
 800b116:	0553      	lsls	r3, r2, #21
 800b118:	d527      	bpl.n	800b16a <__ssputs_r+0x8e>
 800b11a:	4629      	mov	r1, r5
 800b11c:	f7ff ff52 	bl	800afc4 <_malloc_r>
 800b120:	4606      	mov	r6, r0
 800b122:	b360      	cbz	r0, 800b17e <__ssputs_r+0xa2>
 800b124:	464a      	mov	r2, r9
 800b126:	6921      	ldr	r1, [r4, #16]
 800b128:	f7ff fed4 	bl	800aed4 <memcpy>
 800b12c:	89a3      	ldrh	r3, [r4, #12]
 800b12e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b136:	81a3      	strh	r3, [r4, #12]
 800b138:	6126      	str	r6, [r4, #16]
 800b13a:	444e      	add	r6, r9
 800b13c:	6026      	str	r6, [r4, #0]
 800b13e:	463e      	mov	r6, r7
 800b140:	6165      	str	r5, [r4, #20]
 800b142:	eba5 0509 	sub.w	r5, r5, r9
 800b146:	60a5      	str	r5, [r4, #8]
 800b148:	42be      	cmp	r6, r7
 800b14a:	d900      	bls.n	800b14e <__ssputs_r+0x72>
 800b14c:	463e      	mov	r6, r7
 800b14e:	4632      	mov	r2, r6
 800b150:	4641      	mov	r1, r8
 800b152:	6820      	ldr	r0, [r4, #0]
 800b154:	f000 faac 	bl	800b6b0 <memmove>
 800b158:	2000      	movs	r0, #0
 800b15a:	68a3      	ldr	r3, [r4, #8]
 800b15c:	1b9b      	subs	r3, r3, r6
 800b15e:	60a3      	str	r3, [r4, #8]
 800b160:	6823      	ldr	r3, [r4, #0]
 800b162:	4433      	add	r3, r6
 800b164:	6023      	str	r3, [r4, #0]
 800b166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b16a:	462a      	mov	r2, r5
 800b16c:	f000 fad8 	bl	800b720 <_realloc_r>
 800b170:	4606      	mov	r6, r0
 800b172:	2800      	cmp	r0, #0
 800b174:	d1e0      	bne.n	800b138 <__ssputs_r+0x5c>
 800b176:	4650      	mov	r0, sl
 800b178:	6921      	ldr	r1, [r4, #16]
 800b17a:	f7ff feb9 	bl	800aef0 <_free_r>
 800b17e:	230c      	movs	r3, #12
 800b180:	f8ca 3000 	str.w	r3, [sl]
 800b184:	89a3      	ldrh	r3, [r4, #12]
 800b186:	f04f 30ff 	mov.w	r0, #4294967295
 800b18a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b18e:	81a3      	strh	r3, [r4, #12]
 800b190:	e7e9      	b.n	800b166 <__ssputs_r+0x8a>
	...

0800b194 <_svfiprintf_r>:
 800b194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b198:	4698      	mov	r8, r3
 800b19a:	898b      	ldrh	r3, [r1, #12]
 800b19c:	4607      	mov	r7, r0
 800b19e:	061b      	lsls	r3, r3, #24
 800b1a0:	460d      	mov	r5, r1
 800b1a2:	4614      	mov	r4, r2
 800b1a4:	b09d      	sub	sp, #116	@ 0x74
 800b1a6:	d510      	bpl.n	800b1ca <_svfiprintf_r+0x36>
 800b1a8:	690b      	ldr	r3, [r1, #16]
 800b1aa:	b973      	cbnz	r3, 800b1ca <_svfiprintf_r+0x36>
 800b1ac:	2140      	movs	r1, #64	@ 0x40
 800b1ae:	f7ff ff09 	bl	800afc4 <_malloc_r>
 800b1b2:	6028      	str	r0, [r5, #0]
 800b1b4:	6128      	str	r0, [r5, #16]
 800b1b6:	b930      	cbnz	r0, 800b1c6 <_svfiprintf_r+0x32>
 800b1b8:	230c      	movs	r3, #12
 800b1ba:	603b      	str	r3, [r7, #0]
 800b1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c0:	b01d      	add	sp, #116	@ 0x74
 800b1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c6:	2340      	movs	r3, #64	@ 0x40
 800b1c8:	616b      	str	r3, [r5, #20]
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1ce:	2320      	movs	r3, #32
 800b1d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1d4:	2330      	movs	r3, #48	@ 0x30
 800b1d6:	f04f 0901 	mov.w	r9, #1
 800b1da:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b378 <_svfiprintf_r+0x1e4>
 800b1e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1e6:	4623      	mov	r3, r4
 800b1e8:	469a      	mov	sl, r3
 800b1ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1ee:	b10a      	cbz	r2, 800b1f4 <_svfiprintf_r+0x60>
 800b1f0:	2a25      	cmp	r2, #37	@ 0x25
 800b1f2:	d1f9      	bne.n	800b1e8 <_svfiprintf_r+0x54>
 800b1f4:	ebba 0b04 	subs.w	fp, sl, r4
 800b1f8:	d00b      	beq.n	800b212 <_svfiprintf_r+0x7e>
 800b1fa:	465b      	mov	r3, fp
 800b1fc:	4622      	mov	r2, r4
 800b1fe:	4629      	mov	r1, r5
 800b200:	4638      	mov	r0, r7
 800b202:	f7ff ff6b 	bl	800b0dc <__ssputs_r>
 800b206:	3001      	adds	r0, #1
 800b208:	f000 80a7 	beq.w	800b35a <_svfiprintf_r+0x1c6>
 800b20c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b20e:	445a      	add	r2, fp
 800b210:	9209      	str	r2, [sp, #36]	@ 0x24
 800b212:	f89a 3000 	ldrb.w	r3, [sl]
 800b216:	2b00      	cmp	r3, #0
 800b218:	f000 809f 	beq.w	800b35a <_svfiprintf_r+0x1c6>
 800b21c:	2300      	movs	r3, #0
 800b21e:	f04f 32ff 	mov.w	r2, #4294967295
 800b222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b226:	f10a 0a01 	add.w	sl, sl, #1
 800b22a:	9304      	str	r3, [sp, #16]
 800b22c:	9307      	str	r3, [sp, #28]
 800b22e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b232:	931a      	str	r3, [sp, #104]	@ 0x68
 800b234:	4654      	mov	r4, sl
 800b236:	2205      	movs	r2, #5
 800b238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b23c:	484e      	ldr	r0, [pc, #312]	@ (800b378 <_svfiprintf_r+0x1e4>)
 800b23e:	f000 fa61 	bl	800b704 <memchr>
 800b242:	9a04      	ldr	r2, [sp, #16]
 800b244:	b9d8      	cbnz	r0, 800b27e <_svfiprintf_r+0xea>
 800b246:	06d0      	lsls	r0, r2, #27
 800b248:	bf44      	itt	mi
 800b24a:	2320      	movmi	r3, #32
 800b24c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b250:	0711      	lsls	r1, r2, #28
 800b252:	bf44      	itt	mi
 800b254:	232b      	movmi	r3, #43	@ 0x2b
 800b256:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b25a:	f89a 3000 	ldrb.w	r3, [sl]
 800b25e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b260:	d015      	beq.n	800b28e <_svfiprintf_r+0xfa>
 800b262:	4654      	mov	r4, sl
 800b264:	2000      	movs	r0, #0
 800b266:	f04f 0c0a 	mov.w	ip, #10
 800b26a:	9a07      	ldr	r2, [sp, #28]
 800b26c:	4621      	mov	r1, r4
 800b26e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b272:	3b30      	subs	r3, #48	@ 0x30
 800b274:	2b09      	cmp	r3, #9
 800b276:	d94b      	bls.n	800b310 <_svfiprintf_r+0x17c>
 800b278:	b1b0      	cbz	r0, 800b2a8 <_svfiprintf_r+0x114>
 800b27a:	9207      	str	r2, [sp, #28]
 800b27c:	e014      	b.n	800b2a8 <_svfiprintf_r+0x114>
 800b27e:	eba0 0308 	sub.w	r3, r0, r8
 800b282:	fa09 f303 	lsl.w	r3, r9, r3
 800b286:	4313      	orrs	r3, r2
 800b288:	46a2      	mov	sl, r4
 800b28a:	9304      	str	r3, [sp, #16]
 800b28c:	e7d2      	b.n	800b234 <_svfiprintf_r+0xa0>
 800b28e:	9b03      	ldr	r3, [sp, #12]
 800b290:	1d19      	adds	r1, r3, #4
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	9103      	str	r1, [sp, #12]
 800b296:	2b00      	cmp	r3, #0
 800b298:	bfbb      	ittet	lt
 800b29a:	425b      	neglt	r3, r3
 800b29c:	f042 0202 	orrlt.w	r2, r2, #2
 800b2a0:	9307      	strge	r3, [sp, #28]
 800b2a2:	9307      	strlt	r3, [sp, #28]
 800b2a4:	bfb8      	it	lt
 800b2a6:	9204      	strlt	r2, [sp, #16]
 800b2a8:	7823      	ldrb	r3, [r4, #0]
 800b2aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2ac:	d10a      	bne.n	800b2c4 <_svfiprintf_r+0x130>
 800b2ae:	7863      	ldrb	r3, [r4, #1]
 800b2b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2b2:	d132      	bne.n	800b31a <_svfiprintf_r+0x186>
 800b2b4:	9b03      	ldr	r3, [sp, #12]
 800b2b6:	3402      	adds	r4, #2
 800b2b8:	1d1a      	adds	r2, r3, #4
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	9203      	str	r2, [sp, #12]
 800b2be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2c2:	9305      	str	r3, [sp, #20]
 800b2c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b37c <_svfiprintf_r+0x1e8>
 800b2c8:	2203      	movs	r2, #3
 800b2ca:	4650      	mov	r0, sl
 800b2cc:	7821      	ldrb	r1, [r4, #0]
 800b2ce:	f000 fa19 	bl	800b704 <memchr>
 800b2d2:	b138      	cbz	r0, 800b2e4 <_svfiprintf_r+0x150>
 800b2d4:	2240      	movs	r2, #64	@ 0x40
 800b2d6:	9b04      	ldr	r3, [sp, #16]
 800b2d8:	eba0 000a 	sub.w	r0, r0, sl
 800b2dc:	4082      	lsls	r2, r0
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	3401      	adds	r4, #1
 800b2e2:	9304      	str	r3, [sp, #16]
 800b2e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2e8:	2206      	movs	r2, #6
 800b2ea:	4825      	ldr	r0, [pc, #148]	@ (800b380 <_svfiprintf_r+0x1ec>)
 800b2ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2f0:	f000 fa08 	bl	800b704 <memchr>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d036      	beq.n	800b366 <_svfiprintf_r+0x1d2>
 800b2f8:	4b22      	ldr	r3, [pc, #136]	@ (800b384 <_svfiprintf_r+0x1f0>)
 800b2fa:	bb1b      	cbnz	r3, 800b344 <_svfiprintf_r+0x1b0>
 800b2fc:	9b03      	ldr	r3, [sp, #12]
 800b2fe:	3307      	adds	r3, #7
 800b300:	f023 0307 	bic.w	r3, r3, #7
 800b304:	3308      	adds	r3, #8
 800b306:	9303      	str	r3, [sp, #12]
 800b308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b30a:	4433      	add	r3, r6
 800b30c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b30e:	e76a      	b.n	800b1e6 <_svfiprintf_r+0x52>
 800b310:	460c      	mov	r4, r1
 800b312:	2001      	movs	r0, #1
 800b314:	fb0c 3202 	mla	r2, ip, r2, r3
 800b318:	e7a8      	b.n	800b26c <_svfiprintf_r+0xd8>
 800b31a:	2300      	movs	r3, #0
 800b31c:	f04f 0c0a 	mov.w	ip, #10
 800b320:	4619      	mov	r1, r3
 800b322:	3401      	adds	r4, #1
 800b324:	9305      	str	r3, [sp, #20]
 800b326:	4620      	mov	r0, r4
 800b328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b32c:	3a30      	subs	r2, #48	@ 0x30
 800b32e:	2a09      	cmp	r2, #9
 800b330:	d903      	bls.n	800b33a <_svfiprintf_r+0x1a6>
 800b332:	2b00      	cmp	r3, #0
 800b334:	d0c6      	beq.n	800b2c4 <_svfiprintf_r+0x130>
 800b336:	9105      	str	r1, [sp, #20]
 800b338:	e7c4      	b.n	800b2c4 <_svfiprintf_r+0x130>
 800b33a:	4604      	mov	r4, r0
 800b33c:	2301      	movs	r3, #1
 800b33e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b342:	e7f0      	b.n	800b326 <_svfiprintf_r+0x192>
 800b344:	ab03      	add	r3, sp, #12
 800b346:	9300      	str	r3, [sp, #0]
 800b348:	462a      	mov	r2, r5
 800b34a:	4638      	mov	r0, r7
 800b34c:	4b0e      	ldr	r3, [pc, #56]	@ (800b388 <_svfiprintf_r+0x1f4>)
 800b34e:	a904      	add	r1, sp, #16
 800b350:	f3af 8000 	nop.w
 800b354:	1c42      	adds	r2, r0, #1
 800b356:	4606      	mov	r6, r0
 800b358:	d1d6      	bne.n	800b308 <_svfiprintf_r+0x174>
 800b35a:	89ab      	ldrh	r3, [r5, #12]
 800b35c:	065b      	lsls	r3, r3, #25
 800b35e:	f53f af2d 	bmi.w	800b1bc <_svfiprintf_r+0x28>
 800b362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b364:	e72c      	b.n	800b1c0 <_svfiprintf_r+0x2c>
 800b366:	ab03      	add	r3, sp, #12
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	462a      	mov	r2, r5
 800b36c:	4638      	mov	r0, r7
 800b36e:	4b06      	ldr	r3, [pc, #24]	@ (800b388 <_svfiprintf_r+0x1f4>)
 800b370:	a904      	add	r1, sp, #16
 800b372:	f000 f87d 	bl	800b470 <_printf_i>
 800b376:	e7ed      	b.n	800b354 <_svfiprintf_r+0x1c0>
 800b378:	0800e03a 	.word	0x0800e03a
 800b37c:	0800e040 	.word	0x0800e040
 800b380:	0800e044 	.word	0x0800e044
 800b384:	00000000 	.word	0x00000000
 800b388:	0800b0dd 	.word	0x0800b0dd

0800b38c <_printf_common>:
 800b38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b390:	4616      	mov	r6, r2
 800b392:	4698      	mov	r8, r3
 800b394:	688a      	ldr	r2, [r1, #8]
 800b396:	690b      	ldr	r3, [r1, #16]
 800b398:	4607      	mov	r7, r0
 800b39a:	4293      	cmp	r3, r2
 800b39c:	bfb8      	it	lt
 800b39e:	4613      	movlt	r3, r2
 800b3a0:	6033      	str	r3, [r6, #0]
 800b3a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b3a6:	460c      	mov	r4, r1
 800b3a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b3ac:	b10a      	cbz	r2, 800b3b2 <_printf_common+0x26>
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	6033      	str	r3, [r6, #0]
 800b3b2:	6823      	ldr	r3, [r4, #0]
 800b3b4:	0699      	lsls	r1, r3, #26
 800b3b6:	bf42      	ittt	mi
 800b3b8:	6833      	ldrmi	r3, [r6, #0]
 800b3ba:	3302      	addmi	r3, #2
 800b3bc:	6033      	strmi	r3, [r6, #0]
 800b3be:	6825      	ldr	r5, [r4, #0]
 800b3c0:	f015 0506 	ands.w	r5, r5, #6
 800b3c4:	d106      	bne.n	800b3d4 <_printf_common+0x48>
 800b3c6:	f104 0a19 	add.w	sl, r4, #25
 800b3ca:	68e3      	ldr	r3, [r4, #12]
 800b3cc:	6832      	ldr	r2, [r6, #0]
 800b3ce:	1a9b      	subs	r3, r3, r2
 800b3d0:	42ab      	cmp	r3, r5
 800b3d2:	dc2b      	bgt.n	800b42c <_printf_common+0xa0>
 800b3d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b3d8:	6822      	ldr	r2, [r4, #0]
 800b3da:	3b00      	subs	r3, #0
 800b3dc:	bf18      	it	ne
 800b3de:	2301      	movne	r3, #1
 800b3e0:	0692      	lsls	r2, r2, #26
 800b3e2:	d430      	bmi.n	800b446 <_printf_common+0xba>
 800b3e4:	4641      	mov	r1, r8
 800b3e6:	4638      	mov	r0, r7
 800b3e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b3ec:	47c8      	blx	r9
 800b3ee:	3001      	adds	r0, #1
 800b3f0:	d023      	beq.n	800b43a <_printf_common+0xae>
 800b3f2:	6823      	ldr	r3, [r4, #0]
 800b3f4:	6922      	ldr	r2, [r4, #16]
 800b3f6:	f003 0306 	and.w	r3, r3, #6
 800b3fa:	2b04      	cmp	r3, #4
 800b3fc:	bf14      	ite	ne
 800b3fe:	2500      	movne	r5, #0
 800b400:	6833      	ldreq	r3, [r6, #0]
 800b402:	f04f 0600 	mov.w	r6, #0
 800b406:	bf08      	it	eq
 800b408:	68e5      	ldreq	r5, [r4, #12]
 800b40a:	f104 041a 	add.w	r4, r4, #26
 800b40e:	bf08      	it	eq
 800b410:	1aed      	subeq	r5, r5, r3
 800b412:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b416:	bf08      	it	eq
 800b418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b41c:	4293      	cmp	r3, r2
 800b41e:	bfc4      	itt	gt
 800b420:	1a9b      	subgt	r3, r3, r2
 800b422:	18ed      	addgt	r5, r5, r3
 800b424:	42b5      	cmp	r5, r6
 800b426:	d11a      	bne.n	800b45e <_printf_common+0xd2>
 800b428:	2000      	movs	r0, #0
 800b42a:	e008      	b.n	800b43e <_printf_common+0xb2>
 800b42c:	2301      	movs	r3, #1
 800b42e:	4652      	mov	r2, sl
 800b430:	4641      	mov	r1, r8
 800b432:	4638      	mov	r0, r7
 800b434:	47c8      	blx	r9
 800b436:	3001      	adds	r0, #1
 800b438:	d103      	bne.n	800b442 <_printf_common+0xb6>
 800b43a:	f04f 30ff 	mov.w	r0, #4294967295
 800b43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b442:	3501      	adds	r5, #1
 800b444:	e7c1      	b.n	800b3ca <_printf_common+0x3e>
 800b446:	2030      	movs	r0, #48	@ 0x30
 800b448:	18e1      	adds	r1, r4, r3
 800b44a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b44e:	1c5a      	adds	r2, r3, #1
 800b450:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b454:	4422      	add	r2, r4
 800b456:	3302      	adds	r3, #2
 800b458:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b45c:	e7c2      	b.n	800b3e4 <_printf_common+0x58>
 800b45e:	2301      	movs	r3, #1
 800b460:	4622      	mov	r2, r4
 800b462:	4641      	mov	r1, r8
 800b464:	4638      	mov	r0, r7
 800b466:	47c8      	blx	r9
 800b468:	3001      	adds	r0, #1
 800b46a:	d0e6      	beq.n	800b43a <_printf_common+0xae>
 800b46c:	3601      	adds	r6, #1
 800b46e:	e7d9      	b.n	800b424 <_printf_common+0x98>

0800b470 <_printf_i>:
 800b470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b474:	7e0f      	ldrb	r7, [r1, #24]
 800b476:	4691      	mov	r9, r2
 800b478:	2f78      	cmp	r7, #120	@ 0x78
 800b47a:	4680      	mov	r8, r0
 800b47c:	460c      	mov	r4, r1
 800b47e:	469a      	mov	sl, r3
 800b480:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b482:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b486:	d807      	bhi.n	800b498 <_printf_i+0x28>
 800b488:	2f62      	cmp	r7, #98	@ 0x62
 800b48a:	d80a      	bhi.n	800b4a2 <_printf_i+0x32>
 800b48c:	2f00      	cmp	r7, #0
 800b48e:	f000 80d3 	beq.w	800b638 <_printf_i+0x1c8>
 800b492:	2f58      	cmp	r7, #88	@ 0x58
 800b494:	f000 80ba 	beq.w	800b60c <_printf_i+0x19c>
 800b498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b49c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b4a0:	e03a      	b.n	800b518 <_printf_i+0xa8>
 800b4a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b4a6:	2b15      	cmp	r3, #21
 800b4a8:	d8f6      	bhi.n	800b498 <_printf_i+0x28>
 800b4aa:	a101      	add	r1, pc, #4	@ (adr r1, 800b4b0 <_printf_i+0x40>)
 800b4ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4b0:	0800b509 	.word	0x0800b509
 800b4b4:	0800b51d 	.word	0x0800b51d
 800b4b8:	0800b499 	.word	0x0800b499
 800b4bc:	0800b499 	.word	0x0800b499
 800b4c0:	0800b499 	.word	0x0800b499
 800b4c4:	0800b499 	.word	0x0800b499
 800b4c8:	0800b51d 	.word	0x0800b51d
 800b4cc:	0800b499 	.word	0x0800b499
 800b4d0:	0800b499 	.word	0x0800b499
 800b4d4:	0800b499 	.word	0x0800b499
 800b4d8:	0800b499 	.word	0x0800b499
 800b4dc:	0800b61f 	.word	0x0800b61f
 800b4e0:	0800b547 	.word	0x0800b547
 800b4e4:	0800b5d9 	.word	0x0800b5d9
 800b4e8:	0800b499 	.word	0x0800b499
 800b4ec:	0800b499 	.word	0x0800b499
 800b4f0:	0800b641 	.word	0x0800b641
 800b4f4:	0800b499 	.word	0x0800b499
 800b4f8:	0800b547 	.word	0x0800b547
 800b4fc:	0800b499 	.word	0x0800b499
 800b500:	0800b499 	.word	0x0800b499
 800b504:	0800b5e1 	.word	0x0800b5e1
 800b508:	6833      	ldr	r3, [r6, #0]
 800b50a:	1d1a      	adds	r2, r3, #4
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	6032      	str	r2, [r6, #0]
 800b510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b514:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b518:	2301      	movs	r3, #1
 800b51a:	e09e      	b.n	800b65a <_printf_i+0x1ea>
 800b51c:	6833      	ldr	r3, [r6, #0]
 800b51e:	6820      	ldr	r0, [r4, #0]
 800b520:	1d19      	adds	r1, r3, #4
 800b522:	6031      	str	r1, [r6, #0]
 800b524:	0606      	lsls	r6, r0, #24
 800b526:	d501      	bpl.n	800b52c <_printf_i+0xbc>
 800b528:	681d      	ldr	r5, [r3, #0]
 800b52a:	e003      	b.n	800b534 <_printf_i+0xc4>
 800b52c:	0645      	lsls	r5, r0, #25
 800b52e:	d5fb      	bpl.n	800b528 <_printf_i+0xb8>
 800b530:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b534:	2d00      	cmp	r5, #0
 800b536:	da03      	bge.n	800b540 <_printf_i+0xd0>
 800b538:	232d      	movs	r3, #45	@ 0x2d
 800b53a:	426d      	negs	r5, r5
 800b53c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b540:	230a      	movs	r3, #10
 800b542:	4859      	ldr	r0, [pc, #356]	@ (800b6a8 <_printf_i+0x238>)
 800b544:	e011      	b.n	800b56a <_printf_i+0xfa>
 800b546:	6821      	ldr	r1, [r4, #0]
 800b548:	6833      	ldr	r3, [r6, #0]
 800b54a:	0608      	lsls	r0, r1, #24
 800b54c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b550:	d402      	bmi.n	800b558 <_printf_i+0xe8>
 800b552:	0649      	lsls	r1, r1, #25
 800b554:	bf48      	it	mi
 800b556:	b2ad      	uxthmi	r5, r5
 800b558:	2f6f      	cmp	r7, #111	@ 0x6f
 800b55a:	6033      	str	r3, [r6, #0]
 800b55c:	bf14      	ite	ne
 800b55e:	230a      	movne	r3, #10
 800b560:	2308      	moveq	r3, #8
 800b562:	4851      	ldr	r0, [pc, #324]	@ (800b6a8 <_printf_i+0x238>)
 800b564:	2100      	movs	r1, #0
 800b566:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b56a:	6866      	ldr	r6, [r4, #4]
 800b56c:	2e00      	cmp	r6, #0
 800b56e:	bfa8      	it	ge
 800b570:	6821      	ldrge	r1, [r4, #0]
 800b572:	60a6      	str	r6, [r4, #8]
 800b574:	bfa4      	itt	ge
 800b576:	f021 0104 	bicge.w	r1, r1, #4
 800b57a:	6021      	strge	r1, [r4, #0]
 800b57c:	b90d      	cbnz	r5, 800b582 <_printf_i+0x112>
 800b57e:	2e00      	cmp	r6, #0
 800b580:	d04b      	beq.n	800b61a <_printf_i+0x1aa>
 800b582:	4616      	mov	r6, r2
 800b584:	fbb5 f1f3 	udiv	r1, r5, r3
 800b588:	fb03 5711 	mls	r7, r3, r1, r5
 800b58c:	5dc7      	ldrb	r7, [r0, r7]
 800b58e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b592:	462f      	mov	r7, r5
 800b594:	42bb      	cmp	r3, r7
 800b596:	460d      	mov	r5, r1
 800b598:	d9f4      	bls.n	800b584 <_printf_i+0x114>
 800b59a:	2b08      	cmp	r3, #8
 800b59c:	d10b      	bne.n	800b5b6 <_printf_i+0x146>
 800b59e:	6823      	ldr	r3, [r4, #0]
 800b5a0:	07df      	lsls	r7, r3, #31
 800b5a2:	d508      	bpl.n	800b5b6 <_printf_i+0x146>
 800b5a4:	6923      	ldr	r3, [r4, #16]
 800b5a6:	6861      	ldr	r1, [r4, #4]
 800b5a8:	4299      	cmp	r1, r3
 800b5aa:	bfde      	ittt	le
 800b5ac:	2330      	movle	r3, #48	@ 0x30
 800b5ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b5b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b5b6:	1b92      	subs	r2, r2, r6
 800b5b8:	6122      	str	r2, [r4, #16]
 800b5ba:	464b      	mov	r3, r9
 800b5bc:	4621      	mov	r1, r4
 800b5be:	4640      	mov	r0, r8
 800b5c0:	f8cd a000 	str.w	sl, [sp]
 800b5c4:	aa03      	add	r2, sp, #12
 800b5c6:	f7ff fee1 	bl	800b38c <_printf_common>
 800b5ca:	3001      	adds	r0, #1
 800b5cc:	d14a      	bne.n	800b664 <_printf_i+0x1f4>
 800b5ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d2:	b004      	add	sp, #16
 800b5d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5d8:	6823      	ldr	r3, [r4, #0]
 800b5da:	f043 0320 	orr.w	r3, r3, #32
 800b5de:	6023      	str	r3, [r4, #0]
 800b5e0:	2778      	movs	r7, #120	@ 0x78
 800b5e2:	4832      	ldr	r0, [pc, #200]	@ (800b6ac <_printf_i+0x23c>)
 800b5e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b5e8:	6823      	ldr	r3, [r4, #0]
 800b5ea:	6831      	ldr	r1, [r6, #0]
 800b5ec:	061f      	lsls	r7, r3, #24
 800b5ee:	f851 5b04 	ldr.w	r5, [r1], #4
 800b5f2:	d402      	bmi.n	800b5fa <_printf_i+0x18a>
 800b5f4:	065f      	lsls	r7, r3, #25
 800b5f6:	bf48      	it	mi
 800b5f8:	b2ad      	uxthmi	r5, r5
 800b5fa:	6031      	str	r1, [r6, #0]
 800b5fc:	07d9      	lsls	r1, r3, #31
 800b5fe:	bf44      	itt	mi
 800b600:	f043 0320 	orrmi.w	r3, r3, #32
 800b604:	6023      	strmi	r3, [r4, #0]
 800b606:	b11d      	cbz	r5, 800b610 <_printf_i+0x1a0>
 800b608:	2310      	movs	r3, #16
 800b60a:	e7ab      	b.n	800b564 <_printf_i+0xf4>
 800b60c:	4826      	ldr	r0, [pc, #152]	@ (800b6a8 <_printf_i+0x238>)
 800b60e:	e7e9      	b.n	800b5e4 <_printf_i+0x174>
 800b610:	6823      	ldr	r3, [r4, #0]
 800b612:	f023 0320 	bic.w	r3, r3, #32
 800b616:	6023      	str	r3, [r4, #0]
 800b618:	e7f6      	b.n	800b608 <_printf_i+0x198>
 800b61a:	4616      	mov	r6, r2
 800b61c:	e7bd      	b.n	800b59a <_printf_i+0x12a>
 800b61e:	6833      	ldr	r3, [r6, #0]
 800b620:	6825      	ldr	r5, [r4, #0]
 800b622:	1d18      	adds	r0, r3, #4
 800b624:	6961      	ldr	r1, [r4, #20]
 800b626:	6030      	str	r0, [r6, #0]
 800b628:	062e      	lsls	r6, r5, #24
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	d501      	bpl.n	800b632 <_printf_i+0x1c2>
 800b62e:	6019      	str	r1, [r3, #0]
 800b630:	e002      	b.n	800b638 <_printf_i+0x1c8>
 800b632:	0668      	lsls	r0, r5, #25
 800b634:	d5fb      	bpl.n	800b62e <_printf_i+0x1be>
 800b636:	8019      	strh	r1, [r3, #0]
 800b638:	2300      	movs	r3, #0
 800b63a:	4616      	mov	r6, r2
 800b63c:	6123      	str	r3, [r4, #16]
 800b63e:	e7bc      	b.n	800b5ba <_printf_i+0x14a>
 800b640:	6833      	ldr	r3, [r6, #0]
 800b642:	2100      	movs	r1, #0
 800b644:	1d1a      	adds	r2, r3, #4
 800b646:	6032      	str	r2, [r6, #0]
 800b648:	681e      	ldr	r6, [r3, #0]
 800b64a:	6862      	ldr	r2, [r4, #4]
 800b64c:	4630      	mov	r0, r6
 800b64e:	f000 f859 	bl	800b704 <memchr>
 800b652:	b108      	cbz	r0, 800b658 <_printf_i+0x1e8>
 800b654:	1b80      	subs	r0, r0, r6
 800b656:	6060      	str	r0, [r4, #4]
 800b658:	6863      	ldr	r3, [r4, #4]
 800b65a:	6123      	str	r3, [r4, #16]
 800b65c:	2300      	movs	r3, #0
 800b65e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b662:	e7aa      	b.n	800b5ba <_printf_i+0x14a>
 800b664:	4632      	mov	r2, r6
 800b666:	4649      	mov	r1, r9
 800b668:	4640      	mov	r0, r8
 800b66a:	6923      	ldr	r3, [r4, #16]
 800b66c:	47d0      	blx	sl
 800b66e:	3001      	adds	r0, #1
 800b670:	d0ad      	beq.n	800b5ce <_printf_i+0x15e>
 800b672:	6823      	ldr	r3, [r4, #0]
 800b674:	079b      	lsls	r3, r3, #30
 800b676:	d413      	bmi.n	800b6a0 <_printf_i+0x230>
 800b678:	68e0      	ldr	r0, [r4, #12]
 800b67a:	9b03      	ldr	r3, [sp, #12]
 800b67c:	4298      	cmp	r0, r3
 800b67e:	bfb8      	it	lt
 800b680:	4618      	movlt	r0, r3
 800b682:	e7a6      	b.n	800b5d2 <_printf_i+0x162>
 800b684:	2301      	movs	r3, #1
 800b686:	4632      	mov	r2, r6
 800b688:	4649      	mov	r1, r9
 800b68a:	4640      	mov	r0, r8
 800b68c:	47d0      	blx	sl
 800b68e:	3001      	adds	r0, #1
 800b690:	d09d      	beq.n	800b5ce <_printf_i+0x15e>
 800b692:	3501      	adds	r5, #1
 800b694:	68e3      	ldr	r3, [r4, #12]
 800b696:	9903      	ldr	r1, [sp, #12]
 800b698:	1a5b      	subs	r3, r3, r1
 800b69a:	42ab      	cmp	r3, r5
 800b69c:	dcf2      	bgt.n	800b684 <_printf_i+0x214>
 800b69e:	e7eb      	b.n	800b678 <_printf_i+0x208>
 800b6a0:	2500      	movs	r5, #0
 800b6a2:	f104 0619 	add.w	r6, r4, #25
 800b6a6:	e7f5      	b.n	800b694 <_printf_i+0x224>
 800b6a8:	0800e04b 	.word	0x0800e04b
 800b6ac:	0800e05c 	.word	0x0800e05c

0800b6b0 <memmove>:
 800b6b0:	4288      	cmp	r0, r1
 800b6b2:	b510      	push	{r4, lr}
 800b6b4:	eb01 0402 	add.w	r4, r1, r2
 800b6b8:	d902      	bls.n	800b6c0 <memmove+0x10>
 800b6ba:	4284      	cmp	r4, r0
 800b6bc:	4623      	mov	r3, r4
 800b6be:	d807      	bhi.n	800b6d0 <memmove+0x20>
 800b6c0:	1e43      	subs	r3, r0, #1
 800b6c2:	42a1      	cmp	r1, r4
 800b6c4:	d008      	beq.n	800b6d8 <memmove+0x28>
 800b6c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6ce:	e7f8      	b.n	800b6c2 <memmove+0x12>
 800b6d0:	4601      	mov	r1, r0
 800b6d2:	4402      	add	r2, r0
 800b6d4:	428a      	cmp	r2, r1
 800b6d6:	d100      	bne.n	800b6da <memmove+0x2a>
 800b6d8:	bd10      	pop	{r4, pc}
 800b6da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6e2:	e7f7      	b.n	800b6d4 <memmove+0x24>

0800b6e4 <_sbrk_r>:
 800b6e4:	b538      	push	{r3, r4, r5, lr}
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	4d05      	ldr	r5, [pc, #20]	@ (800b700 <_sbrk_r+0x1c>)
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	4608      	mov	r0, r1
 800b6ee:	602b      	str	r3, [r5, #0]
 800b6f0:	f7f7 fe40 	bl	8003374 <_sbrk>
 800b6f4:	1c43      	adds	r3, r0, #1
 800b6f6:	d102      	bne.n	800b6fe <_sbrk_r+0x1a>
 800b6f8:	682b      	ldr	r3, [r5, #0]
 800b6fa:	b103      	cbz	r3, 800b6fe <_sbrk_r+0x1a>
 800b6fc:	6023      	str	r3, [r4, #0]
 800b6fe:	bd38      	pop	{r3, r4, r5, pc}
 800b700:	2000404c 	.word	0x2000404c

0800b704 <memchr>:
 800b704:	4603      	mov	r3, r0
 800b706:	b510      	push	{r4, lr}
 800b708:	b2c9      	uxtb	r1, r1
 800b70a:	4402      	add	r2, r0
 800b70c:	4293      	cmp	r3, r2
 800b70e:	4618      	mov	r0, r3
 800b710:	d101      	bne.n	800b716 <memchr+0x12>
 800b712:	2000      	movs	r0, #0
 800b714:	e003      	b.n	800b71e <memchr+0x1a>
 800b716:	7804      	ldrb	r4, [r0, #0]
 800b718:	3301      	adds	r3, #1
 800b71a:	428c      	cmp	r4, r1
 800b71c:	d1f6      	bne.n	800b70c <memchr+0x8>
 800b71e:	bd10      	pop	{r4, pc}

0800b720 <_realloc_r>:
 800b720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b724:	4680      	mov	r8, r0
 800b726:	4615      	mov	r5, r2
 800b728:	460c      	mov	r4, r1
 800b72a:	b921      	cbnz	r1, 800b736 <_realloc_r+0x16>
 800b72c:	4611      	mov	r1, r2
 800b72e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b732:	f7ff bc47 	b.w	800afc4 <_malloc_r>
 800b736:	b92a      	cbnz	r2, 800b744 <_realloc_r+0x24>
 800b738:	f7ff fbda 	bl	800aef0 <_free_r>
 800b73c:	2400      	movs	r4, #0
 800b73e:	4620      	mov	r0, r4
 800b740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b744:	f000 f81a 	bl	800b77c <_malloc_usable_size_r>
 800b748:	4285      	cmp	r5, r0
 800b74a:	4606      	mov	r6, r0
 800b74c:	d802      	bhi.n	800b754 <_realloc_r+0x34>
 800b74e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b752:	d8f4      	bhi.n	800b73e <_realloc_r+0x1e>
 800b754:	4629      	mov	r1, r5
 800b756:	4640      	mov	r0, r8
 800b758:	f7ff fc34 	bl	800afc4 <_malloc_r>
 800b75c:	4607      	mov	r7, r0
 800b75e:	2800      	cmp	r0, #0
 800b760:	d0ec      	beq.n	800b73c <_realloc_r+0x1c>
 800b762:	42b5      	cmp	r5, r6
 800b764:	462a      	mov	r2, r5
 800b766:	4621      	mov	r1, r4
 800b768:	bf28      	it	cs
 800b76a:	4632      	movcs	r2, r6
 800b76c:	f7ff fbb2 	bl	800aed4 <memcpy>
 800b770:	4621      	mov	r1, r4
 800b772:	4640      	mov	r0, r8
 800b774:	f7ff fbbc 	bl	800aef0 <_free_r>
 800b778:	463c      	mov	r4, r7
 800b77a:	e7e0      	b.n	800b73e <_realloc_r+0x1e>

0800b77c <_malloc_usable_size_r>:
 800b77c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b780:	1f18      	subs	r0, r3, #4
 800b782:	2b00      	cmp	r3, #0
 800b784:	bfbc      	itt	lt
 800b786:	580b      	ldrlt	r3, [r1, r0]
 800b788:	18c0      	addlt	r0, r0, r3
 800b78a:	4770      	bx	lr

0800b78c <sqrt>:
 800b78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b78e:	4606      	mov	r6, r0
 800b790:	460f      	mov	r7, r1
 800b792:	f000 f865 	bl	800b860 <__ieee754_sqrt>
 800b796:	4632      	mov	r2, r6
 800b798:	4604      	mov	r4, r0
 800b79a:	460d      	mov	r5, r1
 800b79c:	463b      	mov	r3, r7
 800b79e:	4630      	mov	r0, r6
 800b7a0:	4639      	mov	r1, r7
 800b7a2:	f7f5 f92b 	bl	80009fc <__aeabi_dcmpun>
 800b7a6:	b990      	cbnz	r0, 800b7ce <sqrt+0x42>
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	4639      	mov	r1, r7
 800b7b0:	f7f5 f8fc 	bl	80009ac <__aeabi_dcmplt>
 800b7b4:	b158      	cbz	r0, 800b7ce <sqrt+0x42>
 800b7b6:	f7ff fb61 	bl	800ae7c <__errno>
 800b7ba:	2321      	movs	r3, #33	@ 0x21
 800b7bc:	2200      	movs	r2, #0
 800b7be:	6003      	str	r3, [r0, #0]
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	4610      	mov	r0, r2
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	f7f4 ffa9 	bl	800071c <__aeabi_ddiv>
 800b7ca:	4604      	mov	r4, r0
 800b7cc:	460d      	mov	r5, r1
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	4629      	mov	r1, r5
 800b7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b7d4 <sin>:
 800b7d4:	b530      	push	{r4, r5, lr}
 800b7d6:	4d20      	ldr	r5, [pc, #128]	@ (800b858 <sin+0x84>)
 800b7d8:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800b7dc:	42ac      	cmp	r4, r5
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	b087      	sub	sp, #28
 800b7e4:	d806      	bhi.n	800b7f4 <sin+0x20>
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	9300      	str	r3, [sp, #0]
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f000 f9cf 	bl	800bb90 <__kernel_sin>
 800b7f2:	e004      	b.n	800b7fe <sin+0x2a>
 800b7f4:	4d19      	ldr	r5, [pc, #100]	@ (800b85c <sin+0x88>)
 800b7f6:	42ac      	cmp	r4, r5
 800b7f8:	d903      	bls.n	800b802 <sin+0x2e>
 800b7fa:	f7f4 fcad 	bl	8000158 <__aeabi_dsub>
 800b7fe:	b007      	add	sp, #28
 800b800:	bd30      	pop	{r4, r5, pc}
 800b802:	aa02      	add	r2, sp, #8
 800b804:	f000 fa7c 	bl	800bd00 <__ieee754_rem_pio2>
 800b808:	f000 0003 	and.w	r0, r0, #3
 800b80c:	2801      	cmp	r0, #1
 800b80e:	d009      	beq.n	800b824 <sin+0x50>
 800b810:	2802      	cmp	r0, #2
 800b812:	d00e      	beq.n	800b832 <sin+0x5e>
 800b814:	b9c0      	cbnz	r0, 800b848 <sin+0x74>
 800b816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b81a:	2301      	movs	r3, #1
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b822:	e7e4      	b.n	800b7ee <sin+0x1a>
 800b824:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b828:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b82c:	f000 f8f0 	bl	800ba10 <__kernel_cos>
 800b830:	e7e5      	b.n	800b7fe <sin+0x2a>
 800b832:	2301      	movs	r3, #1
 800b834:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b83e:	f000 f9a7 	bl	800bb90 <__kernel_sin>
 800b842:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800b846:	e7da      	b.n	800b7fe <sin+0x2a>
 800b848:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b84c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b850:	f000 f8de 	bl	800ba10 <__kernel_cos>
 800b854:	e7f5      	b.n	800b842 <sin+0x6e>
 800b856:	bf00      	nop
 800b858:	3fe921fb 	.word	0x3fe921fb
 800b85c:	7fefffff 	.word	0x7fefffff

0800b860 <__ieee754_sqrt>:
 800b860:	4a67      	ldr	r2, [pc, #412]	@ (800ba00 <__ieee754_sqrt+0x1a0>)
 800b862:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b866:	438a      	bics	r2, r1
 800b868:	4606      	mov	r6, r0
 800b86a:	460f      	mov	r7, r1
 800b86c:	460b      	mov	r3, r1
 800b86e:	4604      	mov	r4, r0
 800b870:	d10e      	bne.n	800b890 <__ieee754_sqrt+0x30>
 800b872:	4602      	mov	r2, r0
 800b874:	f7f4 fe28 	bl	80004c8 <__aeabi_dmul>
 800b878:	4602      	mov	r2, r0
 800b87a:	460b      	mov	r3, r1
 800b87c:	4630      	mov	r0, r6
 800b87e:	4639      	mov	r1, r7
 800b880:	f7f4 fc6c 	bl	800015c <__adddf3>
 800b884:	4606      	mov	r6, r0
 800b886:	460f      	mov	r7, r1
 800b888:	4630      	mov	r0, r6
 800b88a:	4639      	mov	r1, r7
 800b88c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b890:	2900      	cmp	r1, #0
 800b892:	dc0c      	bgt.n	800b8ae <__ieee754_sqrt+0x4e>
 800b894:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800b898:	4302      	orrs	r2, r0
 800b89a:	d0f5      	beq.n	800b888 <__ieee754_sqrt+0x28>
 800b89c:	b189      	cbz	r1, 800b8c2 <__ieee754_sqrt+0x62>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	f7f4 fc5a 	bl	8000158 <__aeabi_dsub>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	f7f4 ff38 	bl	800071c <__aeabi_ddiv>
 800b8ac:	e7ea      	b.n	800b884 <__ieee754_sqrt+0x24>
 800b8ae:	150a      	asrs	r2, r1, #20
 800b8b0:	d115      	bne.n	800b8de <__ieee754_sqrt+0x7e>
 800b8b2:	2100      	movs	r1, #0
 800b8b4:	e009      	b.n	800b8ca <__ieee754_sqrt+0x6a>
 800b8b6:	0ae3      	lsrs	r3, r4, #11
 800b8b8:	3a15      	subs	r2, #21
 800b8ba:	0564      	lsls	r4, r4, #21
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d0fa      	beq.n	800b8b6 <__ieee754_sqrt+0x56>
 800b8c0:	e7f7      	b.n	800b8b2 <__ieee754_sqrt+0x52>
 800b8c2:	460a      	mov	r2, r1
 800b8c4:	e7fa      	b.n	800b8bc <__ieee754_sqrt+0x5c>
 800b8c6:	005b      	lsls	r3, r3, #1
 800b8c8:	3101      	adds	r1, #1
 800b8ca:	02d8      	lsls	r0, r3, #11
 800b8cc:	d5fb      	bpl.n	800b8c6 <__ieee754_sqrt+0x66>
 800b8ce:	1e48      	subs	r0, r1, #1
 800b8d0:	1a12      	subs	r2, r2, r0
 800b8d2:	f1c1 0020 	rsb	r0, r1, #32
 800b8d6:	fa24 f000 	lsr.w	r0, r4, r0
 800b8da:	4303      	orrs	r3, r0
 800b8dc:	408c      	lsls	r4, r1
 800b8de:	2600      	movs	r6, #0
 800b8e0:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800b8e4:	2116      	movs	r1, #22
 800b8e6:	07d2      	lsls	r2, r2, #31
 800b8e8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800b8ec:	4632      	mov	r2, r6
 800b8ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b8f6:	bf5c      	itt	pl
 800b8f8:	005b      	lslpl	r3, r3, #1
 800b8fa:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800b8fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b902:	bf58      	it	pl
 800b904:	0064      	lslpl	r4, r4, #1
 800b906:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b90a:	107f      	asrs	r7, r7, #1
 800b90c:	0064      	lsls	r4, r4, #1
 800b90e:	1815      	adds	r5, r2, r0
 800b910:	429d      	cmp	r5, r3
 800b912:	bfde      	ittt	le
 800b914:	182a      	addle	r2, r5, r0
 800b916:	1b5b      	suble	r3, r3, r5
 800b918:	1836      	addle	r6, r6, r0
 800b91a:	0fe5      	lsrs	r5, r4, #31
 800b91c:	3901      	subs	r1, #1
 800b91e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800b922:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b926:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b92a:	d1f0      	bne.n	800b90e <__ieee754_sqrt+0xae>
 800b92c:	460d      	mov	r5, r1
 800b92e:	f04f 0a20 	mov.w	sl, #32
 800b932:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800b936:	429a      	cmp	r2, r3
 800b938:	eb01 0c00 	add.w	ip, r1, r0
 800b93c:	db02      	blt.n	800b944 <__ieee754_sqrt+0xe4>
 800b93e:	d113      	bne.n	800b968 <__ieee754_sqrt+0x108>
 800b940:	45a4      	cmp	ip, r4
 800b942:	d811      	bhi.n	800b968 <__ieee754_sqrt+0x108>
 800b944:	f1bc 0f00 	cmp.w	ip, #0
 800b948:	eb0c 0100 	add.w	r1, ip, r0
 800b94c:	da42      	bge.n	800b9d4 <__ieee754_sqrt+0x174>
 800b94e:	2900      	cmp	r1, #0
 800b950:	db40      	blt.n	800b9d4 <__ieee754_sqrt+0x174>
 800b952:	f102 0e01 	add.w	lr, r2, #1
 800b956:	1a9b      	subs	r3, r3, r2
 800b958:	4672      	mov	r2, lr
 800b95a:	45a4      	cmp	ip, r4
 800b95c:	bf88      	it	hi
 800b95e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b962:	eba4 040c 	sub.w	r4, r4, ip
 800b966:	4405      	add	r5, r0
 800b968:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800b96c:	f1ba 0a01 	subs.w	sl, sl, #1
 800b970:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800b974:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b978:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b97c:	d1db      	bne.n	800b936 <__ieee754_sqrt+0xd6>
 800b97e:	431c      	orrs	r4, r3
 800b980:	d01a      	beq.n	800b9b8 <__ieee754_sqrt+0x158>
 800b982:	4c20      	ldr	r4, [pc, #128]	@ (800ba04 <__ieee754_sqrt+0x1a4>)
 800b984:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800ba08 <__ieee754_sqrt+0x1a8>
 800b988:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b98c:	e9db 2300 	ldrd	r2, r3, [fp]
 800b990:	f7f4 fbe2 	bl	8000158 <__aeabi_dsub>
 800b994:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b998:	4602      	mov	r2, r0
 800b99a:	460b      	mov	r3, r1
 800b99c:	4640      	mov	r0, r8
 800b99e:	4649      	mov	r1, r9
 800b9a0:	f7f5 f80e 	bl	80009c0 <__aeabi_dcmple>
 800b9a4:	b140      	cbz	r0, 800b9b8 <__ieee754_sqrt+0x158>
 800b9a6:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b9aa:	e9db 2300 	ldrd	r2, r3, [fp]
 800b9ae:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b9b2:	d111      	bne.n	800b9d8 <__ieee754_sqrt+0x178>
 800b9b4:	4655      	mov	r5, sl
 800b9b6:	3601      	adds	r6, #1
 800b9b8:	1072      	asrs	r2, r6, #1
 800b9ba:	086b      	lsrs	r3, r5, #1
 800b9bc:	07f1      	lsls	r1, r6, #31
 800b9be:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b9c2:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b9c6:	bf48      	it	mi
 800b9c8:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800b9d2:	e757      	b.n	800b884 <__ieee754_sqrt+0x24>
 800b9d4:	4696      	mov	lr, r2
 800b9d6:	e7be      	b.n	800b956 <__ieee754_sqrt+0xf6>
 800b9d8:	f7f4 fbc0 	bl	800015c <__adddf3>
 800b9dc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	4640      	mov	r0, r8
 800b9e6:	4649      	mov	r1, r9
 800b9e8:	f7f4 ffe0 	bl	80009ac <__aeabi_dcmplt>
 800b9ec:	b120      	cbz	r0, 800b9f8 <__ieee754_sqrt+0x198>
 800b9ee:	1ca8      	adds	r0, r5, #2
 800b9f0:	bf08      	it	eq
 800b9f2:	3601      	addeq	r6, #1
 800b9f4:	3502      	adds	r5, #2
 800b9f6:	e7df      	b.n	800b9b8 <__ieee754_sqrt+0x158>
 800b9f8:	1c6b      	adds	r3, r5, #1
 800b9fa:	f023 0501 	bic.w	r5, r3, #1
 800b9fe:	e7db      	b.n	800b9b8 <__ieee754_sqrt+0x158>
 800ba00:	7ff00000 	.word	0x7ff00000
 800ba04:	20001088 	.word	0x20001088
 800ba08:	20001080 	.word	0x20001080
 800ba0c:	00000000 	.word	0x00000000

0800ba10 <__kernel_cos>:
 800ba10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba14:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800ba18:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800ba1c:	4680      	mov	r8, r0
 800ba1e:	4689      	mov	r9, r1
 800ba20:	e9cd 2300 	strd	r2, r3, [sp]
 800ba24:	d204      	bcs.n	800ba30 <__kernel_cos+0x20>
 800ba26:	f7f4 ffff 	bl	8000a28 <__aeabi_d2iz>
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	f000 8086 	beq.w	800bb3c <__kernel_cos+0x12c>
 800ba30:	4642      	mov	r2, r8
 800ba32:	464b      	mov	r3, r9
 800ba34:	4640      	mov	r0, r8
 800ba36:	4649      	mov	r1, r9
 800ba38:	f7f4 fd46 	bl	80004c8 <__aeabi_dmul>
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	4b4e      	ldr	r3, [pc, #312]	@ (800bb78 <__kernel_cos+0x168>)
 800ba40:	4604      	mov	r4, r0
 800ba42:	460d      	mov	r5, r1
 800ba44:	f7f4 fd40 	bl	80004c8 <__aeabi_dmul>
 800ba48:	a33f      	add	r3, pc, #252	@ (adr r3, 800bb48 <__kernel_cos+0x138>)
 800ba4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4e:	4682      	mov	sl, r0
 800ba50:	468b      	mov	fp, r1
 800ba52:	4620      	mov	r0, r4
 800ba54:	4629      	mov	r1, r5
 800ba56:	f7f4 fd37 	bl	80004c8 <__aeabi_dmul>
 800ba5a:	a33d      	add	r3, pc, #244	@ (adr r3, 800bb50 <__kernel_cos+0x140>)
 800ba5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba60:	f7f4 fb7c 	bl	800015c <__adddf3>
 800ba64:	4622      	mov	r2, r4
 800ba66:	462b      	mov	r3, r5
 800ba68:	f7f4 fd2e 	bl	80004c8 <__aeabi_dmul>
 800ba6c:	a33a      	add	r3, pc, #232	@ (adr r3, 800bb58 <__kernel_cos+0x148>)
 800ba6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba72:	f7f4 fb71 	bl	8000158 <__aeabi_dsub>
 800ba76:	4622      	mov	r2, r4
 800ba78:	462b      	mov	r3, r5
 800ba7a:	f7f4 fd25 	bl	80004c8 <__aeabi_dmul>
 800ba7e:	a338      	add	r3, pc, #224	@ (adr r3, 800bb60 <__kernel_cos+0x150>)
 800ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba84:	f7f4 fb6a 	bl	800015c <__adddf3>
 800ba88:	4622      	mov	r2, r4
 800ba8a:	462b      	mov	r3, r5
 800ba8c:	f7f4 fd1c 	bl	80004c8 <__aeabi_dmul>
 800ba90:	a335      	add	r3, pc, #212	@ (adr r3, 800bb68 <__kernel_cos+0x158>)
 800ba92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba96:	f7f4 fb5f 	bl	8000158 <__aeabi_dsub>
 800ba9a:	4622      	mov	r2, r4
 800ba9c:	462b      	mov	r3, r5
 800ba9e:	f7f4 fd13 	bl	80004c8 <__aeabi_dmul>
 800baa2:	a333      	add	r3, pc, #204	@ (adr r3, 800bb70 <__kernel_cos+0x160>)
 800baa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa8:	f7f4 fb58 	bl	800015c <__adddf3>
 800baac:	4622      	mov	r2, r4
 800baae:	462b      	mov	r3, r5
 800bab0:	f7f4 fd0a 	bl	80004c8 <__aeabi_dmul>
 800bab4:	4622      	mov	r2, r4
 800bab6:	462b      	mov	r3, r5
 800bab8:	f7f4 fd06 	bl	80004c8 <__aeabi_dmul>
 800babc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bac0:	4604      	mov	r4, r0
 800bac2:	460d      	mov	r5, r1
 800bac4:	4640      	mov	r0, r8
 800bac6:	4649      	mov	r1, r9
 800bac8:	f7f4 fcfe 	bl	80004c8 <__aeabi_dmul>
 800bacc:	460b      	mov	r3, r1
 800bace:	4602      	mov	r2, r0
 800bad0:	4629      	mov	r1, r5
 800bad2:	4620      	mov	r0, r4
 800bad4:	f7f4 fb40 	bl	8000158 <__aeabi_dsub>
 800bad8:	4b28      	ldr	r3, [pc, #160]	@ (800bb7c <__kernel_cos+0x16c>)
 800bada:	4680      	mov	r8, r0
 800badc:	429e      	cmp	r6, r3
 800bade:	4689      	mov	r9, r1
 800bae0:	d80e      	bhi.n	800bb00 <__kernel_cos+0xf0>
 800bae2:	4602      	mov	r2, r0
 800bae4:	460b      	mov	r3, r1
 800bae6:	4650      	mov	r0, sl
 800bae8:	4659      	mov	r1, fp
 800baea:	f7f4 fb35 	bl	8000158 <__aeabi_dsub>
 800baee:	4602      	mov	r2, r0
 800baf0:	2000      	movs	r0, #0
 800baf2:	460b      	mov	r3, r1
 800baf4:	4922      	ldr	r1, [pc, #136]	@ (800bb80 <__kernel_cos+0x170>)
 800baf6:	f7f4 fb2f 	bl	8000158 <__aeabi_dsub>
 800bafa:	b003      	add	sp, #12
 800bafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb00:	2400      	movs	r4, #0
 800bb02:	4b20      	ldr	r3, [pc, #128]	@ (800bb84 <__kernel_cos+0x174>)
 800bb04:	4622      	mov	r2, r4
 800bb06:	429e      	cmp	r6, r3
 800bb08:	bf8c      	ite	hi
 800bb0a:	4d1f      	ldrhi	r5, [pc, #124]	@ (800bb88 <__kernel_cos+0x178>)
 800bb0c:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 800bb10:	462b      	mov	r3, r5
 800bb12:	2000      	movs	r0, #0
 800bb14:	491a      	ldr	r1, [pc, #104]	@ (800bb80 <__kernel_cos+0x170>)
 800bb16:	f7f4 fb1f 	bl	8000158 <__aeabi_dsub>
 800bb1a:	4622      	mov	r2, r4
 800bb1c:	4606      	mov	r6, r0
 800bb1e:	460f      	mov	r7, r1
 800bb20:	462b      	mov	r3, r5
 800bb22:	4650      	mov	r0, sl
 800bb24:	4659      	mov	r1, fp
 800bb26:	f7f4 fb17 	bl	8000158 <__aeabi_dsub>
 800bb2a:	4642      	mov	r2, r8
 800bb2c:	464b      	mov	r3, r9
 800bb2e:	f7f4 fb13 	bl	8000158 <__aeabi_dsub>
 800bb32:	4602      	mov	r2, r0
 800bb34:	460b      	mov	r3, r1
 800bb36:	4630      	mov	r0, r6
 800bb38:	4639      	mov	r1, r7
 800bb3a:	e7dc      	b.n	800baf6 <__kernel_cos+0xe6>
 800bb3c:	2000      	movs	r0, #0
 800bb3e:	4910      	ldr	r1, [pc, #64]	@ (800bb80 <__kernel_cos+0x170>)
 800bb40:	e7db      	b.n	800bafa <__kernel_cos+0xea>
 800bb42:	bf00      	nop
 800bb44:	f3af 8000 	nop.w
 800bb48:	be8838d4 	.word	0xbe8838d4
 800bb4c:	bda8fae9 	.word	0xbda8fae9
 800bb50:	bdb4b1c4 	.word	0xbdb4b1c4
 800bb54:	3e21ee9e 	.word	0x3e21ee9e
 800bb58:	809c52ad 	.word	0x809c52ad
 800bb5c:	3e927e4f 	.word	0x3e927e4f
 800bb60:	19cb1590 	.word	0x19cb1590
 800bb64:	3efa01a0 	.word	0x3efa01a0
 800bb68:	16c15177 	.word	0x16c15177
 800bb6c:	3f56c16c 	.word	0x3f56c16c
 800bb70:	5555554c 	.word	0x5555554c
 800bb74:	3fa55555 	.word	0x3fa55555
 800bb78:	3fe00000 	.word	0x3fe00000
 800bb7c:	3fd33332 	.word	0x3fd33332
 800bb80:	3ff00000 	.word	0x3ff00000
 800bb84:	3fe90000 	.word	0x3fe90000
 800bb88:	3fd20000 	.word	0x3fd20000
 800bb8c:	00000000 	.word	0x00000000

0800bb90 <__kernel_sin>:
 800bb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb94:	461f      	mov	r7, r3
 800bb96:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bb9a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800bb9e:	4604      	mov	r4, r0
 800bba0:	460d      	mov	r5, r1
 800bba2:	4616      	mov	r6, r2
 800bba4:	b085      	sub	sp, #20
 800bba6:	d203      	bcs.n	800bbb0 <__kernel_sin+0x20>
 800bba8:	f7f4 ff3e 	bl	8000a28 <__aeabi_d2iz>
 800bbac:	2800      	cmp	r0, #0
 800bbae:	d051      	beq.n	800bc54 <__kernel_sin+0xc4>
 800bbb0:	4622      	mov	r2, r4
 800bbb2:	462b      	mov	r3, r5
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	4629      	mov	r1, r5
 800bbb8:	f7f4 fc86 	bl	80004c8 <__aeabi_dmul>
 800bbbc:	4682      	mov	sl, r0
 800bbbe:	468b      	mov	fp, r1
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	4629      	mov	r1, r5
 800bbc8:	f7f4 fc7e 	bl	80004c8 <__aeabi_dmul>
 800bbcc:	a33e      	add	r3, pc, #248	@ (adr r3, 800bcc8 <__kernel_sin+0x138>)
 800bbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd2:	4680      	mov	r8, r0
 800bbd4:	4689      	mov	r9, r1
 800bbd6:	4650      	mov	r0, sl
 800bbd8:	4659      	mov	r1, fp
 800bbda:	f7f4 fc75 	bl	80004c8 <__aeabi_dmul>
 800bbde:	a33c      	add	r3, pc, #240	@ (adr r3, 800bcd0 <__kernel_sin+0x140>)
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	f7f4 fab8 	bl	8000158 <__aeabi_dsub>
 800bbe8:	4652      	mov	r2, sl
 800bbea:	465b      	mov	r3, fp
 800bbec:	f7f4 fc6c 	bl	80004c8 <__aeabi_dmul>
 800bbf0:	a339      	add	r3, pc, #228	@ (adr r3, 800bcd8 <__kernel_sin+0x148>)
 800bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf6:	f7f4 fab1 	bl	800015c <__adddf3>
 800bbfa:	4652      	mov	r2, sl
 800bbfc:	465b      	mov	r3, fp
 800bbfe:	f7f4 fc63 	bl	80004c8 <__aeabi_dmul>
 800bc02:	a337      	add	r3, pc, #220	@ (adr r3, 800bce0 <__kernel_sin+0x150>)
 800bc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc08:	f7f4 faa6 	bl	8000158 <__aeabi_dsub>
 800bc0c:	4652      	mov	r2, sl
 800bc0e:	465b      	mov	r3, fp
 800bc10:	f7f4 fc5a 	bl	80004c8 <__aeabi_dmul>
 800bc14:	a334      	add	r3, pc, #208	@ (adr r3, 800bce8 <__kernel_sin+0x158>)
 800bc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1a:	f7f4 fa9f 	bl	800015c <__adddf3>
 800bc1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc20:	e9cd 0100 	strd	r0, r1, [sp]
 800bc24:	b9db      	cbnz	r3, 800bc5e <__kernel_sin+0xce>
 800bc26:	4602      	mov	r2, r0
 800bc28:	460b      	mov	r3, r1
 800bc2a:	4650      	mov	r0, sl
 800bc2c:	4659      	mov	r1, fp
 800bc2e:	f7f4 fc4b 	bl	80004c8 <__aeabi_dmul>
 800bc32:	a32f      	add	r3, pc, #188	@ (adr r3, 800bcf0 <__kernel_sin+0x160>)
 800bc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc38:	f7f4 fa8e 	bl	8000158 <__aeabi_dsub>
 800bc3c:	4642      	mov	r2, r8
 800bc3e:	464b      	mov	r3, r9
 800bc40:	f7f4 fc42 	bl	80004c8 <__aeabi_dmul>
 800bc44:	4602      	mov	r2, r0
 800bc46:	460b      	mov	r3, r1
 800bc48:	4620      	mov	r0, r4
 800bc4a:	4629      	mov	r1, r5
 800bc4c:	f7f4 fa86 	bl	800015c <__adddf3>
 800bc50:	4604      	mov	r4, r0
 800bc52:	460d      	mov	r5, r1
 800bc54:	4620      	mov	r0, r4
 800bc56:	4629      	mov	r1, r5
 800bc58:	b005      	add	sp, #20
 800bc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc5e:	2200      	movs	r2, #0
 800bc60:	4630      	mov	r0, r6
 800bc62:	4639      	mov	r1, r7
 800bc64:	4b24      	ldr	r3, [pc, #144]	@ (800bcf8 <__kernel_sin+0x168>)
 800bc66:	f7f4 fc2f 	bl	80004c8 <__aeabi_dmul>
 800bc6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc72:	4640      	mov	r0, r8
 800bc74:	4649      	mov	r1, r9
 800bc76:	f7f4 fc27 	bl	80004c8 <__aeabi_dmul>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc82:	f7f4 fa69 	bl	8000158 <__aeabi_dsub>
 800bc86:	4652      	mov	r2, sl
 800bc88:	465b      	mov	r3, fp
 800bc8a:	f7f4 fc1d 	bl	80004c8 <__aeabi_dmul>
 800bc8e:	4632      	mov	r2, r6
 800bc90:	463b      	mov	r3, r7
 800bc92:	f7f4 fa61 	bl	8000158 <__aeabi_dsub>
 800bc96:	a316      	add	r3, pc, #88	@ (adr r3, 800bcf0 <__kernel_sin+0x160>)
 800bc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9c:	4606      	mov	r6, r0
 800bc9e:	460f      	mov	r7, r1
 800bca0:	4640      	mov	r0, r8
 800bca2:	4649      	mov	r1, r9
 800bca4:	f7f4 fc10 	bl	80004c8 <__aeabi_dmul>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	460b      	mov	r3, r1
 800bcac:	4630      	mov	r0, r6
 800bcae:	4639      	mov	r1, r7
 800bcb0:	f7f4 fa54 	bl	800015c <__adddf3>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	4620      	mov	r0, r4
 800bcba:	4629      	mov	r1, r5
 800bcbc:	f7f4 fa4c 	bl	8000158 <__aeabi_dsub>
 800bcc0:	e7c6      	b.n	800bc50 <__kernel_sin+0xc0>
 800bcc2:	bf00      	nop
 800bcc4:	f3af 8000 	nop.w
 800bcc8:	5acfd57c 	.word	0x5acfd57c
 800bccc:	3de5d93a 	.word	0x3de5d93a
 800bcd0:	8a2b9ceb 	.word	0x8a2b9ceb
 800bcd4:	3e5ae5e6 	.word	0x3e5ae5e6
 800bcd8:	57b1fe7d 	.word	0x57b1fe7d
 800bcdc:	3ec71de3 	.word	0x3ec71de3
 800bce0:	19c161d5 	.word	0x19c161d5
 800bce4:	3f2a01a0 	.word	0x3f2a01a0
 800bce8:	1110f8a6 	.word	0x1110f8a6
 800bcec:	3f811111 	.word	0x3f811111
 800bcf0:	55555549 	.word	0x55555549
 800bcf4:	3fc55555 	.word	0x3fc55555
 800bcf8:	3fe00000 	.word	0x3fe00000
 800bcfc:	00000000 	.word	0x00000000

0800bd00 <__ieee754_rem_pio2>:
 800bd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd04:	4bc4      	ldr	r3, [pc, #784]	@ (800c018 <__ieee754_rem_pio2+0x318>)
 800bd06:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800bd0a:	b08d      	sub	sp, #52	@ 0x34
 800bd0c:	4598      	cmp	r8, r3
 800bd0e:	4606      	mov	r6, r0
 800bd10:	460f      	mov	r7, r1
 800bd12:	4614      	mov	r4, r2
 800bd14:	9104      	str	r1, [sp, #16]
 800bd16:	d807      	bhi.n	800bd28 <__ieee754_rem_pio2+0x28>
 800bd18:	e9c2 6700 	strd	r6, r7, [r2]
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	2200      	movs	r2, #0
 800bd20:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bd24:	2500      	movs	r5, #0
 800bd26:	e026      	b.n	800bd76 <__ieee754_rem_pio2+0x76>
 800bd28:	4bbc      	ldr	r3, [pc, #752]	@ (800c01c <__ieee754_rem_pio2+0x31c>)
 800bd2a:	4598      	cmp	r8, r3
 800bd2c:	d876      	bhi.n	800be1c <__ieee754_rem_pio2+0x11c>
 800bd2e:	9b04      	ldr	r3, [sp, #16]
 800bd30:	4dbb      	ldr	r5, [pc, #748]	@ (800c020 <__ieee754_rem_pio2+0x320>)
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	a3aa      	add	r3, pc, #680	@ (adr r3, 800bfe0 <__ieee754_rem_pio2+0x2e0>)
 800bd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3a:	dd38      	ble.n	800bdae <__ieee754_rem_pio2+0xae>
 800bd3c:	f7f4 fa0c 	bl	8000158 <__aeabi_dsub>
 800bd40:	45a8      	cmp	r8, r5
 800bd42:	4606      	mov	r6, r0
 800bd44:	460f      	mov	r7, r1
 800bd46:	d01a      	beq.n	800bd7e <__ieee754_rem_pio2+0x7e>
 800bd48:	a3a7      	add	r3, pc, #668	@ (adr r3, 800bfe8 <__ieee754_rem_pio2+0x2e8>)
 800bd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4e:	f7f4 fa03 	bl	8000158 <__aeabi_dsub>
 800bd52:	4602      	mov	r2, r0
 800bd54:	460b      	mov	r3, r1
 800bd56:	4680      	mov	r8, r0
 800bd58:	4689      	mov	r9, r1
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	4639      	mov	r1, r7
 800bd5e:	f7f4 f9fb 	bl	8000158 <__aeabi_dsub>
 800bd62:	a3a1      	add	r3, pc, #644	@ (adr r3, 800bfe8 <__ieee754_rem_pio2+0x2e8>)
 800bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd68:	f7f4 f9f6 	bl	8000158 <__aeabi_dsub>
 800bd6c:	2501      	movs	r5, #1
 800bd6e:	e9c4 8900 	strd	r8, r9, [r4]
 800bd72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bd76:	4628      	mov	r0, r5
 800bd78:	b00d      	add	sp, #52	@ 0x34
 800bd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd7e:	a39c      	add	r3, pc, #624	@ (adr r3, 800bff0 <__ieee754_rem_pio2+0x2f0>)
 800bd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd84:	f7f4 f9e8 	bl	8000158 <__aeabi_dsub>
 800bd88:	a39b      	add	r3, pc, #620	@ (adr r3, 800bff8 <__ieee754_rem_pio2+0x2f8>)
 800bd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8e:	4606      	mov	r6, r0
 800bd90:	460f      	mov	r7, r1
 800bd92:	f7f4 f9e1 	bl	8000158 <__aeabi_dsub>
 800bd96:	4602      	mov	r2, r0
 800bd98:	460b      	mov	r3, r1
 800bd9a:	4680      	mov	r8, r0
 800bd9c:	4689      	mov	r9, r1
 800bd9e:	4630      	mov	r0, r6
 800bda0:	4639      	mov	r1, r7
 800bda2:	f7f4 f9d9 	bl	8000158 <__aeabi_dsub>
 800bda6:	a394      	add	r3, pc, #592	@ (adr r3, 800bff8 <__ieee754_rem_pio2+0x2f8>)
 800bda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdac:	e7dc      	b.n	800bd68 <__ieee754_rem_pio2+0x68>
 800bdae:	f7f4 f9d5 	bl	800015c <__adddf3>
 800bdb2:	45a8      	cmp	r8, r5
 800bdb4:	4606      	mov	r6, r0
 800bdb6:	460f      	mov	r7, r1
 800bdb8:	d018      	beq.n	800bdec <__ieee754_rem_pio2+0xec>
 800bdba:	a38b      	add	r3, pc, #556	@ (adr r3, 800bfe8 <__ieee754_rem_pio2+0x2e8>)
 800bdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc0:	f7f4 f9cc 	bl	800015c <__adddf3>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	4680      	mov	r8, r0
 800bdca:	4689      	mov	r9, r1
 800bdcc:	4630      	mov	r0, r6
 800bdce:	4639      	mov	r1, r7
 800bdd0:	f7f4 f9c2 	bl	8000158 <__aeabi_dsub>
 800bdd4:	a384      	add	r3, pc, #528	@ (adr r3, 800bfe8 <__ieee754_rem_pio2+0x2e8>)
 800bdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdda:	f7f4 f9bf 	bl	800015c <__adddf3>
 800bdde:	f04f 35ff 	mov.w	r5, #4294967295
 800bde2:	e9c4 8900 	strd	r8, r9, [r4]
 800bde6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bdea:	e7c4      	b.n	800bd76 <__ieee754_rem_pio2+0x76>
 800bdec:	a380      	add	r3, pc, #512	@ (adr r3, 800bff0 <__ieee754_rem_pio2+0x2f0>)
 800bdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf2:	f7f4 f9b3 	bl	800015c <__adddf3>
 800bdf6:	a380      	add	r3, pc, #512	@ (adr r3, 800bff8 <__ieee754_rem_pio2+0x2f8>)
 800bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfc:	4606      	mov	r6, r0
 800bdfe:	460f      	mov	r7, r1
 800be00:	f7f4 f9ac 	bl	800015c <__adddf3>
 800be04:	4602      	mov	r2, r0
 800be06:	460b      	mov	r3, r1
 800be08:	4680      	mov	r8, r0
 800be0a:	4689      	mov	r9, r1
 800be0c:	4630      	mov	r0, r6
 800be0e:	4639      	mov	r1, r7
 800be10:	f7f4 f9a2 	bl	8000158 <__aeabi_dsub>
 800be14:	a378      	add	r3, pc, #480	@ (adr r3, 800bff8 <__ieee754_rem_pio2+0x2f8>)
 800be16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1a:	e7de      	b.n	800bdda <__ieee754_rem_pio2+0xda>
 800be1c:	4b81      	ldr	r3, [pc, #516]	@ (800c024 <__ieee754_rem_pio2+0x324>)
 800be1e:	4598      	cmp	r8, r3
 800be20:	f200 80cf 	bhi.w	800bfc2 <__ieee754_rem_pio2+0x2c2>
 800be24:	f000 f962 	bl	800c0ec <fabs>
 800be28:	a375      	add	r3, pc, #468	@ (adr r3, 800c000 <__ieee754_rem_pio2+0x300>)
 800be2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2e:	4606      	mov	r6, r0
 800be30:	460f      	mov	r7, r1
 800be32:	f7f4 fb49 	bl	80004c8 <__aeabi_dmul>
 800be36:	2200      	movs	r2, #0
 800be38:	4b7b      	ldr	r3, [pc, #492]	@ (800c028 <__ieee754_rem_pio2+0x328>)
 800be3a:	f7f4 f98f 	bl	800015c <__adddf3>
 800be3e:	f7f4 fdf3 	bl	8000a28 <__aeabi_d2iz>
 800be42:	4605      	mov	r5, r0
 800be44:	f7f4 fad6 	bl	80003f4 <__aeabi_i2d>
 800be48:	4602      	mov	r2, r0
 800be4a:	460b      	mov	r3, r1
 800be4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be50:	a363      	add	r3, pc, #396	@ (adr r3, 800bfe0 <__ieee754_rem_pio2+0x2e0>)
 800be52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be56:	f7f4 fb37 	bl	80004c8 <__aeabi_dmul>
 800be5a:	4602      	mov	r2, r0
 800be5c:	460b      	mov	r3, r1
 800be5e:	4630      	mov	r0, r6
 800be60:	4639      	mov	r1, r7
 800be62:	f7f4 f979 	bl	8000158 <__aeabi_dsub>
 800be66:	a360      	add	r3, pc, #384	@ (adr r3, 800bfe8 <__ieee754_rem_pio2+0x2e8>)
 800be68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6c:	4682      	mov	sl, r0
 800be6e:	468b      	mov	fp, r1
 800be70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be74:	f7f4 fb28 	bl	80004c8 <__aeabi_dmul>
 800be78:	2d1f      	cmp	r5, #31
 800be7a:	4606      	mov	r6, r0
 800be7c:	460f      	mov	r7, r1
 800be7e:	dc0c      	bgt.n	800be9a <__ieee754_rem_pio2+0x19a>
 800be80:	4b6a      	ldr	r3, [pc, #424]	@ (800c02c <__ieee754_rem_pio2+0x32c>)
 800be82:	1e6a      	subs	r2, r5, #1
 800be84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be88:	4543      	cmp	r3, r8
 800be8a:	d006      	beq.n	800be9a <__ieee754_rem_pio2+0x19a>
 800be8c:	4632      	mov	r2, r6
 800be8e:	463b      	mov	r3, r7
 800be90:	4650      	mov	r0, sl
 800be92:	4659      	mov	r1, fp
 800be94:	f7f4 f960 	bl	8000158 <__aeabi_dsub>
 800be98:	e00e      	b.n	800beb8 <__ieee754_rem_pio2+0x1b8>
 800be9a:	463b      	mov	r3, r7
 800be9c:	4632      	mov	r2, r6
 800be9e:	4650      	mov	r0, sl
 800bea0:	4659      	mov	r1, fp
 800bea2:	f7f4 f959 	bl	8000158 <__aeabi_dsub>
 800bea6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800beaa:	9305      	str	r3, [sp, #20]
 800beac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800beb0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800beb4:	2b10      	cmp	r3, #16
 800beb6:	dc02      	bgt.n	800bebe <__ieee754_rem_pio2+0x1be>
 800beb8:	e9c4 0100 	strd	r0, r1, [r4]
 800bebc:	e039      	b.n	800bf32 <__ieee754_rem_pio2+0x232>
 800bebe:	a34c      	add	r3, pc, #304	@ (adr r3, 800bff0 <__ieee754_rem_pio2+0x2f0>)
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bec8:	f7f4 fafe 	bl	80004c8 <__aeabi_dmul>
 800becc:	4606      	mov	r6, r0
 800bece:	460f      	mov	r7, r1
 800bed0:	4602      	mov	r2, r0
 800bed2:	460b      	mov	r3, r1
 800bed4:	4650      	mov	r0, sl
 800bed6:	4659      	mov	r1, fp
 800bed8:	f7f4 f93e 	bl	8000158 <__aeabi_dsub>
 800bedc:	4602      	mov	r2, r0
 800bede:	460b      	mov	r3, r1
 800bee0:	4680      	mov	r8, r0
 800bee2:	4689      	mov	r9, r1
 800bee4:	4650      	mov	r0, sl
 800bee6:	4659      	mov	r1, fp
 800bee8:	f7f4 f936 	bl	8000158 <__aeabi_dsub>
 800beec:	4632      	mov	r2, r6
 800beee:	463b      	mov	r3, r7
 800bef0:	f7f4 f932 	bl	8000158 <__aeabi_dsub>
 800bef4:	a340      	add	r3, pc, #256	@ (adr r3, 800bff8 <__ieee754_rem_pio2+0x2f8>)
 800bef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befa:	4606      	mov	r6, r0
 800befc:	460f      	mov	r7, r1
 800befe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf02:	f7f4 fae1 	bl	80004c8 <__aeabi_dmul>
 800bf06:	4632      	mov	r2, r6
 800bf08:	463b      	mov	r3, r7
 800bf0a:	f7f4 f925 	bl	8000158 <__aeabi_dsub>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	460b      	mov	r3, r1
 800bf12:	4606      	mov	r6, r0
 800bf14:	460f      	mov	r7, r1
 800bf16:	4640      	mov	r0, r8
 800bf18:	4649      	mov	r1, r9
 800bf1a:	f7f4 f91d 	bl	8000158 <__aeabi_dsub>
 800bf1e:	9a05      	ldr	r2, [sp, #20]
 800bf20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bf24:	1ad3      	subs	r3, r2, r3
 800bf26:	2b31      	cmp	r3, #49	@ 0x31
 800bf28:	dc20      	bgt.n	800bf6c <__ieee754_rem_pio2+0x26c>
 800bf2a:	46c2      	mov	sl, r8
 800bf2c:	46cb      	mov	fp, r9
 800bf2e:	e9c4 0100 	strd	r0, r1, [r4]
 800bf32:	e9d4 8900 	ldrd	r8, r9, [r4]
 800bf36:	4650      	mov	r0, sl
 800bf38:	4642      	mov	r2, r8
 800bf3a:	464b      	mov	r3, r9
 800bf3c:	4659      	mov	r1, fp
 800bf3e:	f7f4 f90b 	bl	8000158 <__aeabi_dsub>
 800bf42:	463b      	mov	r3, r7
 800bf44:	4632      	mov	r2, r6
 800bf46:	f7f4 f907 	bl	8000158 <__aeabi_dsub>
 800bf4a:	9b04      	ldr	r3, [sp, #16]
 800bf4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	f6bf af10 	bge.w	800bd76 <__ieee754_rem_pio2+0x76>
 800bf56:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800bf5a:	6063      	str	r3, [r4, #4]
 800bf5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf60:	f8c4 8000 	str.w	r8, [r4]
 800bf64:	60a0      	str	r0, [r4, #8]
 800bf66:	60e3      	str	r3, [r4, #12]
 800bf68:	426d      	negs	r5, r5
 800bf6a:	e704      	b.n	800bd76 <__ieee754_rem_pio2+0x76>
 800bf6c:	a326      	add	r3, pc, #152	@ (adr r3, 800c008 <__ieee754_rem_pio2+0x308>)
 800bf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf76:	f7f4 faa7 	bl	80004c8 <__aeabi_dmul>
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	460f      	mov	r7, r1
 800bf7e:	4602      	mov	r2, r0
 800bf80:	460b      	mov	r3, r1
 800bf82:	4640      	mov	r0, r8
 800bf84:	4649      	mov	r1, r9
 800bf86:	f7f4 f8e7 	bl	8000158 <__aeabi_dsub>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	4682      	mov	sl, r0
 800bf90:	468b      	mov	fp, r1
 800bf92:	4640      	mov	r0, r8
 800bf94:	4649      	mov	r1, r9
 800bf96:	f7f4 f8df 	bl	8000158 <__aeabi_dsub>
 800bf9a:	4632      	mov	r2, r6
 800bf9c:	463b      	mov	r3, r7
 800bf9e:	f7f4 f8db 	bl	8000158 <__aeabi_dsub>
 800bfa2:	a31b      	add	r3, pc, #108	@ (adr r3, 800c010 <__ieee754_rem_pio2+0x310>)
 800bfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa8:	4606      	mov	r6, r0
 800bfaa:	460f      	mov	r7, r1
 800bfac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfb0:	f7f4 fa8a 	bl	80004c8 <__aeabi_dmul>
 800bfb4:	4632      	mov	r2, r6
 800bfb6:	463b      	mov	r3, r7
 800bfb8:	f7f4 f8ce 	bl	8000158 <__aeabi_dsub>
 800bfbc:	4606      	mov	r6, r0
 800bfbe:	460f      	mov	r7, r1
 800bfc0:	e764      	b.n	800be8c <__ieee754_rem_pio2+0x18c>
 800bfc2:	4b1b      	ldr	r3, [pc, #108]	@ (800c030 <__ieee754_rem_pio2+0x330>)
 800bfc4:	4598      	cmp	r8, r3
 800bfc6:	d935      	bls.n	800c034 <__ieee754_rem_pio2+0x334>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	460b      	mov	r3, r1
 800bfcc:	f7f4 f8c4 	bl	8000158 <__aeabi_dsub>
 800bfd0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bfd4:	e9c4 0100 	strd	r0, r1, [r4]
 800bfd8:	e6a4      	b.n	800bd24 <__ieee754_rem_pio2+0x24>
 800bfda:	bf00      	nop
 800bfdc:	f3af 8000 	nop.w
 800bfe0:	54400000 	.word	0x54400000
 800bfe4:	3ff921fb 	.word	0x3ff921fb
 800bfe8:	1a626331 	.word	0x1a626331
 800bfec:	3dd0b461 	.word	0x3dd0b461
 800bff0:	1a600000 	.word	0x1a600000
 800bff4:	3dd0b461 	.word	0x3dd0b461
 800bff8:	2e037073 	.word	0x2e037073
 800bffc:	3ba3198a 	.word	0x3ba3198a
 800c000:	6dc9c883 	.word	0x6dc9c883
 800c004:	3fe45f30 	.word	0x3fe45f30
 800c008:	2e000000 	.word	0x2e000000
 800c00c:	3ba3198a 	.word	0x3ba3198a
 800c010:	252049c1 	.word	0x252049c1
 800c014:	397b839a 	.word	0x397b839a
 800c018:	3fe921fb 	.word	0x3fe921fb
 800c01c:	4002d97b 	.word	0x4002d97b
 800c020:	3ff921fb 	.word	0x3ff921fb
 800c024:	413921fb 	.word	0x413921fb
 800c028:	3fe00000 	.word	0x3fe00000
 800c02c:	0800e070 	.word	0x0800e070
 800c030:	7fefffff 	.word	0x7fefffff
 800c034:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c038:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800c03c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c040:	460f      	mov	r7, r1
 800c042:	f7f4 fcf1 	bl	8000a28 <__aeabi_d2iz>
 800c046:	f7f4 f9d5 	bl	80003f4 <__aeabi_i2d>
 800c04a:	4602      	mov	r2, r0
 800c04c:	460b      	mov	r3, r1
 800c04e:	4630      	mov	r0, r6
 800c050:	4639      	mov	r1, r7
 800c052:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c056:	f7f4 f87f 	bl	8000158 <__aeabi_dsub>
 800c05a:	2200      	movs	r2, #0
 800c05c:	4b21      	ldr	r3, [pc, #132]	@ (800c0e4 <__ieee754_rem_pio2+0x3e4>)
 800c05e:	f7f4 fa33 	bl	80004c8 <__aeabi_dmul>
 800c062:	460f      	mov	r7, r1
 800c064:	4606      	mov	r6, r0
 800c066:	f7f4 fcdf 	bl	8000a28 <__aeabi_d2iz>
 800c06a:	f7f4 f9c3 	bl	80003f4 <__aeabi_i2d>
 800c06e:	4602      	mov	r2, r0
 800c070:	460b      	mov	r3, r1
 800c072:	4630      	mov	r0, r6
 800c074:	4639      	mov	r1, r7
 800c076:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c07a:	f7f4 f86d 	bl	8000158 <__aeabi_dsub>
 800c07e:	2200      	movs	r2, #0
 800c080:	4b18      	ldr	r3, [pc, #96]	@ (800c0e4 <__ieee754_rem_pio2+0x3e4>)
 800c082:	f7f4 fa21 	bl	80004c8 <__aeabi_dmul>
 800c086:	f04f 0803 	mov.w	r8, #3
 800c08a:	2600      	movs	r6, #0
 800c08c:	2700      	movs	r7, #0
 800c08e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800c092:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800c096:	4632      	mov	r2, r6
 800c098:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c09c:	463b      	mov	r3, r7
 800c09e:	46c2      	mov	sl, r8
 800c0a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c0a4:	f7f4 fc78 	bl	8000998 <__aeabi_dcmpeq>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d1f4      	bne.n	800c096 <__ieee754_rem_pio2+0x396>
 800c0ac:	4b0e      	ldr	r3, [pc, #56]	@ (800c0e8 <__ieee754_rem_pio2+0x3e8>)
 800c0ae:	462a      	mov	r2, r5
 800c0b0:	9301      	str	r3, [sp, #4]
 800c0b2:	2302      	movs	r3, #2
 800c0b4:	4621      	mov	r1, r4
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	a806      	add	r0, sp, #24
 800c0ba:	4653      	mov	r3, sl
 800c0bc:	f000 f81a 	bl	800c0f4 <__kernel_rem_pio2>
 800c0c0:	9b04      	ldr	r3, [sp, #16]
 800c0c2:	4605      	mov	r5, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f6bf ae56 	bge.w	800bd76 <__ieee754_rem_pio2+0x76>
 800c0ca:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c0ce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c0d2:	e9c4 2300 	strd	r2, r3, [r4]
 800c0d6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c0da:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c0de:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c0e2:	e741      	b.n	800bf68 <__ieee754_rem_pio2+0x268>
 800c0e4:	41700000 	.word	0x41700000
 800c0e8:	0800e0f0 	.word	0x0800e0f0

0800c0ec <fabs>:
 800c0ec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	4770      	bx	lr

0800c0f4 <__kernel_rem_pio2>:
 800c0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800c0fc:	9308      	str	r3, [sp, #32]
 800c0fe:	9104      	str	r1, [sp, #16]
 800c100:	4bb6      	ldr	r3, [pc, #728]	@ (800c3dc <__kernel_rem_pio2+0x2e8>)
 800c102:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800c104:	f112 0f14 	cmn.w	r2, #20
 800c108:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c10c:	bfa8      	it	ge
 800c10e:	1ed4      	subge	r4, r2, #3
 800c110:	9302      	str	r3, [sp, #8]
 800c112:	9b08      	ldr	r3, [sp, #32]
 800c114:	bfb8      	it	lt
 800c116:	2400      	movlt	r4, #0
 800c118:	f103 33ff 	add.w	r3, r3, #4294967295
 800c11c:	9306      	str	r3, [sp, #24]
 800c11e:	bfa4      	itt	ge
 800c120:	2318      	movge	r3, #24
 800c122:	fb94 f4f3 	sdivge	r4, r4, r3
 800c126:	f06f 0317 	mvn.w	r3, #23
 800c12a:	fb04 3303 	mla	r3, r4, r3, r3
 800c12e:	eb03 0a02 	add.w	sl, r3, r2
 800c132:	9a06      	ldr	r2, [sp, #24]
 800c134:	9b02      	ldr	r3, [sp, #8]
 800c136:	1aa7      	subs	r7, r4, r2
 800c138:	eb03 0802 	add.w	r8, r3, r2
 800c13c:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800c13e:	2500      	movs	r5, #0
 800c140:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c144:	2200      	movs	r2, #0
 800c146:	2300      	movs	r3, #0
 800c148:	9009      	str	r0, [sp, #36]	@ 0x24
 800c14a:	ae20      	add	r6, sp, #128	@ 0x80
 800c14c:	4545      	cmp	r5, r8
 800c14e:	dd14      	ble.n	800c17a <__kernel_rem_pio2+0x86>
 800c150:	f04f 0800 	mov.w	r8, #0
 800c154:	9a08      	ldr	r2, [sp, #32]
 800c156:	ab20      	add	r3, sp, #128	@ 0x80
 800c158:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800c15c:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800c160:	9b02      	ldr	r3, [sp, #8]
 800c162:	4598      	cmp	r8, r3
 800c164:	dc35      	bgt.n	800c1d2 <__kernel_rem_pio2+0xde>
 800c166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c168:	2200      	movs	r2, #0
 800c16a:	f1a3 0908 	sub.w	r9, r3, #8
 800c16e:	2300      	movs	r3, #0
 800c170:	462f      	mov	r7, r5
 800c172:	2600      	movs	r6, #0
 800c174:	e9cd 2300 	strd	r2, r3, [sp]
 800c178:	e01f      	b.n	800c1ba <__kernel_rem_pio2+0xc6>
 800c17a:	42ef      	cmn	r7, r5
 800c17c:	d40b      	bmi.n	800c196 <__kernel_rem_pio2+0xa2>
 800c17e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c182:	e9cd 2300 	strd	r2, r3, [sp]
 800c186:	f7f4 f935 	bl	80003f4 <__aeabi_i2d>
 800c18a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c18e:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c192:	3501      	adds	r5, #1
 800c194:	e7da      	b.n	800c14c <__kernel_rem_pio2+0x58>
 800c196:	4610      	mov	r0, r2
 800c198:	4619      	mov	r1, r3
 800c19a:	e7f8      	b.n	800c18e <__kernel_rem_pio2+0x9a>
 800c19c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1a0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800c1a4:	f7f4 f990 	bl	80004c8 <__aeabi_dmul>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	460b      	mov	r3, r1
 800c1ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1b0:	f7f3 ffd4 	bl	800015c <__adddf3>
 800c1b4:	e9cd 0100 	strd	r0, r1, [sp]
 800c1b8:	3601      	adds	r6, #1
 800c1ba:	9b06      	ldr	r3, [sp, #24]
 800c1bc:	3f08      	subs	r7, #8
 800c1be:	429e      	cmp	r6, r3
 800c1c0:	ddec      	ble.n	800c19c <__kernel_rem_pio2+0xa8>
 800c1c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1c6:	f108 0801 	add.w	r8, r8, #1
 800c1ca:	e8eb 2302 	strd	r2, r3, [fp], #8
 800c1ce:	3508      	adds	r5, #8
 800c1d0:	e7c6      	b.n	800c160 <__kernel_rem_pio2+0x6c>
 800c1d2:	9b02      	ldr	r3, [sp, #8]
 800c1d4:	aa0c      	add	r2, sp, #48	@ 0x30
 800c1d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1dc:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800c1de:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c1e2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c1e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1e8:	ab98      	add	r3, sp, #608	@ 0x260
 800c1ea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c1ee:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800c1f2:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c1f4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c1f8:	ae0c      	add	r6, sp, #48	@ 0x30
 800c1fa:	4698      	mov	r8, r3
 800c1fc:	46b1      	mov	r9, r6
 800c1fe:	465f      	mov	r7, fp
 800c200:	9307      	str	r3, [sp, #28]
 800c202:	2f00      	cmp	r7, #0
 800c204:	f1a8 0808 	sub.w	r8, r8, #8
 800c208:	dc71      	bgt.n	800c2ee <__kernel_rem_pio2+0x1fa>
 800c20a:	4652      	mov	r2, sl
 800c20c:	4620      	mov	r0, r4
 800c20e:	4629      	mov	r1, r5
 800c210:	f000 fa96 	bl	800c740 <scalbn>
 800c214:	2200      	movs	r2, #0
 800c216:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c21a:	4604      	mov	r4, r0
 800c21c:	460d      	mov	r5, r1
 800c21e:	f7f4 f953 	bl	80004c8 <__aeabi_dmul>
 800c222:	f000 fb05 	bl	800c830 <floor>
 800c226:	2200      	movs	r2, #0
 800c228:	4b6d      	ldr	r3, [pc, #436]	@ (800c3e0 <__kernel_rem_pio2+0x2ec>)
 800c22a:	f7f4 f94d 	bl	80004c8 <__aeabi_dmul>
 800c22e:	4602      	mov	r2, r0
 800c230:	460b      	mov	r3, r1
 800c232:	4620      	mov	r0, r4
 800c234:	4629      	mov	r1, r5
 800c236:	f7f3 ff8f 	bl	8000158 <__aeabi_dsub>
 800c23a:	460d      	mov	r5, r1
 800c23c:	4604      	mov	r4, r0
 800c23e:	f7f4 fbf3 	bl	8000a28 <__aeabi_d2iz>
 800c242:	9005      	str	r0, [sp, #20]
 800c244:	f7f4 f8d6 	bl	80003f4 <__aeabi_i2d>
 800c248:	4602      	mov	r2, r0
 800c24a:	460b      	mov	r3, r1
 800c24c:	4620      	mov	r0, r4
 800c24e:	4629      	mov	r1, r5
 800c250:	f7f3 ff82 	bl	8000158 <__aeabi_dsub>
 800c254:	f1ba 0f00 	cmp.w	sl, #0
 800c258:	4680      	mov	r8, r0
 800c25a:	4689      	mov	r9, r1
 800c25c:	dd6d      	ble.n	800c33a <__kernel_rem_pio2+0x246>
 800c25e:	f10b 31ff 	add.w	r1, fp, #4294967295
 800c262:	ab0c      	add	r3, sp, #48	@ 0x30
 800c264:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c268:	9c05      	ldr	r4, [sp, #20]
 800c26a:	f1ca 0018 	rsb	r0, sl, #24
 800c26e:	fa43 f200 	asr.w	r2, r3, r0
 800c272:	4414      	add	r4, r2
 800c274:	4082      	lsls	r2, r0
 800c276:	1a9b      	subs	r3, r3, r2
 800c278:	aa0c      	add	r2, sp, #48	@ 0x30
 800c27a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c27e:	f1ca 0217 	rsb	r2, sl, #23
 800c282:	9405      	str	r4, [sp, #20]
 800c284:	4113      	asrs	r3, r2
 800c286:	9300      	str	r3, [sp, #0]
 800c288:	9b00      	ldr	r3, [sp, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	dd64      	ble.n	800c358 <__kernel_rem_pio2+0x264>
 800c28e:	2200      	movs	r2, #0
 800c290:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800c294:	4614      	mov	r4, r2
 800c296:	9b05      	ldr	r3, [sp, #20]
 800c298:	3301      	adds	r3, #1
 800c29a:	9305      	str	r3, [sp, #20]
 800c29c:	4593      	cmp	fp, r2
 800c29e:	f300 80ab 	bgt.w	800c3f8 <__kernel_rem_pio2+0x304>
 800c2a2:	f1ba 0f00 	cmp.w	sl, #0
 800c2a6:	dd07      	ble.n	800c2b8 <__kernel_rem_pio2+0x1c4>
 800c2a8:	f1ba 0f01 	cmp.w	sl, #1
 800c2ac:	f000 80b2 	beq.w	800c414 <__kernel_rem_pio2+0x320>
 800c2b0:	f1ba 0f02 	cmp.w	sl, #2
 800c2b4:	f000 80b9 	beq.w	800c42a <__kernel_rem_pio2+0x336>
 800c2b8:	9b00      	ldr	r3, [sp, #0]
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d14c      	bne.n	800c358 <__kernel_rem_pio2+0x264>
 800c2be:	4642      	mov	r2, r8
 800c2c0:	464b      	mov	r3, r9
 800c2c2:	2000      	movs	r0, #0
 800c2c4:	4947      	ldr	r1, [pc, #284]	@ (800c3e4 <__kernel_rem_pio2+0x2f0>)
 800c2c6:	f7f3 ff47 	bl	8000158 <__aeabi_dsub>
 800c2ca:	4680      	mov	r8, r0
 800c2cc:	4689      	mov	r9, r1
 800c2ce:	2c00      	cmp	r4, #0
 800c2d0:	d042      	beq.n	800c358 <__kernel_rem_pio2+0x264>
 800c2d2:	4652      	mov	r2, sl
 800c2d4:	2000      	movs	r0, #0
 800c2d6:	4943      	ldr	r1, [pc, #268]	@ (800c3e4 <__kernel_rem_pio2+0x2f0>)
 800c2d8:	f000 fa32 	bl	800c740 <scalbn>
 800c2dc:	4602      	mov	r2, r0
 800c2de:	460b      	mov	r3, r1
 800c2e0:	4640      	mov	r0, r8
 800c2e2:	4649      	mov	r1, r9
 800c2e4:	f7f3 ff38 	bl	8000158 <__aeabi_dsub>
 800c2e8:	4680      	mov	r8, r0
 800c2ea:	4689      	mov	r9, r1
 800c2ec:	e034      	b.n	800c358 <__kernel_rem_pio2+0x264>
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	4b3d      	ldr	r3, [pc, #244]	@ (800c3e8 <__kernel_rem_pio2+0x2f4>)
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	4629      	mov	r1, r5
 800c2f6:	f7f4 f8e7 	bl	80004c8 <__aeabi_dmul>
 800c2fa:	f7f4 fb95 	bl	8000a28 <__aeabi_d2iz>
 800c2fe:	f7f4 f879 	bl	80003f4 <__aeabi_i2d>
 800c302:	4602      	mov	r2, r0
 800c304:	460b      	mov	r3, r1
 800c306:	e9cd 2300 	strd	r2, r3, [sp]
 800c30a:	2200      	movs	r2, #0
 800c30c:	4b37      	ldr	r3, [pc, #220]	@ (800c3ec <__kernel_rem_pio2+0x2f8>)
 800c30e:	f7f4 f8db 	bl	80004c8 <__aeabi_dmul>
 800c312:	4602      	mov	r2, r0
 800c314:	460b      	mov	r3, r1
 800c316:	4620      	mov	r0, r4
 800c318:	4629      	mov	r1, r5
 800c31a:	f7f3 ff1d 	bl	8000158 <__aeabi_dsub>
 800c31e:	f7f4 fb83 	bl	8000a28 <__aeabi_d2iz>
 800c322:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c326:	f849 0b04 	str.w	r0, [r9], #4
 800c32a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c32e:	f7f3 ff15 	bl	800015c <__adddf3>
 800c332:	3f01      	subs	r7, #1
 800c334:	4604      	mov	r4, r0
 800c336:	460d      	mov	r5, r1
 800c338:	e763      	b.n	800c202 <__kernel_rem_pio2+0x10e>
 800c33a:	d106      	bne.n	800c34a <__kernel_rem_pio2+0x256>
 800c33c:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c340:	aa0c      	add	r2, sp, #48	@ 0x30
 800c342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c346:	15db      	asrs	r3, r3, #23
 800c348:	e79d      	b.n	800c286 <__kernel_rem_pio2+0x192>
 800c34a:	2200      	movs	r2, #0
 800c34c:	4b28      	ldr	r3, [pc, #160]	@ (800c3f0 <__kernel_rem_pio2+0x2fc>)
 800c34e:	f7f4 fb41 	bl	80009d4 <__aeabi_dcmpge>
 800c352:	2800      	cmp	r0, #0
 800c354:	d13f      	bne.n	800c3d6 <__kernel_rem_pio2+0x2e2>
 800c356:	9000      	str	r0, [sp, #0]
 800c358:	2200      	movs	r2, #0
 800c35a:	2300      	movs	r3, #0
 800c35c:	4640      	mov	r0, r8
 800c35e:	4649      	mov	r1, r9
 800c360:	f7f4 fb1a 	bl	8000998 <__aeabi_dcmpeq>
 800c364:	2800      	cmp	r0, #0
 800c366:	f000 80af 	beq.w	800c4c8 <__kernel_rem_pio2+0x3d4>
 800c36a:	2200      	movs	r2, #0
 800c36c:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c370:	9902      	ldr	r1, [sp, #8]
 800c372:	428b      	cmp	r3, r1
 800c374:	da61      	bge.n	800c43a <__kernel_rem_pio2+0x346>
 800c376:	2a00      	cmp	r2, #0
 800c378:	d076      	beq.n	800c468 <__kernel_rem_pio2+0x374>
 800c37a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c37e:	ab0c      	add	r3, sp, #48	@ 0x30
 800c380:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800c384:	f1aa 0a18 	sub.w	sl, sl, #24
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d0f6      	beq.n	800c37a <__kernel_rem_pio2+0x286>
 800c38c:	4652      	mov	r2, sl
 800c38e:	2000      	movs	r0, #0
 800c390:	4914      	ldr	r1, [pc, #80]	@ (800c3e4 <__kernel_rem_pio2+0x2f0>)
 800c392:	f000 f9d5 	bl	800c740 <scalbn>
 800c396:	465d      	mov	r5, fp
 800c398:	4606      	mov	r6, r0
 800c39a:	460f      	mov	r7, r1
 800c39c:	f04f 0900 	mov.w	r9, #0
 800c3a0:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c3a2:	f8df a044 	ldr.w	sl, [pc, #68]	@ 800c3e8 <__kernel_rem_pio2+0x2f4>
 800c3a6:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800c3aa:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800c3ae:	2d00      	cmp	r5, #0
 800c3b0:	f280 80c0 	bge.w	800c534 <__kernel_rem_pio2+0x440>
 800c3b4:	465d      	mov	r5, fp
 800c3b6:	2d00      	cmp	r5, #0
 800c3b8:	f2c0 80f0 	blt.w	800c59c <__kernel_rem_pio2+0x4a8>
 800c3bc:	4b0d      	ldr	r3, [pc, #52]	@ (800c3f4 <__kernel_rem_pio2+0x300>)
 800c3be:	f04f 0900 	mov.w	r9, #0
 800c3c2:	9306      	str	r3, [sp, #24]
 800c3c4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c3c6:	f04f 0a00 	mov.w	sl, #0
 800c3ca:	2700      	movs	r7, #0
 800c3cc:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800c3d0:	ebab 0605 	sub.w	r6, fp, r5
 800c3d4:	e0d6      	b.n	800c584 <__kernel_rem_pio2+0x490>
 800c3d6:	2302      	movs	r3, #2
 800c3d8:	9300      	str	r3, [sp, #0]
 800c3da:	e758      	b.n	800c28e <__kernel_rem_pio2+0x19a>
 800c3dc:	0800e238 	.word	0x0800e238
 800c3e0:	40200000 	.word	0x40200000
 800c3e4:	3ff00000 	.word	0x3ff00000
 800c3e8:	3e700000 	.word	0x3e700000
 800c3ec:	41700000 	.word	0x41700000
 800c3f0:	3fe00000 	.word	0x3fe00000
 800c3f4:	0800e1f8 	.word	0x0800e1f8
 800c3f8:	f856 3b04 	ldr.w	r3, [r6], #4
 800c3fc:	b944      	cbnz	r4, 800c410 <__kernel_rem_pio2+0x31c>
 800c3fe:	b123      	cbz	r3, 800c40a <__kernel_rem_pio2+0x316>
 800c400:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800c404:	f846 3c04 	str.w	r3, [r6, #-4]
 800c408:	2301      	movs	r3, #1
 800c40a:	461c      	mov	r4, r3
 800c40c:	3201      	adds	r2, #1
 800c40e:	e745      	b.n	800c29c <__kernel_rem_pio2+0x1a8>
 800c410:	1acb      	subs	r3, r1, r3
 800c412:	e7f7      	b.n	800c404 <__kernel_rem_pio2+0x310>
 800c414:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c418:	ab0c      	add	r3, sp, #48	@ 0x30
 800c41a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c41e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c422:	a90c      	add	r1, sp, #48	@ 0x30
 800c424:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c428:	e746      	b.n	800c2b8 <__kernel_rem_pio2+0x1c4>
 800c42a:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c42e:	ab0c      	add	r3, sp, #48	@ 0x30
 800c430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c434:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c438:	e7f3      	b.n	800c422 <__kernel_rem_pio2+0x32e>
 800c43a:	a90c      	add	r1, sp, #48	@ 0x30
 800c43c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c440:	3b01      	subs	r3, #1
 800c442:	430a      	orrs	r2, r1
 800c444:	e794      	b.n	800c370 <__kernel_rem_pio2+0x27c>
 800c446:	3401      	adds	r4, #1
 800c448:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c44c:	2a00      	cmp	r2, #0
 800c44e:	d0fa      	beq.n	800c446 <__kernel_rem_pio2+0x352>
 800c450:	9b08      	ldr	r3, [sp, #32]
 800c452:	aa20      	add	r2, sp, #128	@ 0x80
 800c454:	445b      	add	r3, fp
 800c456:	f10b 0801 	add.w	r8, fp, #1
 800c45a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c45e:	445c      	add	r4, fp
 800c460:	4544      	cmp	r4, r8
 800c462:	da04      	bge.n	800c46e <__kernel_rem_pio2+0x37a>
 800c464:	46a3      	mov	fp, r4
 800c466:	e6bf      	b.n	800c1e8 <__kernel_rem_pio2+0xf4>
 800c468:	2401      	movs	r4, #1
 800c46a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c46c:	e7ec      	b.n	800c448 <__kernel_rem_pio2+0x354>
 800c46e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c470:	46ab      	mov	fp, r5
 800c472:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c476:	f7f3 ffbd 	bl	80003f4 <__aeabi_i2d>
 800c47a:	f04f 0900 	mov.w	r9, #0
 800c47e:	2600      	movs	r6, #0
 800c480:	2700      	movs	r7, #0
 800c482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c484:	e9c5 0100 	strd	r0, r1, [r5]
 800c488:	3b08      	subs	r3, #8
 800c48a:	9300      	str	r3, [sp, #0]
 800c48c:	9b06      	ldr	r3, [sp, #24]
 800c48e:	4599      	cmp	r9, r3
 800c490:	dd07      	ble.n	800c4a2 <__kernel_rem_pio2+0x3ae>
 800c492:	9b07      	ldr	r3, [sp, #28]
 800c494:	f108 0801 	add.w	r8, r8, #1
 800c498:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800c49c:	3508      	adds	r5, #8
 800c49e:	9307      	str	r3, [sp, #28]
 800c4a0:	e7de      	b.n	800c460 <__kernel_rem_pio2+0x36c>
 800c4a2:	9900      	ldr	r1, [sp, #0]
 800c4a4:	f109 0901 	add.w	r9, r9, #1
 800c4a8:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800c4ac:	9100      	str	r1, [sp, #0]
 800c4ae:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800c4b2:	f7f4 f809 	bl	80004c8 <__aeabi_dmul>
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	4630      	mov	r0, r6
 800c4bc:	4639      	mov	r1, r7
 800c4be:	f7f3 fe4d 	bl	800015c <__adddf3>
 800c4c2:	4606      	mov	r6, r0
 800c4c4:	460f      	mov	r7, r1
 800c4c6:	e7e1      	b.n	800c48c <__kernel_rem_pio2+0x398>
 800c4c8:	f1ca 0200 	rsb	r2, sl, #0
 800c4cc:	4640      	mov	r0, r8
 800c4ce:	4649      	mov	r1, r9
 800c4d0:	f000 f936 	bl	800c740 <scalbn>
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	4b97      	ldr	r3, [pc, #604]	@ (800c734 <__kernel_rem_pio2+0x640>)
 800c4d8:	4604      	mov	r4, r0
 800c4da:	460d      	mov	r5, r1
 800c4dc:	f7f4 fa7a 	bl	80009d4 <__aeabi_dcmpge>
 800c4e0:	b300      	cbz	r0, 800c524 <__kernel_rem_pio2+0x430>
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	4b94      	ldr	r3, [pc, #592]	@ (800c738 <__kernel_rem_pio2+0x644>)
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	4629      	mov	r1, r5
 800c4ea:	f7f3 ffed 	bl	80004c8 <__aeabi_dmul>
 800c4ee:	f7f4 fa9b 	bl	8000a28 <__aeabi_d2iz>
 800c4f2:	4606      	mov	r6, r0
 800c4f4:	f7f3 ff7e 	bl	80003f4 <__aeabi_i2d>
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	4b8e      	ldr	r3, [pc, #568]	@ (800c734 <__kernel_rem_pio2+0x640>)
 800c4fc:	f7f3 ffe4 	bl	80004c8 <__aeabi_dmul>
 800c500:	460b      	mov	r3, r1
 800c502:	4602      	mov	r2, r0
 800c504:	4629      	mov	r1, r5
 800c506:	4620      	mov	r0, r4
 800c508:	f7f3 fe26 	bl	8000158 <__aeabi_dsub>
 800c50c:	f7f4 fa8c 	bl	8000a28 <__aeabi_d2iz>
 800c510:	ab0c      	add	r3, sp, #48	@ 0x30
 800c512:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800c516:	f10b 0b01 	add.w	fp, fp, #1
 800c51a:	f10a 0a18 	add.w	sl, sl, #24
 800c51e:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800c522:	e733      	b.n	800c38c <__kernel_rem_pio2+0x298>
 800c524:	4620      	mov	r0, r4
 800c526:	4629      	mov	r1, r5
 800c528:	f7f4 fa7e 	bl	8000a28 <__aeabi_d2iz>
 800c52c:	ab0c      	add	r3, sp, #48	@ 0x30
 800c52e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800c532:	e72b      	b.n	800c38c <__kernel_rem_pio2+0x298>
 800c534:	ab0c      	add	r3, sp, #48	@ 0x30
 800c536:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c53a:	f7f3 ff5b 	bl	80003f4 <__aeabi_i2d>
 800c53e:	4632      	mov	r2, r6
 800c540:	463b      	mov	r3, r7
 800c542:	f7f3 ffc1 	bl	80004c8 <__aeabi_dmul>
 800c546:	464a      	mov	r2, r9
 800c548:	e868 0102 	strd	r0, r1, [r8], #-8
 800c54c:	4653      	mov	r3, sl
 800c54e:	4630      	mov	r0, r6
 800c550:	4639      	mov	r1, r7
 800c552:	f7f3 ffb9 	bl	80004c8 <__aeabi_dmul>
 800c556:	3d01      	subs	r5, #1
 800c558:	4606      	mov	r6, r0
 800c55a:	460f      	mov	r7, r1
 800c55c:	e727      	b.n	800c3ae <__kernel_rem_pio2+0x2ba>
 800c55e:	f8dd c018 	ldr.w	ip, [sp, #24]
 800c562:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800c566:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800c56a:	f8cd c018 	str.w	ip, [sp, #24]
 800c56e:	f7f3 ffab 	bl	80004c8 <__aeabi_dmul>
 800c572:	4602      	mov	r2, r0
 800c574:	460b      	mov	r3, r1
 800c576:	4648      	mov	r0, r9
 800c578:	4651      	mov	r1, sl
 800c57a:	f7f3 fdef 	bl	800015c <__adddf3>
 800c57e:	4681      	mov	r9, r0
 800c580:	468a      	mov	sl, r1
 800c582:	3701      	adds	r7, #1
 800c584:	9b02      	ldr	r3, [sp, #8]
 800c586:	429f      	cmp	r7, r3
 800c588:	dc01      	bgt.n	800c58e <__kernel_rem_pio2+0x49a>
 800c58a:	42be      	cmp	r6, r7
 800c58c:	dae7      	bge.n	800c55e <__kernel_rem_pio2+0x46a>
 800c58e:	ab48      	add	r3, sp, #288	@ 0x120
 800c590:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c594:	e9c6 9a00 	strd	r9, sl, [r6]
 800c598:	3d01      	subs	r5, #1
 800c59a:	e70c      	b.n	800c3b6 <__kernel_rem_pio2+0x2c2>
 800c59c:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800c59e:	2b02      	cmp	r3, #2
 800c5a0:	dc09      	bgt.n	800c5b6 <__kernel_rem_pio2+0x4c2>
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	dc2c      	bgt.n	800c600 <__kernel_rem_pio2+0x50c>
 800c5a6:	d04e      	beq.n	800c646 <__kernel_rem_pio2+0x552>
 800c5a8:	9b05      	ldr	r3, [sp, #20]
 800c5aa:	f003 0007 	and.w	r0, r3, #7
 800c5ae:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5b6:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800c5b8:	2b03      	cmp	r3, #3
 800c5ba:	d1f5      	bne.n	800c5a8 <__kernel_rem_pio2+0x4b4>
 800c5bc:	ab48      	add	r3, sp, #288	@ 0x120
 800c5be:	441c      	add	r4, r3
 800c5c0:	4625      	mov	r5, r4
 800c5c2:	46da      	mov	sl, fp
 800c5c4:	f1ba 0f00 	cmp.w	sl, #0
 800c5c8:	dc63      	bgt.n	800c692 <__kernel_rem_pio2+0x59e>
 800c5ca:	4625      	mov	r5, r4
 800c5cc:	46da      	mov	sl, fp
 800c5ce:	f1ba 0f01 	cmp.w	sl, #1
 800c5d2:	dc7b      	bgt.n	800c6cc <__kernel_rem_pio2+0x5d8>
 800c5d4:	2000      	movs	r0, #0
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	f1bb 0f01 	cmp.w	fp, #1
 800c5dc:	f300 8093 	bgt.w	800c706 <__kernel_rem_pio2+0x612>
 800c5e0:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800c5e4:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800c5e8:	9b00      	ldr	r3, [sp, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f040 8092 	bne.w	800c714 <__kernel_rem_pio2+0x620>
 800c5f0:	9b04      	ldr	r3, [sp, #16]
 800c5f2:	e9c3 7800 	strd	r7, r8, [r3]
 800c5f6:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c5fa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c5fe:	e7d3      	b.n	800c5a8 <__kernel_rem_pio2+0x4b4>
 800c600:	465d      	mov	r5, fp
 800c602:	2000      	movs	r0, #0
 800c604:	2100      	movs	r1, #0
 800c606:	ab48      	add	r3, sp, #288	@ 0x120
 800c608:	441c      	add	r4, r3
 800c60a:	2d00      	cmp	r5, #0
 800c60c:	da32      	bge.n	800c674 <__kernel_rem_pio2+0x580>
 800c60e:	9b00      	ldr	r3, [sp, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d035      	beq.n	800c680 <__kernel_rem_pio2+0x58c>
 800c614:	4602      	mov	r2, r0
 800c616:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c61a:	9c04      	ldr	r4, [sp, #16]
 800c61c:	2501      	movs	r5, #1
 800c61e:	e9c4 2300 	strd	r2, r3, [r4]
 800c622:	4602      	mov	r2, r0
 800c624:	460b      	mov	r3, r1
 800c626:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c62a:	f7f3 fd95 	bl	8000158 <__aeabi_dsub>
 800c62e:	ac48      	add	r4, sp, #288	@ 0x120
 800c630:	45ab      	cmp	fp, r5
 800c632:	da28      	bge.n	800c686 <__kernel_rem_pio2+0x592>
 800c634:	9b00      	ldr	r3, [sp, #0]
 800c636:	b113      	cbz	r3, 800c63e <__kernel_rem_pio2+0x54a>
 800c638:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c63c:	4619      	mov	r1, r3
 800c63e:	9b04      	ldr	r3, [sp, #16]
 800c640:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c644:	e7b0      	b.n	800c5a8 <__kernel_rem_pio2+0x4b4>
 800c646:	2000      	movs	r0, #0
 800c648:	2100      	movs	r1, #0
 800c64a:	ab48      	add	r3, sp, #288	@ 0x120
 800c64c:	441c      	add	r4, r3
 800c64e:	f1bb 0f00 	cmp.w	fp, #0
 800c652:	da08      	bge.n	800c666 <__kernel_rem_pio2+0x572>
 800c654:	9b00      	ldr	r3, [sp, #0]
 800c656:	b113      	cbz	r3, 800c65e <__kernel_rem_pio2+0x56a>
 800c658:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c65c:	4619      	mov	r1, r3
 800c65e:	9b04      	ldr	r3, [sp, #16]
 800c660:	e9c3 0100 	strd	r0, r1, [r3]
 800c664:	e7a0      	b.n	800c5a8 <__kernel_rem_pio2+0x4b4>
 800c666:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800c66a:	f7f3 fd77 	bl	800015c <__adddf3>
 800c66e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c672:	e7ec      	b.n	800c64e <__kernel_rem_pio2+0x55a>
 800c674:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800c678:	f7f3 fd70 	bl	800015c <__adddf3>
 800c67c:	3d01      	subs	r5, #1
 800c67e:	e7c4      	b.n	800c60a <__kernel_rem_pio2+0x516>
 800c680:	4602      	mov	r2, r0
 800c682:	460b      	mov	r3, r1
 800c684:	e7c9      	b.n	800c61a <__kernel_rem_pio2+0x526>
 800c686:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800c68a:	f7f3 fd67 	bl	800015c <__adddf3>
 800c68e:	3501      	adds	r5, #1
 800c690:	e7ce      	b.n	800c630 <__kernel_rem_pio2+0x53c>
 800c692:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c696:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800c69a:	4640      	mov	r0, r8
 800c69c:	4649      	mov	r1, r9
 800c69e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c6a2:	f7f3 fd5b 	bl	800015c <__adddf3>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	4606      	mov	r6, r0
 800c6ac:	460f      	mov	r7, r1
 800c6ae:	4640      	mov	r0, r8
 800c6b0:	4649      	mov	r1, r9
 800c6b2:	f7f3 fd51 	bl	8000158 <__aeabi_dsub>
 800c6b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6ba:	f7f3 fd4f 	bl	800015c <__adddf3>
 800c6be:	e865 0102 	strd	r0, r1, [r5], #-8
 800c6c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6c6:	e9c5 6700 	strd	r6, r7, [r5]
 800c6ca:	e77b      	b.n	800c5c4 <__kernel_rem_pio2+0x4d0>
 800c6cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c6d0:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800c6d4:	4640      	mov	r0, r8
 800c6d6:	4649      	mov	r1, r9
 800c6d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c6dc:	f7f3 fd3e 	bl	800015c <__adddf3>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	460b      	mov	r3, r1
 800c6e4:	4606      	mov	r6, r0
 800c6e6:	460f      	mov	r7, r1
 800c6e8:	4640      	mov	r0, r8
 800c6ea:	4649      	mov	r1, r9
 800c6ec:	f7f3 fd34 	bl	8000158 <__aeabi_dsub>
 800c6f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6f4:	f7f3 fd32 	bl	800015c <__adddf3>
 800c6f8:	e865 0102 	strd	r0, r1, [r5], #-8
 800c6fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c700:	e9c5 6700 	strd	r6, r7, [r5]
 800c704:	e763      	b.n	800c5ce <__kernel_rem_pio2+0x4da>
 800c706:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800c70a:	f7f3 fd27 	bl	800015c <__adddf3>
 800c70e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c712:	e761      	b.n	800c5d8 <__kernel_rem_pio2+0x4e4>
 800c714:	9b04      	ldr	r3, [sp, #16]
 800c716:	9a04      	ldr	r2, [sp, #16]
 800c718:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800c71c:	601f      	str	r7, [r3, #0]
 800c71e:	605c      	str	r4, [r3, #4]
 800c720:	609d      	str	r5, [r3, #8]
 800c722:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c726:	60d3      	str	r3, [r2, #12]
 800c728:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c72c:	6110      	str	r0, [r2, #16]
 800c72e:	6153      	str	r3, [r2, #20]
 800c730:	e73a      	b.n	800c5a8 <__kernel_rem_pio2+0x4b4>
 800c732:	bf00      	nop
 800c734:	41700000 	.word	0x41700000
 800c738:	3e700000 	.word	0x3e700000
 800c73c:	00000000 	.word	0x00000000

0800c740 <scalbn>:
 800c740:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800c744:	4616      	mov	r6, r2
 800c746:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c74a:	4683      	mov	fp, r0
 800c74c:	468c      	mov	ip, r1
 800c74e:	460b      	mov	r3, r1
 800c750:	b982      	cbnz	r2, 800c774 <scalbn+0x34>
 800c752:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c756:	4303      	orrs	r3, r0
 800c758:	d039      	beq.n	800c7ce <scalbn+0x8e>
 800c75a:	4b2f      	ldr	r3, [pc, #188]	@ (800c818 <scalbn+0xd8>)
 800c75c:	2200      	movs	r2, #0
 800c75e:	f7f3 feb3 	bl	80004c8 <__aeabi_dmul>
 800c762:	4b2e      	ldr	r3, [pc, #184]	@ (800c81c <scalbn+0xdc>)
 800c764:	4683      	mov	fp, r0
 800c766:	429e      	cmp	r6, r3
 800c768:	468c      	mov	ip, r1
 800c76a:	da0d      	bge.n	800c788 <scalbn+0x48>
 800c76c:	a326      	add	r3, pc, #152	@ (adr r3, 800c808 <scalbn+0xc8>)
 800c76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c772:	e01b      	b.n	800c7ac <scalbn+0x6c>
 800c774:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800c778:	42ba      	cmp	r2, r7
 800c77a:	d109      	bne.n	800c790 <scalbn+0x50>
 800c77c:	4602      	mov	r2, r0
 800c77e:	f7f3 fced 	bl	800015c <__adddf3>
 800c782:	4683      	mov	fp, r0
 800c784:	468c      	mov	ip, r1
 800c786:	e022      	b.n	800c7ce <scalbn+0x8e>
 800c788:	460b      	mov	r3, r1
 800c78a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c78e:	3a36      	subs	r2, #54	@ 0x36
 800c790:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c794:	428e      	cmp	r6, r1
 800c796:	dd0c      	ble.n	800c7b2 <scalbn+0x72>
 800c798:	a31d      	add	r3, pc, #116	@ (adr r3, 800c810 <scalbn+0xd0>)
 800c79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79e:	461c      	mov	r4, r3
 800c7a0:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800c7a4:	f361 74df 	bfi	r4, r1, #31, #1
 800c7a8:	4621      	mov	r1, r4
 800c7aa:	481d      	ldr	r0, [pc, #116]	@ (800c820 <scalbn+0xe0>)
 800c7ac:	f7f3 fe8c 	bl	80004c8 <__aeabi_dmul>
 800c7b0:	e7e7      	b.n	800c782 <scalbn+0x42>
 800c7b2:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c7b6:	4432      	add	r2, r6
 800c7b8:	428a      	cmp	r2, r1
 800c7ba:	dced      	bgt.n	800c798 <scalbn+0x58>
 800c7bc:	2a00      	cmp	r2, #0
 800c7be:	dd0a      	ble.n	800c7d6 <scalbn+0x96>
 800c7c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c7c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c7c8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c7cc:	46ac      	mov	ip, r5
 800c7ce:	4658      	mov	r0, fp
 800c7d0:	4661      	mov	r1, ip
 800c7d2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800c7d6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c7da:	da09      	bge.n	800c7f0 <scalbn+0xb0>
 800c7dc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800c7e0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800c7e4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800c7e8:	480e      	ldr	r0, [pc, #56]	@ (800c824 <scalbn+0xe4>)
 800c7ea:	f041 011f 	orr.w	r1, r1, #31
 800c7ee:	e7bd      	b.n	800c76c <scalbn+0x2c>
 800c7f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c7f4:	3236      	adds	r2, #54	@ 0x36
 800c7f6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c7fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c7fe:	4658      	mov	r0, fp
 800c800:	4629      	mov	r1, r5
 800c802:	2200      	movs	r2, #0
 800c804:	4b08      	ldr	r3, [pc, #32]	@ (800c828 <scalbn+0xe8>)
 800c806:	e7d1      	b.n	800c7ac <scalbn+0x6c>
 800c808:	c2f8f359 	.word	0xc2f8f359
 800c80c:	01a56e1f 	.word	0x01a56e1f
 800c810:	8800759c 	.word	0x8800759c
 800c814:	7e37e43c 	.word	0x7e37e43c
 800c818:	43500000 	.word	0x43500000
 800c81c:	ffff3cb0 	.word	0xffff3cb0
 800c820:	8800759c 	.word	0x8800759c
 800c824:	c2f8f359 	.word	0xc2f8f359
 800c828:	3c900000 	.word	0x3c900000
 800c82c:	00000000 	.word	0x00000000

0800c830 <floor>:
 800c830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c834:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c838:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800c83c:	2e13      	cmp	r6, #19
 800c83e:	4602      	mov	r2, r0
 800c840:	460b      	mov	r3, r1
 800c842:	460c      	mov	r4, r1
 800c844:	4605      	mov	r5, r0
 800c846:	4680      	mov	r8, r0
 800c848:	dc35      	bgt.n	800c8b6 <floor+0x86>
 800c84a:	2e00      	cmp	r6, #0
 800c84c:	da17      	bge.n	800c87e <floor+0x4e>
 800c84e:	a334      	add	r3, pc, #208	@ (adr r3, 800c920 <floor+0xf0>)
 800c850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c854:	f7f3 fc82 	bl	800015c <__adddf3>
 800c858:	2200      	movs	r2, #0
 800c85a:	2300      	movs	r3, #0
 800c85c:	f7f4 f8c4 	bl	80009e8 <__aeabi_dcmpgt>
 800c860:	b150      	cbz	r0, 800c878 <floor+0x48>
 800c862:	2c00      	cmp	r4, #0
 800c864:	da57      	bge.n	800c916 <floor+0xe6>
 800c866:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c86a:	432c      	orrs	r4, r5
 800c86c:	2500      	movs	r5, #0
 800c86e:	42ac      	cmp	r4, r5
 800c870:	4c2d      	ldr	r4, [pc, #180]	@ (800c928 <floor+0xf8>)
 800c872:	bf08      	it	eq
 800c874:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c878:	4623      	mov	r3, r4
 800c87a:	462a      	mov	r2, r5
 800c87c:	e024      	b.n	800c8c8 <floor+0x98>
 800c87e:	4f2b      	ldr	r7, [pc, #172]	@ (800c92c <floor+0xfc>)
 800c880:	4137      	asrs	r7, r6
 800c882:	ea01 0c07 	and.w	ip, r1, r7
 800c886:	ea5c 0c00 	orrs.w	ip, ip, r0
 800c88a:	d01d      	beq.n	800c8c8 <floor+0x98>
 800c88c:	a324      	add	r3, pc, #144	@ (adr r3, 800c920 <floor+0xf0>)
 800c88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c892:	f7f3 fc63 	bl	800015c <__adddf3>
 800c896:	2200      	movs	r2, #0
 800c898:	2300      	movs	r3, #0
 800c89a:	f7f4 f8a5 	bl	80009e8 <__aeabi_dcmpgt>
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	d0ea      	beq.n	800c878 <floor+0x48>
 800c8a2:	2c00      	cmp	r4, #0
 800c8a4:	bfbe      	ittt	lt
 800c8a6:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c8aa:	4133      	asrlt	r3, r6
 800c8ac:	18e4      	addlt	r4, r4, r3
 800c8ae:	2500      	movs	r5, #0
 800c8b0:	ea24 0407 	bic.w	r4, r4, r7
 800c8b4:	e7e0      	b.n	800c878 <floor+0x48>
 800c8b6:	2e33      	cmp	r6, #51	@ 0x33
 800c8b8:	dd0a      	ble.n	800c8d0 <floor+0xa0>
 800c8ba:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c8be:	d103      	bne.n	800c8c8 <floor+0x98>
 800c8c0:	f7f3 fc4c 	bl	800015c <__adddf3>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	460b      	mov	r3, r1
 800c8c8:	4610      	mov	r0, r2
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8d0:	f04f 3cff 	mov.w	ip, #4294967295
 800c8d4:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800c8d8:	fa2c f707 	lsr.w	r7, ip, r7
 800c8dc:	4207      	tst	r7, r0
 800c8de:	d0f3      	beq.n	800c8c8 <floor+0x98>
 800c8e0:	a30f      	add	r3, pc, #60	@ (adr r3, 800c920 <floor+0xf0>)
 800c8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e6:	f7f3 fc39 	bl	800015c <__adddf3>
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	f7f4 f87b 	bl	80009e8 <__aeabi_dcmpgt>
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	d0c0      	beq.n	800c878 <floor+0x48>
 800c8f6:	2c00      	cmp	r4, #0
 800c8f8:	da0a      	bge.n	800c910 <floor+0xe0>
 800c8fa:	2e14      	cmp	r6, #20
 800c8fc:	d101      	bne.n	800c902 <floor+0xd2>
 800c8fe:	3401      	adds	r4, #1
 800c900:	e006      	b.n	800c910 <floor+0xe0>
 800c902:	2301      	movs	r3, #1
 800c904:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c908:	40b3      	lsls	r3, r6
 800c90a:	441d      	add	r5, r3
 800c90c:	4545      	cmp	r5, r8
 800c90e:	d3f6      	bcc.n	800c8fe <floor+0xce>
 800c910:	ea25 0507 	bic.w	r5, r5, r7
 800c914:	e7b0      	b.n	800c878 <floor+0x48>
 800c916:	2500      	movs	r5, #0
 800c918:	462c      	mov	r4, r5
 800c91a:	e7ad      	b.n	800c878 <floor+0x48>
 800c91c:	f3af 8000 	nop.w
 800c920:	8800759c 	.word	0x8800759c
 800c924:	7e37e43c 	.word	0x7e37e43c
 800c928:	bff00000 	.word	0xbff00000
 800c92c:	000fffff 	.word	0x000fffff

0800c930 <_init>:
 800c930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c932:	bf00      	nop
 800c934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c936:	bc08      	pop	{r3}
 800c938:	469e      	mov	lr, r3
 800c93a:	4770      	bx	lr

0800c93c <_fini>:
 800c93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c93e:	bf00      	nop
 800c940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c942:	bc08      	pop	{r3}
 800c944:	469e      	mov	lr, r3
 800c946:	4770      	bx	lr
